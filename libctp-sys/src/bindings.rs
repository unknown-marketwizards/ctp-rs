/* automatically generated by rust-bindgen 0.69.4 */

pub const THOST_FTDC_EXP_Normal: u8 = 48u8;
pub const THOST_FTDC_EXP_GenOrderByTrade: u8 = 49u8;
pub const THOST_FTDC_ICT_EID: u8 = 48u8;
pub const THOST_FTDC_ICT_IDCard: u8 = 49u8;
pub const THOST_FTDC_ICT_OfficerIDCard: u8 = 50u8;
pub const THOST_FTDC_ICT_PoliceIDCard: u8 = 51u8;
pub const THOST_FTDC_ICT_SoldierIDCard: u8 = 52u8;
pub const THOST_FTDC_ICT_HouseholdRegister: u8 = 53u8;
pub const THOST_FTDC_ICT_Passport: u8 = 54u8;
pub const THOST_FTDC_ICT_TaiwanCompatriotIDCard: u8 = 55u8;
pub const THOST_FTDC_ICT_HomeComingCard: u8 = 56u8;
pub const THOST_FTDC_ICT_LicenseNo: u8 = 57u8;
pub const THOST_FTDC_ICT_TaxNo: u8 = 65u8;
pub const THOST_FTDC_ICT_HMMainlandTravelPermit: u8 = 66u8;
pub const THOST_FTDC_ICT_TwMainlandTravelPermit: u8 = 67u8;
pub const THOST_FTDC_ICT_DrivingLicense: u8 = 68u8;
pub const THOST_FTDC_ICT_SocialID: u8 = 70u8;
pub const THOST_FTDC_ICT_LocalID: u8 = 71u8;
pub const THOST_FTDC_ICT_BusinessRegistration: u8 = 72u8;
pub const THOST_FTDC_ICT_HKMCIDCard: u8 = 73u8;
pub const THOST_FTDC_ICT_AccountsPermits: u8 = 74u8;
pub const THOST_FTDC_ICT_FrgPrmtRdCard: u8 = 75u8;
pub const THOST_FTDC_ICT_CptMngPrdLetter: u8 = 76u8;
pub const THOST_FTDC_ICT_HKMCTwResidencePermit: u8 = 77u8;
pub const THOST_FTDC_ICT_UniformSocialCreditCode: u8 = 78u8;
pub const THOST_FTDC_ICT_CorporationCertNo: u8 = 79u8;
pub const THOST_FTDC_ICT_OtherCard: u8 = 120u8;
pub const THOST_FTDC_IR_All: u8 = 49u8;
pub const THOST_FTDC_IR_Group: u8 = 50u8;
pub const THOST_FTDC_IR_Single: u8 = 51u8;
pub const THOST_FTDC_DR_All: u8 = 49u8;
pub const THOST_FTDC_DR_Group: u8 = 50u8;
pub const THOST_FTDC_DR_Single: u8 = 51u8;
pub const THOST_FTDC_DS_Asynchronous: u8 = 49u8;
pub const THOST_FTDC_DS_Synchronizing: u8 = 50u8;
pub const THOST_FTDC_DS_Synchronized: u8 = 51u8;
pub const THOST_FTDC_BDS_Synchronized: u8 = 49u8;
pub const THOST_FTDC_BDS_Synchronizing: u8 = 50u8;
pub const THOST_FTDC_ECS_NoConnection: u8 = 49u8;
pub const THOST_FTDC_ECS_QryInstrumentSent: u8 = 50u8;
pub const THOST_FTDC_ECS_GotInformation: u8 = 57u8;
pub const THOST_FTDC_TCS_NotConnected: u8 = 49u8;
pub const THOST_FTDC_TCS_Connected: u8 = 50u8;
pub const THOST_FTDC_TCS_QryInstrumentSent: u8 = 51u8;
pub const THOST_FTDC_TCS_SubPrivateFlow: u8 = 52u8;
pub const THOST_FTDC_FC_DataAsync: u8 = 49u8;
pub const THOST_FTDC_FC_ForceUserLogout: u8 = 50u8;
pub const THOST_FTDC_FC_UserPasswordUpdate: u8 = 51u8;
pub const THOST_FTDC_FC_BrokerPasswordUpdate: u8 = 52u8;
pub const THOST_FTDC_FC_InvestorPasswordUpdate: u8 = 53u8;
pub const THOST_FTDC_FC_OrderInsert: u8 = 54u8;
pub const THOST_FTDC_FC_OrderAction: u8 = 55u8;
pub const THOST_FTDC_FC_SyncSystemData: u8 = 56u8;
pub const THOST_FTDC_FC_SyncBrokerData: u8 = 57u8;
pub const THOST_FTDC_FC_BachSyncBrokerData: u8 = 65u8;
pub const THOST_FTDC_FC_SuperQuery: u8 = 66u8;
pub const THOST_FTDC_FC_ParkedOrderInsert: u8 = 67u8;
pub const THOST_FTDC_FC_ParkedOrderAction: u8 = 68u8;
pub const THOST_FTDC_FC_SyncOTP: u8 = 69u8;
pub const THOST_FTDC_FC_DeleteOrder: u8 = 70u8;
pub const THOST_FTDC_BFC_ForceUserLogout: u8 = 49u8;
pub const THOST_FTDC_BFC_UserPasswordUpdate: u8 = 50u8;
pub const THOST_FTDC_BFC_SyncBrokerData: u8 = 51u8;
pub const THOST_FTDC_BFC_BachSyncBrokerData: u8 = 52u8;
pub const THOST_FTDC_BFC_OrderInsert: u8 = 53u8;
pub const THOST_FTDC_BFC_OrderAction: u8 = 54u8;
pub const THOST_FTDC_BFC_AllQuery: u8 = 55u8;
pub const THOST_FTDC_BFC_log: u8 = 97u8;
pub const THOST_FTDC_BFC_BaseQry: u8 = 98u8;
pub const THOST_FTDC_BFC_TradeQry: u8 = 99u8;
pub const THOST_FTDC_BFC_Trade: u8 = 100u8;
pub const THOST_FTDC_BFC_Virement: u8 = 101u8;
pub const THOST_FTDC_BFC_Risk: u8 = 102u8;
pub const THOST_FTDC_BFC_Session: u8 = 103u8;
pub const THOST_FTDC_BFC_RiskNoticeCtl: u8 = 104u8;
pub const THOST_FTDC_BFC_RiskNotice: u8 = 105u8;
pub const THOST_FTDC_BFC_BrokerDeposit: u8 = 106u8;
pub const THOST_FTDC_BFC_QueryFund: u8 = 107u8;
pub const THOST_FTDC_BFC_QueryOrder: u8 = 108u8;
pub const THOST_FTDC_BFC_QueryTrade: u8 = 109u8;
pub const THOST_FTDC_BFC_QueryPosition: u8 = 110u8;
pub const THOST_FTDC_BFC_QueryMarketData: u8 = 111u8;
pub const THOST_FTDC_BFC_QueryUserEvent: u8 = 112u8;
pub const THOST_FTDC_BFC_QueryRiskNotify: u8 = 113u8;
pub const THOST_FTDC_BFC_QueryFundChange: u8 = 114u8;
pub const THOST_FTDC_BFC_QueryInvestor: u8 = 115u8;
pub const THOST_FTDC_BFC_QueryTradingCode: u8 = 116u8;
pub const THOST_FTDC_BFC_ForceClose: u8 = 117u8;
pub const THOST_FTDC_BFC_PressTest: u8 = 118u8;
pub const THOST_FTDC_BFC_RemainCalc: u8 = 119u8;
pub const THOST_FTDC_BFC_NetPositionInd: u8 = 120u8;
pub const THOST_FTDC_BFC_RiskPredict: u8 = 121u8;
pub const THOST_FTDC_BFC_DataExport: u8 = 122u8;
pub const THOST_FTDC_BFC_RiskTargetSetup: u8 = 65u8;
pub const THOST_FTDC_BFC_MarketDataWarn: u8 = 66u8;
pub const THOST_FTDC_BFC_QryBizNotice: u8 = 67u8;
pub const THOST_FTDC_BFC_CfgBizNotice: u8 = 68u8;
pub const THOST_FTDC_BFC_SyncOTP: u8 = 69u8;
pub const THOST_FTDC_BFC_SendBizNotice: u8 = 70u8;
pub const THOST_FTDC_BFC_CfgRiskLevelStd: u8 = 71u8;
pub const THOST_FTDC_BFC_TbCommand: u8 = 72u8;
pub const THOST_FTDC_BFC_DeleteOrder: u8 = 74u8;
pub const THOST_FTDC_BFC_ParkedOrderInsert: u8 = 75u8;
pub const THOST_FTDC_BFC_ParkedOrderAction: u8 = 76u8;
pub const THOST_FTDC_BFC_ExecOrderNoCheck: u8 = 77u8;
pub const THOST_FTDC_BFC_Designate: u8 = 78u8;
pub const THOST_FTDC_BFC_StockDisposal: u8 = 79u8;
pub const THOST_FTDC_BFC_BrokerDepositWarn: u8 = 81u8;
pub const THOST_FTDC_BFC_CoverWarn: u8 = 83u8;
pub const THOST_FTDC_BFC_PreExecOrder: u8 = 84u8;
pub const THOST_FTDC_BFC_ExecOrderRisk: u8 = 80u8;
pub const THOST_FTDC_BFC_PosiLimitWarn: u8 = 85u8;
pub const THOST_FTDC_BFC_QryPosiLimit: u8 = 86u8;
pub const THOST_FTDC_BFC_FBSign: u8 = 87u8;
pub const THOST_FTDC_BFC_FBAccount: u8 = 88u8;
pub const THOST_FTDC_OAS_Submitted: u8 = 97u8;
pub const THOST_FTDC_OAS_Accepted: u8 = 98u8;
pub const THOST_FTDC_OAS_Rejected: u8 = 99u8;
pub const THOST_FTDC_OST_AllTraded: u8 = 48u8;
pub const THOST_FTDC_OST_PartTradedQueueing: u8 = 49u8;
pub const THOST_FTDC_OST_PartTradedNotQueueing: u8 = 50u8;
pub const THOST_FTDC_OST_NoTradeQueueing: u8 = 51u8;
pub const THOST_FTDC_OST_NoTradeNotQueueing: u8 = 52u8;
pub const THOST_FTDC_OST_Canceled: u8 = 53u8;
pub const THOST_FTDC_OST_Unknown: u8 = 97u8;
pub const THOST_FTDC_OST_NotTouched: u8 = 98u8;
pub const THOST_FTDC_OST_Touched: u8 = 99u8;
pub const THOST_FTDC_OSS_InsertSubmitted: u8 = 48u8;
pub const THOST_FTDC_OSS_CancelSubmitted: u8 = 49u8;
pub const THOST_FTDC_OSS_ModifySubmitted: u8 = 50u8;
pub const THOST_FTDC_OSS_Accepted: u8 = 51u8;
pub const THOST_FTDC_OSS_InsertRejected: u8 = 52u8;
pub const THOST_FTDC_OSS_CancelRejected: u8 = 53u8;
pub const THOST_FTDC_OSS_ModifyRejected: u8 = 54u8;
pub const THOST_FTDC_PSD_Today: u8 = 49u8;
pub const THOST_FTDC_PSD_History: u8 = 50u8;
pub const THOST_FTDC_PDT_UseHistory: u8 = 49u8;
pub const THOST_FTDC_PDT_NoUseHistory: u8 = 50u8;
pub const THOST_FTDC_ER_Broker: u8 = 49u8;
pub const THOST_FTDC_ER_Host: u8 = 50u8;
pub const THOST_FTDC_ER_Maker: u8 = 51u8;
pub const THOST_FTDC_PC_Futures: u8 = 49u8;
pub const THOST_FTDC_PC_Options: u8 = 50u8;
pub const THOST_FTDC_PC_Combination: u8 = 51u8;
pub const THOST_FTDC_PC_Spot: u8 = 52u8;
pub const THOST_FTDC_PC_EFP: u8 = 53u8;
pub const THOST_FTDC_PC_SpotOption: u8 = 54u8;
pub const THOST_FTDC_PC_TAS: u8 = 55u8;
pub const THOST_FTDC_PC_MI: u8 = 73u8;
pub const THOST_FTDC_APC_FutureSingle: u8 = 49u8;
pub const THOST_FTDC_APC_OptionSingle: u8 = 50u8;
pub const THOST_FTDC_APC_Futures: u8 = 51u8;
pub const THOST_FTDC_APC_Options: u8 = 52u8;
pub const THOST_FTDC_APC_TradingComb: u8 = 53u8;
pub const THOST_FTDC_APC_UnTradingComb: u8 = 54u8;
pub const THOST_FTDC_APC_AllTrading: u8 = 55u8;
pub const THOST_FTDC_APC_All: u8 = 56u8;
pub const THOST_FTDC_IP_NotStart: u8 = 48u8;
pub const THOST_FTDC_IP_Started: u8 = 49u8;
pub const THOST_FTDC_IP_Pause: u8 = 50u8;
pub const THOST_FTDC_IP_Expired: u8 = 51u8;
pub const THOST_FTDC_D_Buy: u8 = 48u8;
pub const THOST_FTDC_D_Sell: u8 = 49u8;
pub const THOST_FTDC_PT_Net: u8 = 49u8;
pub const THOST_FTDC_PT_Gross: u8 = 50u8;
pub const THOST_FTDC_PD_Net: u8 = 49u8;
pub const THOST_FTDC_PD_Long: u8 = 50u8;
pub const THOST_FTDC_PD_Short: u8 = 51u8;
pub const THOST_FTDC_SS_NonActive: u8 = 49u8;
pub const THOST_FTDC_SS_Startup: u8 = 50u8;
pub const THOST_FTDC_SS_Operating: u8 = 51u8;
pub const THOST_FTDC_SS_Settlement: u8 = 52u8;
pub const THOST_FTDC_SS_SettlementFinished: u8 = 53u8;
pub const THOST_FTDC_RA_Trade: u8 = 48u8;
pub const THOST_FTDC_RA_Settlement: u8 = 49u8;
pub const THOST_FTDC_HF_Speculation: u8 = 49u8;
pub const THOST_FTDC_HF_Arbitrage: u8 = 50u8;
pub const THOST_FTDC_HF_Hedge: u8 = 51u8;
pub const THOST_FTDC_HF_MarketMaker: u8 = 53u8;
pub const THOST_FTDC_HF_SpecHedge: u8 = 54u8;
pub const THOST_FTDC_HF_HedgeSpec: u8 = 55u8;
pub const THOST_FTDC_BHF_Speculation: u8 = 49u8;
pub const THOST_FTDC_BHF_Arbitrage: u8 = 50u8;
pub const THOST_FTDC_BHF_Hedge: u8 = 51u8;
pub const THOST_FTDC_CIDT_Speculation: u8 = 49u8;
pub const THOST_FTDC_CIDT_Arbitrage: u8 = 50u8;
pub const THOST_FTDC_CIDT_Hedge: u8 = 51u8;
pub const THOST_FTDC_CIDT_MarketMaker: u8 = 53u8;
pub const THOST_FTDC_OPT_AnyPrice: u8 = 49u8;
pub const THOST_FTDC_OPT_LimitPrice: u8 = 50u8;
pub const THOST_FTDC_OPT_BestPrice: u8 = 51u8;
pub const THOST_FTDC_OPT_LastPrice: u8 = 52u8;
pub const THOST_FTDC_OPT_LastPricePlusOneTicks: u8 = 53u8;
pub const THOST_FTDC_OPT_LastPricePlusTwoTicks: u8 = 54u8;
pub const THOST_FTDC_OPT_LastPricePlusThreeTicks: u8 = 55u8;
pub const THOST_FTDC_OPT_AskPrice1: u8 = 56u8;
pub const THOST_FTDC_OPT_AskPrice1PlusOneTicks: u8 = 57u8;
pub const THOST_FTDC_OPT_AskPrice1PlusTwoTicks: u8 = 65u8;
pub const THOST_FTDC_OPT_AskPrice1PlusThreeTicks: u8 = 66u8;
pub const THOST_FTDC_OPT_BidPrice1: u8 = 67u8;
pub const THOST_FTDC_OPT_BidPrice1PlusOneTicks: u8 = 68u8;
pub const THOST_FTDC_OPT_BidPrice1PlusTwoTicks: u8 = 69u8;
pub const THOST_FTDC_OPT_BidPrice1PlusThreeTicks: u8 = 70u8;
pub const THOST_FTDC_OPT_FiveLevelPrice: u8 = 71u8;
pub const THOST_FTDC_OF_Open: u8 = 48u8;
pub const THOST_FTDC_OF_Close: u8 = 49u8;
pub const THOST_FTDC_OF_ForceClose: u8 = 50u8;
pub const THOST_FTDC_OF_CloseToday: u8 = 51u8;
pub const THOST_FTDC_OF_CloseYesterday: u8 = 52u8;
pub const THOST_FTDC_OF_ForceOff: u8 = 53u8;
pub const THOST_FTDC_OF_LocalForceClose: u8 = 54u8;
pub const THOST_FTDC_FCC_NotForceClose: u8 = 48u8;
pub const THOST_FTDC_FCC_LackDeposit: u8 = 49u8;
pub const THOST_FTDC_FCC_ClientOverPositionLimit: u8 = 50u8;
pub const THOST_FTDC_FCC_MemberOverPositionLimit: u8 = 51u8;
pub const THOST_FTDC_FCC_NotMultiple: u8 = 52u8;
pub const THOST_FTDC_FCC_Violation: u8 = 53u8;
pub const THOST_FTDC_FCC_Other: u8 = 54u8;
pub const THOST_FTDC_FCC_PersonDeliv: u8 = 55u8;
pub const THOST_FTDC_FCC_Notverifycapital: u8 = 56u8;
pub const THOST_FTDC_ORDT_Normal: u8 = 48u8;
pub const THOST_FTDC_ORDT_DeriveFromQuote: u8 = 49u8;
pub const THOST_FTDC_ORDT_DeriveFromCombination: u8 = 50u8;
pub const THOST_FTDC_ORDT_Combination: u8 = 51u8;
pub const THOST_FTDC_ORDT_ConditionalOrder: u8 = 52u8;
pub const THOST_FTDC_ORDT_Swap: u8 = 53u8;
pub const THOST_FTDC_ORDT_DeriveFromBlockTrade: u8 = 54u8;
pub const THOST_FTDC_ORDT_DeriveFromEFPTrade: u8 = 55u8;
pub const THOST_FTDC_TC_IOC: u8 = 49u8;
pub const THOST_FTDC_TC_GFS: u8 = 50u8;
pub const THOST_FTDC_TC_GFD: u8 = 51u8;
pub const THOST_FTDC_TC_GTD: u8 = 52u8;
pub const THOST_FTDC_TC_GTC: u8 = 53u8;
pub const THOST_FTDC_TC_GFA: u8 = 54u8;
pub const THOST_FTDC_VC_AV: u8 = 49u8;
pub const THOST_FTDC_VC_MV: u8 = 50u8;
pub const THOST_FTDC_VC_CV: u8 = 51u8;
pub const THOST_FTDC_CC_Immediately: u8 = 49u8;
pub const THOST_FTDC_CC_Touch: u8 = 50u8;
pub const THOST_FTDC_CC_TouchProfit: u8 = 51u8;
pub const THOST_FTDC_CC_ParkedOrder: u8 = 52u8;
pub const THOST_FTDC_CC_LastPriceGreaterThanStopPrice: u8 = 53u8;
pub const THOST_FTDC_CC_LastPriceGreaterEqualStopPrice: u8 = 54u8;
pub const THOST_FTDC_CC_LastPriceLesserThanStopPrice: u8 = 55u8;
pub const THOST_FTDC_CC_LastPriceLesserEqualStopPrice: u8 = 56u8;
pub const THOST_FTDC_CC_AskPriceGreaterThanStopPrice: u8 = 57u8;
pub const THOST_FTDC_CC_AskPriceGreaterEqualStopPrice: u8 = 65u8;
pub const THOST_FTDC_CC_AskPriceLesserThanStopPrice: u8 = 66u8;
pub const THOST_FTDC_CC_AskPriceLesserEqualStopPrice: u8 = 67u8;
pub const THOST_FTDC_CC_BidPriceGreaterThanStopPrice: u8 = 68u8;
pub const THOST_FTDC_CC_BidPriceGreaterEqualStopPrice: u8 = 69u8;
pub const THOST_FTDC_CC_BidPriceLesserThanStopPrice: u8 = 70u8;
pub const THOST_FTDC_CC_BidPriceLesserEqualStopPrice: u8 = 72u8;
pub const THOST_FTDC_AF_Delete: u8 = 48u8;
pub const THOST_FTDC_AF_Modify: u8 = 51u8;
pub const THOST_FTDC_TR_Allow: u8 = 48u8;
pub const THOST_FTDC_TR_CloseOnly: u8 = 49u8;
pub const THOST_FTDC_TR_Forbidden: u8 = 50u8;
pub const THOST_FTDC_OSRC_Participant: u8 = 48u8;
pub const THOST_FTDC_OSRC_Administrator: u8 = 49u8;
pub const THOST_FTDC_TRDT_SplitCombination: u8 = 35u8;
pub const THOST_FTDC_TRDT_Common: u8 = 48u8;
pub const THOST_FTDC_TRDT_OptionsExecution: u8 = 49u8;
pub const THOST_FTDC_TRDT_OTC: u8 = 50u8;
pub const THOST_FTDC_TRDT_EFPDerived: u8 = 51u8;
pub const THOST_FTDC_TRDT_CombinationDerived: u8 = 52u8;
pub const THOST_FTDC_TRDT_BlockTrade: u8 = 53u8;
pub const THOST_FTDC_SPOST_Common: u8 = 35u8;
pub const THOST_FTDC_SPOST_Tas: u8 = 48u8;
pub const THOST_FTDC_PSRC_LastPrice: u8 = 48u8;
pub const THOST_FTDC_PSRC_Buy: u8 = 49u8;
pub const THOST_FTDC_PSRC_Sell: u8 = 50u8;
pub const THOST_FTDC_PSRC_OTC: u8 = 51u8;
pub const THOST_FTDC_IS_BeforeTrading: u8 = 48u8;
pub const THOST_FTDC_IS_NoTrading: u8 = 49u8;
pub const THOST_FTDC_IS_Continous: u8 = 50u8;
pub const THOST_FTDC_IS_AuctionOrdering: u8 = 51u8;
pub const THOST_FTDC_IS_AuctionBalance: u8 = 52u8;
pub const THOST_FTDC_IS_AuctionMatch: u8 = 53u8;
pub const THOST_FTDC_IS_Closed: u8 = 54u8;
pub const THOST_FTDC_IER_Automatic: u8 = 49u8;
pub const THOST_FTDC_IER_Manual: u8 = 50u8;
pub const THOST_FTDC_IER_Fuse: u8 = 51u8;
pub const THOST_FTDC_BS_NoUpload: u8 = 49u8;
pub const THOST_FTDC_BS_Uploaded: u8 = 50u8;
pub const THOST_FTDC_BS_Failed: u8 = 51u8;
pub const THOST_FTDC_RS_All: u8 = 49u8;
pub const THOST_FTDC_RS_ByProduct: u8 = 50u8;
pub const THOST_FTDC_RP_ByVolume: u8 = 49u8;
pub const THOST_FTDC_RP_ByFeeOnHand: u8 = 50u8;
pub const THOST_FTDC_RL_Level1: u8 = 49u8;
pub const THOST_FTDC_RL_Level2: u8 = 50u8;
pub const THOST_FTDC_RL_Level3: u8 = 51u8;
pub const THOST_FTDC_RL_Level4: u8 = 52u8;
pub const THOST_FTDC_RL_Level5: u8 = 53u8;
pub const THOST_FTDC_RL_Level6: u8 = 54u8;
pub const THOST_FTDC_RL_Level7: u8 = 55u8;
pub const THOST_FTDC_RL_Level8: u8 = 56u8;
pub const THOST_FTDC_RL_Level9: u8 = 57u8;
pub const THOST_FTDC_RSD_ByPeriod: u8 = 49u8;
pub const THOST_FTDC_RSD_ByStandard: u8 = 50u8;
pub const THOST_FTDC_MT_Out: u8 = 48u8;
pub const THOST_FTDC_MT_In: u8 = 49u8;
pub const THOST_FTDC_ISPI_MortgageRatio: u8 = 52u8;
pub const THOST_FTDC_ISPI_MarginWay: u8 = 53u8;
pub const THOST_FTDC_ISPI_BillDeposit: u8 = 57u8;
pub const THOST_FTDC_ESPI_MortgageRatio: u8 = 49u8;
pub const THOST_FTDC_ESPI_OtherFundItem: u8 = 50u8;
pub const THOST_FTDC_ESPI_OtherFundImport: u8 = 51u8;
pub const THOST_FTDC_ESPI_CFFEXMinPrepa: u8 = 54u8;
pub const THOST_FTDC_ESPI_CZCESettlementType: u8 = 55u8;
pub const THOST_FTDC_ESPI_ExchDelivFeeMode: u8 = 57u8;
pub const THOST_FTDC_ESPI_DelivFeeMode: u8 = 48u8;
pub const THOST_FTDC_ESPI_CZCEComMarginType: u8 = 65u8;
pub const THOST_FTDC_ESPI_DceComMarginType: u8 = 66u8;
pub const THOST_FTDC_ESPI_OptOutDisCountRate: u8 = 97u8;
pub const THOST_FTDC_ESPI_OptMiniGuarantee: u8 = 98u8;
pub const THOST_FTDC_SPI_InvestorIDMinLength: u8 = 49u8;
pub const THOST_FTDC_SPI_AccountIDMinLength: u8 = 50u8;
pub const THOST_FTDC_SPI_UserRightLogon: u8 = 51u8;
pub const THOST_FTDC_SPI_SettlementBillTrade: u8 = 52u8;
pub const THOST_FTDC_SPI_TradingCode: u8 = 53u8;
pub const THOST_FTDC_SPI_CheckFund: u8 = 54u8;
pub const THOST_FTDC_SPI_CommModelRight: u8 = 55u8;
pub const THOST_FTDC_SPI_MarginModelRight: u8 = 57u8;
pub const THOST_FTDC_SPI_IsStandardActive: u8 = 56u8;
pub const THOST_FTDC_SPI_UploadSettlementFile: u8 = 85u8;
pub const THOST_FTDC_SPI_DownloadCSRCFile: u8 = 68u8;
pub const THOST_FTDC_SPI_SettlementBillFile: u8 = 83u8;
pub const THOST_FTDC_SPI_CSRCOthersFile: u8 = 67u8;
pub const THOST_FTDC_SPI_InvestorPhoto: u8 = 80u8;
pub const THOST_FTDC_SPI_CSRCData: u8 = 82u8;
pub const THOST_FTDC_SPI_InvestorPwdModel: u8 = 73u8;
pub const THOST_FTDC_SPI_CFFEXInvestorSettleFile: u8 = 70u8;
pub const THOST_FTDC_SPI_InvestorIDType: u8 = 97u8;
pub const THOST_FTDC_SPI_FreezeMaxReMain: u8 = 114u8;
pub const THOST_FTDC_SPI_IsSync: u8 = 65u8;
pub const THOST_FTDC_SPI_RelieveOpenLimit: u8 = 79u8;
pub const THOST_FTDC_SPI_IsStandardFreeze: u8 = 88u8;
pub const THOST_FTDC_SPI_CZCENormalProductHedge: u8 = 66u8;
pub const THOST_FTDC_TPID_EncryptionStandard: u8 = 69u8;
pub const THOST_FTDC_TPID_RiskMode: u8 = 82u8;
pub const THOST_FTDC_TPID_RiskModeGlobal: u8 = 71u8;
pub const THOST_FTDC_TPID_modeEncode: u8 = 80u8;
pub const THOST_FTDC_TPID_tickMode: u8 = 84u8;
pub const THOST_FTDC_TPID_SingleUserSessionMaxNum: u8 = 83u8;
pub const THOST_FTDC_TPID_LoginFailMaxNum: u8 = 76u8;
pub const THOST_FTDC_TPID_IsAuthForce: u8 = 65u8;
pub const THOST_FTDC_TPID_IsPosiFreeze: u8 = 70u8;
pub const THOST_FTDC_TPID_IsPosiLimit: u8 = 77u8;
pub const THOST_FTDC_TPID_ForQuoteTimeInterval: u8 = 81u8;
pub const THOST_FTDC_TPID_IsFuturePosiLimit: u8 = 66u8;
pub const THOST_FTDC_TPID_IsFutureOrderFreq: u8 = 67u8;
pub const THOST_FTDC_TPID_IsExecOrderProfit: u8 = 72u8;
pub const THOST_FTDC_TPID_IsCheckBankAcc: u8 = 73u8;
pub const THOST_FTDC_TPID_PasswordDeadLine: u8 = 74u8;
pub const THOST_FTDC_TPID_IsStrongPassword: u8 = 75u8;
pub const THOST_FTDC_TPID_BalanceMorgage: u8 = 97u8;
pub const THOST_FTDC_TPID_MinPwdLen: u8 = 79u8;
pub const THOST_FTDC_TPID_LoginFailMaxNumForIP: u8 = 85u8;
pub const THOST_FTDC_TPID_PasswordPeriod: u8 = 86u8;
pub const THOST_FTDC_FI_SettlementFund: u8 = 70u8;
pub const THOST_FTDC_FI_Trade: u8 = 84u8;
pub const THOST_FTDC_FI_InvestorPosition: u8 = 80u8;
pub const THOST_FTDC_FI_SubEntryFund: u8 = 79u8;
pub const THOST_FTDC_FI_CZCECombinationPos: u8 = 67u8;
pub const THOST_FTDC_FI_CSRCData: u8 = 82u8;
pub const THOST_FTDC_FI_CZCEClose: u8 = 76u8;
pub const THOST_FTDC_FI_CZCENoClose: u8 = 78u8;
pub const THOST_FTDC_FI_PositionDtl: u8 = 68u8;
pub const THOST_FTDC_FI_OptionStrike: u8 = 83u8;
pub const THOST_FTDC_FI_SettlementPriceComparison: u8 = 77u8;
pub const THOST_FTDC_FI_NonTradePosChange: u8 = 66u8;
pub const THOST_FTDC_FUT_Settlement: u8 = 48u8;
pub const THOST_FTDC_FUT_Check: u8 = 49u8;
pub const THOST_FTDC_FFT_Txt: u8 = 48u8;
pub const THOST_FTDC_FFT_Zip: u8 = 49u8;
pub const THOST_FTDC_FFT_DBF: u8 = 50u8;
pub const THOST_FTDC_FUS_SucceedUpload: u8 = 49u8;
pub const THOST_FTDC_FUS_FailedUpload: u8 = 50u8;
pub const THOST_FTDC_FUS_SucceedLoad: u8 = 51u8;
pub const THOST_FTDC_FUS_PartSucceedLoad: u8 = 52u8;
pub const THOST_FTDC_FUS_FailedLoad: u8 = 53u8;
pub const THOST_FTDC_TD_Out: u8 = 48u8;
pub const THOST_FTDC_TD_In: u8 = 49u8;
pub const THOST_FTDC_SC_NoSpecialRule: u8 = 48u8;
pub const THOST_FTDC_SC_NoSpringFestival: u8 = 49u8;
pub const THOST_FTDC_IPT_LastSettlement: u8 = 49u8;
pub const THOST_FTDC_IPT_LaseClose: u8 = 50u8;
pub const THOST_FTDC_PLP_Active: u8 = 49u8;
pub const THOST_FTDC_PLP_NonActive: u8 = 50u8;
pub const THOST_FTDC_PLP_Canceled: u8 = 51u8;
pub const THOST_FTDC_DM_CashDeliv: u8 = 49u8;
pub const THOST_FTDC_DM_CommodityDeliv: u8 = 50u8;
pub const THOST_FTDC_FIOT_FundIO: u8 = 49u8;
pub const THOST_FTDC_FIOT_Transfer: u8 = 50u8;
pub const THOST_FTDC_FIOT_SwapCurrency: u8 = 51u8;
pub const THOST_FTDC_FT_Deposite: u8 = 49u8;
pub const THOST_FTDC_FT_ItemFund: u8 = 50u8;
pub const THOST_FTDC_FT_Company: u8 = 51u8;
pub const THOST_FTDC_FT_InnerTransfer: u8 = 52u8;
pub const THOST_FTDC_FD_In: u8 = 49u8;
pub const THOST_FTDC_FD_Out: u8 = 50u8;
pub const THOST_FTDC_FS_Record: u8 = 49u8;
pub const THOST_FTDC_FS_Check: u8 = 50u8;
pub const THOST_FTDC_FS_Charge: u8 = 51u8;
pub const THOST_FTDC_PS_None: u8 = 49u8;
pub const THOST_FTDC_PS_Publishing: u8 = 50u8;
pub const THOST_FTDC_PS_Published: u8 = 51u8;
pub const THOST_FTDC_ES_NonActive: u8 = 49u8;
pub const THOST_FTDC_ES_Startup: u8 = 50u8;
pub const THOST_FTDC_ES_Initialize: u8 = 51u8;
pub const THOST_FTDC_ES_Initialized: u8 = 52u8;
pub const THOST_FTDC_ES_Close: u8 = 53u8;
pub const THOST_FTDC_ES_Closed: u8 = 54u8;
pub const THOST_FTDC_ES_Settlement: u8 = 55u8;
pub const THOST_FTDC_STS_Initialize: u8 = 48u8;
pub const THOST_FTDC_STS_Settlementing: u8 = 49u8;
pub const THOST_FTDC_STS_Settlemented: u8 = 50u8;
pub const THOST_FTDC_STS_Finished: u8 = 51u8;
pub const THOST_FTDC_CT_Person: u8 = 48u8;
pub const THOST_FTDC_CT_Company: u8 = 49u8;
pub const THOST_FTDC_CT_Fund: u8 = 50u8;
pub const THOST_FTDC_CT_SpecialOrgan: u8 = 51u8;
pub const THOST_FTDC_CT_Asset: u8 = 52u8;
pub const THOST_FTDC_BT_Trade: u8 = 48u8;
pub const THOST_FTDC_BT_TradeSettle: u8 = 49u8;
pub const THOST_FTDC_FAS_Low: u8 = 49u8;
pub const THOST_FTDC_FAS_Normal: u8 = 50u8;
pub const THOST_FTDC_FAS_Focus: u8 = 51u8;
pub const THOST_FTDC_FAS_Risk: u8 = 52u8;
pub const THOST_FTDC_FAS_ByTrade: u8 = 49u8;
pub const THOST_FTDC_FAS_ByDeliv: u8 = 50u8;
pub const THOST_FTDC_FAS_None: u8 = 51u8;
pub const THOST_FTDC_FAS_FixFee: u8 = 52u8;
pub const THOST_FTDC_PWDT_Trade: u8 = 49u8;
pub const THOST_FTDC_PWDT_Account: u8 = 50u8;
pub const THOST_FTDC_AG_All: u8 = 49u8;
pub const THOST_FTDC_AG_OnlyLost: u8 = 50u8;
pub const THOST_FTDC_AG_OnlyGain: u8 = 51u8;
pub const THOST_FTDC_AG_None: u8 = 52u8;
pub const THOST_FTDC_ICP_Include: u8 = 48u8;
pub const THOST_FTDC_ICP_NotInclude: u8 = 50u8;
pub const THOST_FTDC_AWT_Enable: u8 = 48u8;
pub const THOST_FTDC_AWT_Disable: u8 = 50u8;
pub const THOST_FTDC_AWT_NoHoldEnable: u8 = 51u8;
pub const THOST_FTDC_FPWD_UnCheck: u8 = 48u8;
pub const THOST_FTDC_FPWD_Check: u8 = 49u8;
pub const THOST_FTDC_TT_BankToFuture: u8 = 48u8;
pub const THOST_FTDC_TT_FutureToBank: u8 = 49u8;
pub const THOST_FTDC_TVF_Invalid: u8 = 48u8;
pub const THOST_FTDC_TVF_Valid: u8 = 49u8;
pub const THOST_FTDC_TVF_Reverse: u8 = 50u8;
pub const THOST_FTDC_RN_CD: u8 = 48u8;
pub const THOST_FTDC_RN_ZT: u8 = 49u8;
pub const THOST_FTDC_RN_QT: u8 = 50u8;
pub const THOST_FTDC_SEX_None: u8 = 48u8;
pub const THOST_FTDC_SEX_Man: u8 = 49u8;
pub const THOST_FTDC_SEX_Woman: u8 = 50u8;
pub const THOST_FTDC_UT_Investor: u8 = 48u8;
pub const THOST_FTDC_UT_Operator: u8 = 49u8;
pub const THOST_FTDC_UT_SuperUser: u8 = 50u8;
pub const THOST_FTDC_RATETYPE_MarginRate: u8 = 50u8;
pub const THOST_FTDC_NOTETYPE_TradeSettleBill: u8 = 49u8;
pub const THOST_FTDC_NOTETYPE_TradeSettleMonth: u8 = 50u8;
pub const THOST_FTDC_NOTETYPE_CallMarginNotes: u8 = 51u8;
pub const THOST_FTDC_NOTETYPE_ForceCloseNotes: u8 = 52u8;
pub const THOST_FTDC_NOTETYPE_TradeNotes: u8 = 53u8;
pub const THOST_FTDC_NOTETYPE_DelivNotes: u8 = 54u8;
pub const THOST_FTDC_SBS_Day: u8 = 49u8;
pub const THOST_FTDC_SBS_Volume: u8 = 50u8;
pub const THOST_FTDC_ST_Day: u8 = 48u8;
pub const THOST_FTDC_ST_Month: u8 = 49u8;
pub const THOST_FTDC_URT_Logon: u8 = 49u8;
pub const THOST_FTDC_URT_Transfer: u8 = 50u8;
pub const THOST_FTDC_URT_EMail: u8 = 51u8;
pub const THOST_FTDC_URT_Fax: u8 = 52u8;
pub const THOST_FTDC_URT_ConditionOrder: u8 = 53u8;
pub const THOST_FTDC_MPT_PreSettlementPrice: u8 = 49u8;
pub const THOST_FTDC_MPT_SettlementPrice: u8 = 50u8;
pub const THOST_FTDC_MPT_AveragePrice: u8 = 51u8;
pub const THOST_FTDC_MPT_OpenPrice: u8 = 52u8;
pub const THOST_FTDC_BGS_None: u8 = 48u8;
pub const THOST_FTDC_BGS_NoGenerated: u8 = 49u8;
pub const THOST_FTDC_BGS_Generated: u8 = 50u8;
pub const THOST_FTDC_AT_HandlePositionAlgo: u8 = 49u8;
pub const THOST_FTDC_AT_FindMarginRateAlgo: u8 = 50u8;
pub const THOST_FTDC_HPA_Base: u8 = 49u8;
pub const THOST_FTDC_HPA_DCE: u8 = 50u8;
pub const THOST_FTDC_HPA_CZCE: u8 = 51u8;
pub const THOST_FTDC_FMRA_Base: u8 = 49u8;
pub const THOST_FTDC_FMRA_DCE: u8 = 50u8;
pub const THOST_FTDC_FMRA_CZCE: u8 = 51u8;
pub const THOST_FTDC_HTAA_Base: u8 = 49u8;
pub const THOST_FTDC_HTAA_DCE: u8 = 50u8;
pub const THOST_FTDC_HTAA_CZCE: u8 = 51u8;
pub const THOST_FTDC_PST_Order: u8 = 49u8;
pub const THOST_FTDC_PST_Open: u8 = 50u8;
pub const THOST_FTDC_PST_Fund: u8 = 51u8;
pub const THOST_FTDC_PST_Settlement: u8 = 52u8;
pub const THOST_FTDC_PST_Company: u8 = 53u8;
pub const THOST_FTDC_PST_Corporation: u8 = 54u8;
pub const THOST_FTDC_PST_LinkMan: u8 = 55u8;
pub const THOST_FTDC_PST_Ledger: u8 = 56u8;
pub const THOST_FTDC_PST_Trustee: u8 = 57u8;
pub const THOST_FTDC_PST_TrusteeCorporation: u8 = 65u8;
pub const THOST_FTDC_PST_TrusteeOpen: u8 = 66u8;
pub const THOST_FTDC_PST_TrusteeContact: u8 = 67u8;
pub const THOST_FTDC_PST_ForeignerRefer: u8 = 68u8;
pub const THOST_FTDC_PST_CorporationRefer: u8 = 69u8;
pub const THOST_FTDC_QIR_All: u8 = 49u8;
pub const THOST_FTDC_QIR_Group: u8 = 50u8;
pub const THOST_FTDC_QIR_Single: u8 = 51u8;
pub const THOST_FTDC_IRS_Normal: u8 = 49u8;
pub const THOST_FTDC_IRS_Warn: u8 = 50u8;
pub const THOST_FTDC_IRS_Call: u8 = 51u8;
pub const THOST_FTDC_IRS_Force: u8 = 52u8;
pub const THOST_FTDC_IRS_Exception: u8 = 53u8;
pub const THOST_FTDC_UET_Login: u8 = 49u8;
pub const THOST_FTDC_UET_Logout: u8 = 50u8;
pub const THOST_FTDC_UET_Trading: u8 = 51u8;
pub const THOST_FTDC_UET_TradingError: u8 = 52u8;
pub const THOST_FTDC_UET_UpdatePassword: u8 = 53u8;
pub const THOST_FTDC_UET_Authenticate: u8 = 54u8;
pub const THOST_FTDC_UET_SubmitSysInfo: u8 = 55u8;
pub const THOST_FTDC_UET_Transfer: u8 = 56u8;
pub const THOST_FTDC_UET_Other: u8 = 57u8;
pub const THOST_FTDC_ICS_Close: u8 = 48u8;
pub const THOST_FTDC_ICS_CloseToday: u8 = 49u8;
pub const THOST_FTDC_SM_Non: u8 = 48u8;
pub const THOST_FTDC_SM_Instrument: u8 = 49u8;
pub const THOST_FTDC_SM_Product: u8 = 50u8;
pub const THOST_FTDC_SM_Investor: u8 = 51u8;
pub const THOST_FTDC_PAOS_NotSend: u8 = 49u8;
pub const THOST_FTDC_PAOS_Send: u8 = 50u8;
pub const THOST_FTDC_PAOS_Deleted: u8 = 51u8;
pub const THOST_FTDC_VDS_Dealing: u8 = 49u8;
pub const THOST_FTDC_VDS_DeaclSucceed: u8 = 50u8;
pub const THOST_FTDC_ORGS_Standard: u8 = 48u8;
pub const THOST_FTDC_ORGS_ESunny: u8 = 49u8;
pub const THOST_FTDC_ORGS_KingStarV6: u8 = 50u8;
pub const THOST_FTDC_VTS_NaturalDeal: u8 = 48u8;
pub const THOST_FTDC_VTS_SucceedEnd: u8 = 49u8;
pub const THOST_FTDC_VTS_FailedEND: u8 = 50u8;
pub const THOST_FTDC_VTS_Exception: u8 = 51u8;
pub const THOST_FTDC_VTS_ManualDeal: u8 = 52u8;
pub const THOST_FTDC_VTS_MesException: u8 = 53u8;
pub const THOST_FTDC_VTS_SysException: u8 = 54u8;
pub const THOST_FTDC_VBAT_BankBook: u8 = 49u8;
pub const THOST_FTDC_VBAT_BankCard: u8 = 50u8;
pub const THOST_FTDC_VBAT_CreditCard: u8 = 51u8;
pub const THOST_FTDC_VMS_Natural: u8 = 48u8;
pub const THOST_FTDC_VMS_Canceled: u8 = 57u8;
pub const THOST_FTDC_VAA_NoAvailAbility: u8 = 48u8;
pub const THOST_FTDC_VAA_AvailAbility: u8 = 49u8;
pub const THOST_FTDC_VAA_Repeal: u8 = 50u8;
pub const THOST_FTDC_GEN_Program: u8 = 48u8;
pub const THOST_FTDC_GEN_HandWork: u8 = 49u8;
pub const THOST_FTDC_CFMMCKK_REQUEST: u8 = 82u8;
pub const THOST_FTDC_CFMMCKK_AUTO: u8 = 65u8;
pub const THOST_FTDC_CFMMCKK_MANUAL: u8 = 77u8;
pub const THOST_FTDC_CFT_IDCard: u8 = 48u8;
pub const THOST_FTDC_CFT_Passport: u8 = 49u8;
pub const THOST_FTDC_CFT_OfficerIDCard: u8 = 50u8;
pub const THOST_FTDC_CFT_SoldierIDCard: u8 = 51u8;
pub const THOST_FTDC_CFT_HomeComingCard: u8 = 52u8;
pub const THOST_FTDC_CFT_HouseholdRegister: u8 = 53u8;
pub const THOST_FTDC_CFT_LicenseNo: u8 = 54u8;
pub const THOST_FTDC_CFT_InstitutionCodeCard: u8 = 55u8;
pub const THOST_FTDC_CFT_TempLicenseNo: u8 = 56u8;
pub const THOST_FTDC_CFT_NoEnterpriseLicenseNo: u8 = 57u8;
pub const THOST_FTDC_CFT_OtherCard: u8 = 120u8;
pub const THOST_FTDC_CFT_SuperDepAgree: u8 = 97u8;
pub const THOST_FTDC_FBC_Others: u8 = 48u8;
pub const THOST_FTDC_FBC_TransferDetails: u8 = 49u8;
pub const THOST_FTDC_FBC_CustAccStatus: u8 = 50u8;
pub const THOST_FTDC_FBC_AccountTradeDetails: u8 = 51u8;
pub const THOST_FTDC_FBC_FutureAccountChangeInfoDetails: u8 = 52u8;
pub const THOST_FTDC_FBC_CustMoneyDetail: u8 = 53u8;
pub const THOST_FTDC_FBC_CustCancelAccountInfo: u8 = 54u8;
pub const THOST_FTDC_FBC_CustMoneyResult: u8 = 55u8;
pub const THOST_FTDC_FBC_OthersExceptionResult: u8 = 56u8;
pub const THOST_FTDC_FBC_CustInterestNetMoneyDetails: u8 = 57u8;
pub const THOST_FTDC_FBC_CustMoneySendAndReceiveDetails: u8 = 97u8;
pub const THOST_FTDC_FBC_CorporationMoneyTotal: u8 = 98u8;
pub const THOST_FTDC_FBC_MainbodyMoneyTotal: u8 = 99u8;
pub const THOST_FTDC_FBC_MainPartMonitorData: u8 = 100u8;
pub const THOST_FTDC_FBC_PreparationMoney: u8 = 101u8;
pub const THOST_FTDC_FBC_BankMoneyMonitorData: u8 = 102u8;
pub const THOST_FTDC_CEC_Exchange: u8 = 49u8;
pub const THOST_FTDC_CEC_Cash: u8 = 50u8;
pub const THOST_FTDC_YNI_Yes: u8 = 48u8;
pub const THOST_FTDC_YNI_No: u8 = 49u8;
pub const THOST_FTDC_BLT_CurrentMoney: u8 = 48u8;
pub const THOST_FTDC_BLT_UsableMoney: u8 = 49u8;
pub const THOST_FTDC_BLT_FetchableMoney: u8 = 50u8;
pub const THOST_FTDC_BLT_FreezeMoney: u8 = 51u8;
pub const THOST_FTDC_GD_Unknown: u8 = 48u8;
pub const THOST_FTDC_GD_Male: u8 = 49u8;
pub const THOST_FTDC_GD_Female: u8 = 50u8;
pub const THOST_FTDC_FPF_BEN: u8 = 48u8;
pub const THOST_FTDC_FPF_OUR: u8 = 49u8;
pub const THOST_FTDC_FPF_SHA: u8 = 50u8;
pub const THOST_FTDC_PWKT_ExchangeKey: u8 = 48u8;
pub const THOST_FTDC_PWKT_PassWordKey: u8 = 49u8;
pub const THOST_FTDC_PWKT_MACKey: u8 = 50u8;
pub const THOST_FTDC_PWKT_MessageKey: u8 = 51u8;
pub const THOST_FTDC_PWT_Query: u8 = 48u8;
pub const THOST_FTDC_PWT_Fetch: u8 = 49u8;
pub const THOST_FTDC_PWT_Transfer: u8 = 50u8;
pub const THOST_FTDC_PWT_Trade: u8 = 51u8;
pub const THOST_FTDC_EM_NoEncry: u8 = 48u8;
pub const THOST_FTDC_EM_DES: u8 = 49u8;
pub const THOST_FTDC_EM_3DES: u8 = 50u8;
pub const THOST_FTDC_BRF_BankNotNeedRepeal: u8 = 48u8;
pub const THOST_FTDC_BRF_BankWaitingRepeal: u8 = 49u8;
pub const THOST_FTDC_BRF_BankBeenRepealed: u8 = 50u8;
pub const THOST_FTDC_BRORF_BrokerNotNeedRepeal: u8 = 48u8;
pub const THOST_FTDC_BRORF_BrokerWaitingRepeal: u8 = 49u8;
pub const THOST_FTDC_BRORF_BrokerBeenRepealed: u8 = 50u8;
pub const THOST_FTDC_TS_Bank: u8 = 48u8;
pub const THOST_FTDC_TS_Future: u8 = 49u8;
pub const THOST_FTDC_TS_Store: u8 = 50u8;
pub const THOST_FTDC_LF_Yes: u8 = 48u8;
pub const THOST_FTDC_LF_No: u8 = 49u8;
pub const THOST_FTDC_BAS_Normal: u8 = 48u8;
pub const THOST_FTDC_BAS_Freeze: u8 = 49u8;
pub const THOST_FTDC_BAS_ReportLoss: u8 = 50u8;
pub const THOST_FTDC_MAS_Normal: u8 = 48u8;
pub const THOST_FTDC_MAS_Cancel: u8 = 49u8;
pub const THOST_FTDC_MSS_Point: u8 = 48u8;
pub const THOST_FTDC_MSS_PrePoint: u8 = 49u8;
pub const THOST_FTDC_MSS_CancelPoint: u8 = 50u8;
pub const THOST_FTDC_SYT_FutureBankTransfer: u8 = 48u8;
pub const THOST_FTDC_SYT_StockBankTransfer: u8 = 49u8;
pub const THOST_FTDC_SYT_TheThirdPartStore: u8 = 50u8;
pub const THOST_FTDC_TEF_NormalProcessing: u8 = 48u8;
pub const THOST_FTDC_TEF_Success: u8 = 49u8;
pub const THOST_FTDC_TEF_Failed: u8 = 50u8;
pub const THOST_FTDC_TEF_Abnormal: u8 = 51u8;
pub const THOST_FTDC_TEF_ManualProcessedForException: u8 = 52u8;
pub const THOST_FTDC_TEF_CommuFailedNeedManualProcess: u8 = 53u8;
pub const THOST_FTDC_TEF_SysErrorNeedManualProcess: u8 = 54u8;
pub const THOST_FTDC_PSS_NotProcess: u8 = 48u8;
pub const THOST_FTDC_PSS_StartProcess: u8 = 49u8;
pub const THOST_FTDC_PSS_Finished: u8 = 50u8;
pub const THOST_FTDC_CUSTT_Person: u8 = 48u8;
pub const THOST_FTDC_CUSTT_Institution: u8 = 49u8;
pub const THOST_FTDC_FBTTD_FromBankToFuture: u8 = 49u8;
pub const THOST_FTDC_FBTTD_FromFutureToBank: u8 = 50u8;
pub const THOST_FTDC_OOD_Open: u8 = 49u8;
pub const THOST_FTDC_OOD_Destroy: u8 = 48u8;
pub const THOST_FTDC_AVAF_Invalid: u8 = 48u8;
pub const THOST_FTDC_AVAF_Valid: u8 = 49u8;
pub const THOST_FTDC_AVAF_Repeal: u8 = 50u8;
pub const THOST_FTDC_OT_Bank: u8 = 49u8;
pub const THOST_FTDC_OT_Future: u8 = 50u8;
pub const THOST_FTDC_OT_PlateForm: u8 = 57u8;
pub const THOST_FTDC_OL_HeadQuarters: u8 = 49u8;
pub const THOST_FTDC_OL_Branch: u8 = 50u8;
pub const THOST_FTDC_PID_FutureProtocal: u8 = 48u8;
pub const THOST_FTDC_PID_ICBCProtocal: u8 = 49u8;
pub const THOST_FTDC_PID_ABCProtocal: u8 = 50u8;
pub const THOST_FTDC_PID_CBCProtocal: u8 = 51u8;
pub const THOST_FTDC_PID_CCBProtocal: u8 = 52u8;
pub const THOST_FTDC_PID_BOCOMProtocal: u8 = 53u8;
pub const THOST_FTDC_PID_FBTPlateFormProtocal: u8 = 88u8;
pub const THOST_FTDC_CM_ShortConnect: u8 = 48u8;
pub const THOST_FTDC_CM_LongConnect: u8 = 49u8;
pub const THOST_FTDC_SRM_ASync: u8 = 48u8;
pub const THOST_FTDC_SRM_Sync: u8 = 49u8;
pub const THOST_FTDC_BAT_BankBook: u8 = 49u8;
pub const THOST_FTDC_BAT_SavingCard: u8 = 50u8;
pub const THOST_FTDC_BAT_CreditCard: u8 = 51u8;
pub const THOST_FTDC_FAT_BankBook: u8 = 49u8;
pub const THOST_FTDC_FAT_SavingCard: u8 = 50u8;
pub const THOST_FTDC_FAT_CreditCard: u8 = 51u8;
pub const THOST_FTDC_OS_Ready: u8 = 48u8;
pub const THOST_FTDC_OS_CheckIn: u8 = 49u8;
pub const THOST_FTDC_OS_CheckOut: u8 = 50u8;
pub const THOST_FTDC_OS_CheckFileArrived: u8 = 51u8;
pub const THOST_FTDC_OS_CheckDetail: u8 = 52u8;
pub const THOST_FTDC_OS_DayEndClean: u8 = 53u8;
pub const THOST_FTDC_OS_Invalid: u8 = 57u8;
pub const THOST_FTDC_CCBFM_ByAmount: u8 = 49u8;
pub const THOST_FTDC_CCBFM_ByMonth: u8 = 50u8;
pub const THOST_FTDC_CAPIT_Client: u8 = 49u8;
pub const THOST_FTDC_CAPIT_Server: u8 = 50u8;
pub const THOST_FTDC_CAPIT_UserApi: u8 = 51u8;
pub const THOST_FTDC_LS_Connected: u8 = 49u8;
pub const THOST_FTDC_LS_Disconnected: u8 = 50u8;
pub const THOST_FTDC_BPWDF_NoCheck: u8 = 48u8;
pub const THOST_FTDC_BPWDF_BlankCheck: u8 = 49u8;
pub const THOST_FTDC_BPWDF_EncryptCheck: u8 = 50u8;
pub const THOST_FTDC_SAT_AccountID: u8 = 49u8;
pub const THOST_FTDC_SAT_CardID: u8 = 50u8;
pub const THOST_FTDC_SAT_SHStockholderID: u8 = 51u8;
pub const THOST_FTDC_SAT_SZStockholderID: u8 = 52u8;
pub const THOST_FTDC_TRFS_Normal: u8 = 48u8;
pub const THOST_FTDC_TRFS_Repealed: u8 = 49u8;
pub const THOST_FTDC_SPTYPE_Broker: u8 = 48u8;
pub const THOST_FTDC_SPTYPE_Bank: u8 = 49u8;
pub const THOST_FTDC_REQRSP_Request: u8 = 48u8;
pub const THOST_FTDC_REQRSP_Response: u8 = 49u8;
pub const THOST_FTDC_FBTUET_SignIn: u8 = 48u8;
pub const THOST_FTDC_FBTUET_FromBankToFuture: u8 = 49u8;
pub const THOST_FTDC_FBTUET_FromFutureToBank: u8 = 50u8;
pub const THOST_FTDC_FBTUET_OpenAccount: u8 = 51u8;
pub const THOST_FTDC_FBTUET_CancelAccount: u8 = 52u8;
pub const THOST_FTDC_FBTUET_ChangeAccount: u8 = 53u8;
pub const THOST_FTDC_FBTUET_RepealFromBankToFuture: u8 = 54u8;
pub const THOST_FTDC_FBTUET_RepealFromFutureToBank: u8 = 55u8;
pub const THOST_FTDC_FBTUET_QueryBankAccount: u8 = 56u8;
pub const THOST_FTDC_FBTUET_QueryFutureAccount: u8 = 57u8;
pub const THOST_FTDC_FBTUET_SignOut: u8 = 65u8;
pub const THOST_FTDC_FBTUET_SyncKey: u8 = 66u8;
pub const THOST_FTDC_FBTUET_ReserveOpenAccount: u8 = 67u8;
pub const THOST_FTDC_FBTUET_CancelReserveOpenAccount: u8 = 68u8;
pub const THOST_FTDC_FBTUET_ReserveOpenAccountConfirm: u8 = 69u8;
pub const THOST_FTDC_FBTUET_Other: u8 = 90u8;
pub const THOST_FTDC_DBOP_Insert: u8 = 48u8;
pub const THOST_FTDC_DBOP_Update: u8 = 49u8;
pub const THOST_FTDC_DBOP_Delete: u8 = 50u8;
pub const THOST_FTDC_SYNF_Yes: u8 = 48u8;
pub const THOST_FTDC_SYNF_No: u8 = 49u8;
pub const THOST_FTDC_SYNT_OneOffSync: u8 = 48u8;
pub const THOST_FTDC_SYNT_TimerSync: u8 = 49u8;
pub const THOST_FTDC_SYNT_TimerFullSync: u8 = 50u8;
pub const THOST_FTDC_FBEDIR_Settlement: u8 = 48u8;
pub const THOST_FTDC_FBEDIR_Sale: u8 = 49u8;
pub const THOST_FTDC_FBERES_Success: u8 = 48u8;
pub const THOST_FTDC_FBERES_InsufficientBalance: u8 = 49u8;
pub const THOST_FTDC_FBERES_UnknownTrading: u8 = 56u8;
pub const THOST_FTDC_FBERES_Fail: u8 = 120u8;
pub const THOST_FTDC_FBEES_Normal: u8 = 48u8;
pub const THOST_FTDC_FBEES_ReExchange: u8 = 49u8;
pub const THOST_FTDC_FBEFG_DataPackage: u8 = 48u8;
pub const THOST_FTDC_FBEFG_File: u8 = 49u8;
pub const THOST_FTDC_FBEAT_NotTrade: u8 = 48u8;
pub const THOST_FTDC_FBEAT_Trade: u8 = 49u8;
pub const THOST_FTDC_FBEUET_SignIn: u8 = 48u8;
pub const THOST_FTDC_FBEUET_Exchange: u8 = 49u8;
pub const THOST_FTDC_FBEUET_ReExchange: u8 = 50u8;
pub const THOST_FTDC_FBEUET_QueryBankAccount: u8 = 51u8;
pub const THOST_FTDC_FBEUET_QueryExchDetial: u8 = 52u8;
pub const THOST_FTDC_FBEUET_QueryExchSummary: u8 = 53u8;
pub const THOST_FTDC_FBEUET_QueryExchRate: u8 = 54u8;
pub const THOST_FTDC_FBEUET_CheckBankAccount: u8 = 55u8;
pub const THOST_FTDC_FBEUET_SignOut: u8 = 56u8;
pub const THOST_FTDC_FBEUET_Other: u8 = 90u8;
pub const THOST_FTDC_FBERF_UnProcessed: u8 = 48u8;
pub const THOST_FTDC_FBERF_WaitSend: u8 = 49u8;
pub const THOST_FTDC_FBERF_SendSuccess: u8 = 50u8;
pub const THOST_FTDC_FBERF_SendFailed: u8 = 51u8;
pub const THOST_FTDC_FBERF_WaitReSend: u8 = 52u8;
pub const THOST_FTDC_NC_NOERROR: u8 = 48u8;
pub const THOST_FTDC_NC_Warn: u8 = 49u8;
pub const THOST_FTDC_NC_Call: u8 = 50u8;
pub const THOST_FTDC_NC_Force: u8 = 51u8;
pub const THOST_FTDC_NC_CHUANCANG: u8 = 52u8;
pub const THOST_FTDC_NC_Exception: u8 = 53u8;
pub const THOST_FTDC_FCT_Manual: u8 = 48u8;
pub const THOST_FTDC_FCT_Single: u8 = 49u8;
pub const THOST_FTDC_FCT_Group: u8 = 50u8;
pub const THOST_FTDC_RNM_System: u8 = 48u8;
pub const THOST_FTDC_RNM_SMS: u8 = 49u8;
pub const THOST_FTDC_RNM_EMail: u8 = 50u8;
pub const THOST_FTDC_RNM_Manual: u8 = 51u8;
pub const THOST_FTDC_RNS_NotGen: u8 = 48u8;
pub const THOST_FTDC_RNS_Generated: u8 = 49u8;
pub const THOST_FTDC_RNS_SendError: u8 = 50u8;
pub const THOST_FTDC_RNS_SendOk: u8 = 51u8;
pub const THOST_FTDC_RNS_Received: u8 = 52u8;
pub const THOST_FTDC_RNS_Confirmed: u8 = 53u8;
pub const THOST_FTDC_RUE_ExportData: u8 = 48u8;
pub const THOST_FTDC_COST_LastPriceAsc: u8 = 48u8;
pub const THOST_FTDC_COST_LastPriceDesc: u8 = 49u8;
pub const THOST_FTDC_COST_AskPriceAsc: u8 = 50u8;
pub const THOST_FTDC_COST_AskPriceDesc: u8 = 51u8;
pub const THOST_FTDC_COST_BidPriceAsc: u8 = 52u8;
pub const THOST_FTDC_COST_BidPriceDesc: u8 = 53u8;
pub const THOST_FTDC_UOAST_NoSend: u8 = 48u8;
pub const THOST_FTDC_UOAST_Sended: u8 = 49u8;
pub const THOST_FTDC_UOAST_Generated: u8 = 50u8;
pub const THOST_FTDC_UOAST_SendFail: u8 = 51u8;
pub const THOST_FTDC_UOAST_Success: u8 = 52u8;
pub const THOST_FTDC_UOAST_Fail: u8 = 53u8;
pub const THOST_FTDC_UOAST_Cancel: u8 = 54u8;
pub const THOST_FTDC_UOACS_NoApply: u8 = 49u8;
pub const THOST_FTDC_UOACS_Submited: u8 = 50u8;
pub const THOST_FTDC_UOACS_Sended: u8 = 51u8;
pub const THOST_FTDC_UOACS_Success: u8 = 52u8;
pub const THOST_FTDC_UOACS_Refuse: u8 = 53u8;
pub const THOST_FTDC_UOACS_Cancel: u8 = 54u8;
pub const THOST_FTDC_QT_Radio: u8 = 49u8;
pub const THOST_FTDC_QT_Option: u8 = 50u8;
pub const THOST_FTDC_QT_Blank: u8 = 51u8;
pub const THOST_FTDC_BT_Request: u8 = 49u8;
pub const THOST_FTDC_BT_Response: u8 = 50u8;
pub const THOST_FTDC_BT_Notice: u8 = 51u8;
pub const THOST_FTDC_CRC_Success: u8 = 48u8;
pub const THOST_FTDC_CRC_Working: u8 = 49u8;
pub const THOST_FTDC_CRC_InfoFail: u8 = 50u8;
pub const THOST_FTDC_CRC_IDCardFail: u8 = 51u8;
pub const THOST_FTDC_CRC_OtherFail: u8 = 52u8;
pub const THOST_FTDC_CfMMCCT_All: u8 = 48u8;
pub const THOST_FTDC_CfMMCCT_Person: u8 = 49u8;
pub const THOST_FTDC_CfMMCCT_Company: u8 = 50u8;
pub const THOST_FTDC_CfMMCCT_Other: u8 = 51u8;
pub const THOST_FTDC_CfMMCCT_SpecialOrgan: u8 = 52u8;
pub const THOST_FTDC_CfMMCCT_Asset: u8 = 53u8;
pub const THOST_FTDC_EIDT_SHFE: u8 = 83u8;
pub const THOST_FTDC_EIDT_CZCE: u8 = 90u8;
pub const THOST_FTDC_EIDT_DCE: u8 = 68u8;
pub const THOST_FTDC_EIDT_CFFEX: u8 = 74u8;
pub const THOST_FTDC_EIDT_INE: u8 = 78u8;
pub const THOST_FTDC_ECIDT_Hedge: u8 = 49u8;
pub const THOST_FTDC_ECIDT_Arbitrage: u8 = 50u8;
pub const THOST_FTDC_ECIDT_Speculation: u8 = 51u8;
pub const THOST_FTDC_UF_NoUpdate: u8 = 48u8;
pub const THOST_FTDC_UF_Success: u8 = 49u8;
pub const THOST_FTDC_UF_Fail: u8 = 50u8;
pub const THOST_FTDC_UF_TCSuccess: u8 = 51u8;
pub const THOST_FTDC_UF_TCFail: u8 = 52u8;
pub const THOST_FTDC_UF_Cancel: u8 = 53u8;
pub const THOST_FTDC_AOID_OpenInvestor: u8 = 49u8;
pub const THOST_FTDC_AOID_ModifyIDCard: u8 = 50u8;
pub const THOST_FTDC_AOID_ModifyNoIDCard: u8 = 51u8;
pub const THOST_FTDC_AOID_ApplyTradingCode: u8 = 52u8;
pub const THOST_FTDC_AOID_CancelTradingCode: u8 = 53u8;
pub const THOST_FTDC_AOID_CancelInvestor: u8 = 54u8;
pub const THOST_FTDC_AOID_FreezeAccount: u8 = 56u8;
pub const THOST_FTDC_AOID_ActiveFreezeAccount: u8 = 57u8;
pub const THOST_FTDC_ASID_NoComplete: u8 = 49u8;
pub const THOST_FTDC_ASID_Submited: u8 = 50u8;
pub const THOST_FTDC_ASID_Checked: u8 = 51u8;
pub const THOST_FTDC_ASID_Refused: u8 = 52u8;
pub const THOST_FTDC_ASID_Deleted: u8 = 53u8;
pub const THOST_FTDC_UOASM_ByAPI: u8 = 49u8;
pub const THOST_FTDC_UOASM_ByFile: u8 = 50u8;
pub const THOST_FTDC_EvM_ADD: u8 = 49u8;
pub const THOST_FTDC_EvM_UPDATE: u8 = 50u8;
pub const THOST_FTDC_EvM_DELETE: u8 = 51u8;
pub const THOST_FTDC_EvM_CHECK: u8 = 52u8;
pub const THOST_FTDC_EvM_COPY: u8 = 53u8;
pub const THOST_FTDC_EvM_CANCEL: u8 = 54u8;
pub const THOST_FTDC_EvM_Reverse: u8 = 55u8;
pub const THOST_FTDC_UOAA_ASR: u8 = 49u8;
pub const THOST_FTDC_UOAA_ASNR: u8 = 50u8;
pub const THOST_FTDC_UOAA_NSAR: u8 = 51u8;
pub const THOST_FTDC_UOAA_NSR: u8 = 52u8;
pub const THOST_FTDC_EvM_InvestorGroupFlow: u8 = 49u8;
pub const THOST_FTDC_EvM_InvestorRate: u8 = 50u8;
pub const THOST_FTDC_EvM_InvestorCommRateModel: u8 = 51u8;
pub const THOST_FTDC_CL_Zero: u8 = 48u8;
pub const THOST_FTDC_CL_One: u8 = 49u8;
pub const THOST_FTDC_CL_Two: u8 = 50u8;
pub const THOST_FTDC_CHS_Init: u8 = 48u8;
pub const THOST_FTDC_CHS_Checking: u8 = 49u8;
pub const THOST_FTDC_CHS_Checked: u8 = 50u8;
pub const THOST_FTDC_CHS_Refuse: u8 = 51u8;
pub const THOST_FTDC_CHS_Cancel: u8 = 52u8;
pub const THOST_FTDC_CHU_Unused: u8 = 48u8;
pub const THOST_FTDC_CHU_Used: u8 = 49u8;
pub const THOST_FTDC_CHU_Fail: u8 = 50u8;
pub const THOST_FTDC_BAO_ByAccProperty: u8 = 48u8;
pub const THOST_FTDC_BAO_ByFBTransfer: u8 = 49u8;
pub const THOST_FTDC_MBTS_ByInstrument: u8 = 48u8;
pub const THOST_FTDC_MBTS_ByDayInsPrc: u8 = 49u8;
pub const THOST_FTDC_MBTS_ByDayIns: u8 = 50u8;
pub const THOST_FTDC_OTP_NONE: u8 = 48u8;
pub const THOST_FTDC_OTP_TOTP: u8 = 49u8;
pub const THOST_FTDC_OTPS_Unused: u8 = 48u8;
pub const THOST_FTDC_OTPS_Used: u8 = 49u8;
pub const THOST_FTDC_OTPS_Disuse: u8 = 50u8;
pub const THOST_FTDC_BUT_Investor: u8 = 49u8;
pub const THOST_FTDC_BUT_BrokerUser: u8 = 50u8;
pub const THOST_FTDC_FUTT_Commodity: u8 = 49u8;
pub const THOST_FTDC_FUTT_Financial: u8 = 50u8;
pub const THOST_FTDC_FET_Restriction: u8 = 48u8;
pub const THOST_FTDC_FET_TodayRestriction: u8 = 49u8;
pub const THOST_FTDC_FET_Transfer: u8 = 50u8;
pub const THOST_FTDC_FET_Credit: u8 = 51u8;
pub const THOST_FTDC_FET_InvestorWithdrawAlm: u8 = 52u8;
pub const THOST_FTDC_FET_BankRestriction: u8 = 53u8;
pub const THOST_FTDC_FET_Accountregister: u8 = 54u8;
pub const THOST_FTDC_FET_ExchangeFundIO: u8 = 55u8;
pub const THOST_FTDC_FET_InvestorFundIO: u8 = 56u8;
pub const THOST_FTDC_AST_FBTransfer: u8 = 48u8;
pub const THOST_FTDC_AST_ManualEntry: u8 = 49u8;
pub const THOST_FTDC_CST_UnifyAccount: u8 = 48u8;
pub const THOST_FTDC_CST_ManualEntry: u8 = 49u8;
pub const THOST_FTDC_UR_All: u8 = 48u8;
pub const THOST_FTDC_UR_Single: u8 = 49u8;
pub const THOST_FTDC_BG_Investor: u8 = 50u8;
pub const THOST_FTDC_BG_Group: u8 = 49u8;
pub const THOST_FTDC_TSSM_Instrument: u8 = 49u8;
pub const THOST_FTDC_TSSM_Product: u8 = 50u8;
pub const THOST_FTDC_TSSM_Exchange: u8 = 51u8;
pub const THOST_FTDC_ESM_Relative: u8 = 49u8;
pub const THOST_FTDC_ESM_Typical: u8 = 50u8;
pub const THOST_FTDC_RIR_All: u8 = 49u8;
pub const THOST_FTDC_RIR_Model: u8 = 50u8;
pub const THOST_FTDC_RIR_Single: u8 = 51u8;
pub const THOST_FTDC_SDS_Initialize: u8 = 48u8;
pub const THOST_FTDC_SDS_Settlementing: u8 = 49u8;
pub const THOST_FTDC_SDS_Settlemented: u8 = 50u8;
pub const THOST_FTDC_TSRC_NORMAL: u8 = 48u8;
pub const THOST_FTDC_TSRC_QUERY: u8 = 49u8;
pub const THOST_FTDC_FSM_Product: u8 = 49u8;
pub const THOST_FTDC_FSM_Exchange: u8 = 50u8;
pub const THOST_FTDC_FSM_All: u8 = 51u8;
pub const THOST_FTDC_BIR_Property: u8 = 49u8;
pub const THOST_FTDC_BIR_All: u8 = 50u8;
pub const THOST_FTDC_PIR_All: u8 = 49u8;
pub const THOST_FTDC_PIR_Property: u8 = 50u8;
pub const THOST_FTDC_PIR_Single: u8 = 51u8;
pub const THOST_FTDC_FIS_NoCreate: u8 = 48u8;
pub const THOST_FTDC_FIS_Created: u8 = 49u8;
pub const THOST_FTDC_FIS_Failed: u8 = 50u8;
pub const THOST_FTDC_FGS_FileTransmit: u8 = 48u8;
pub const THOST_FTDC_FGS_FileGen: u8 = 49u8;
pub const THOST_FTDC_SoM_Add: u8 = 49u8;
pub const THOST_FTDC_SoM_Update: u8 = 50u8;
pub const THOST_FTDC_SoM_Delete: u8 = 51u8;
pub const THOST_FTDC_SoM_Copy: u8 = 52u8;
pub const THOST_FTDC_SoM_AcTive: u8 = 53u8;
pub const THOST_FTDC_SoM_CanCel: u8 = 54u8;
pub const THOST_FTDC_SoM_ReSet: u8 = 55u8;
pub const THOST_FTDC_SoT_UpdatePassword: u8 = 48u8;
pub const THOST_FTDC_SoT_UserDepartment: u8 = 49u8;
pub const THOST_FTDC_SoT_RoleManager: u8 = 50u8;
pub const THOST_FTDC_SoT_RoleFunction: u8 = 51u8;
pub const THOST_FTDC_SoT_BaseParam: u8 = 52u8;
pub const THOST_FTDC_SoT_SetUserID: u8 = 53u8;
pub const THOST_FTDC_SoT_SetUserRole: u8 = 54u8;
pub const THOST_FTDC_SoT_UserIpRestriction: u8 = 55u8;
pub const THOST_FTDC_SoT_DepartmentManager: u8 = 56u8;
pub const THOST_FTDC_SoT_DepartmentCopy: u8 = 57u8;
pub const THOST_FTDC_SoT_Tradingcode: u8 = 65u8;
pub const THOST_FTDC_SoT_InvestorStatus: u8 = 66u8;
pub const THOST_FTDC_SoT_InvestorAuthority: u8 = 67u8;
pub const THOST_FTDC_SoT_PropertySet: u8 = 68u8;
pub const THOST_FTDC_SoT_ReSetInvestorPasswd: u8 = 69u8;
pub const THOST_FTDC_SoT_InvestorPersonalityInfo: u8 = 70u8;
pub const THOST_FTDC_CSRCQ_Current: u8 = 48u8;
pub const THOST_FTDC_CSRCQ_History: u8 = 49u8;
pub const THOST_FTDC_FRS_Normal: u8 = 49u8;
pub const THOST_FTDC_FRS_Freeze: u8 = 48u8;
pub const THOST_FTDC_STST_Standard: u8 = 48u8;
pub const THOST_FTDC_STST_NonStandard: u8 = 49u8;
pub const THOST_FTDC_RPT_Freeze: u8 = 49u8;
pub const THOST_FTDC_RPT_FreezeActive: u8 = 50u8;
pub const THOST_FTDC_RPT_OpenLimit: u8 = 51u8;
pub const THOST_FTDC_RPT_RelieveOpenLimit: u8 = 52u8;
pub const THOST_FTDC_AMLDS_Normal: u8 = 48u8;
pub const THOST_FTDC_AMLDS_Deleted: u8 = 49u8;
pub const THOST_FTDC_AMLCHS_Init: u8 = 48u8;
pub const THOST_FTDC_AMLCHS_Checking: u8 = 49u8;
pub const THOST_FTDC_AMLCHS_Checked: u8 = 50u8;
pub const THOST_FTDC_AMLCHS_RefuseReport: u8 = 51u8;
pub const THOST_FTDC_AMLDT_DrawDay: u8 = 48u8;
pub const THOST_FTDC_AMLDT_TouchDay: u8 = 49u8;
pub const THOST_FTDC_AMLCL_CheckLevel0: u8 = 48u8;
pub const THOST_FTDC_AMLCL_CheckLevel1: u8 = 49u8;
pub const THOST_FTDC_AMLCL_CheckLevel2: u8 = 50u8;
pub const THOST_FTDC_AMLCL_CheckLevel3: u8 = 51u8;
pub const THOST_FTDC_EFT_CSV: u8 = 48u8;
pub const THOST_FTDC_EFT_EXCEL: u8 = 49u8;
pub const THOST_FTDC_EFT_DBF: u8 = 50u8;
pub const THOST_FTDC_SMT_Before: u8 = 49u8;
pub const THOST_FTDC_SMT_Settlement: u8 = 50u8;
pub const THOST_FTDC_SMT_After: u8 = 51u8;
pub const THOST_FTDC_SMT_Settlemented: u8 = 52u8;
pub const THOST_FTDC_SML_Must: u8 = 49u8;
pub const THOST_FTDC_SML_Alarm: u8 = 50u8;
pub const THOST_FTDC_SML_Prompt: u8 = 51u8;
pub const THOST_FTDC_SML_Ignore: u8 = 52u8;
pub const THOST_FTDC_SMG_Exhcange: u8 = 49u8;
pub const THOST_FTDC_SMG_ASP: u8 = 50u8;
pub const THOST_FTDC_SMG_CSRC: u8 = 51u8;
pub const THOST_FTDC_LUT_Repeatable: u8 = 49u8;
pub const THOST_FTDC_LUT_Unrepeatable: u8 = 50u8;
pub const THOST_FTDC_DAR_Settle: u8 = 49u8;
pub const THOST_FTDC_DAR_Exchange: u8 = 50u8;
pub const THOST_FTDC_DAR_CSRC: u8 = 51u8;
pub const THOST_FTDC_MGT_ExchMarginRate: u8 = 48u8;
pub const THOST_FTDC_MGT_InstrMarginRate: u8 = 49u8;
pub const THOST_FTDC_MGT_InstrMarginRateTrade: u8 = 50u8;
pub const THOST_FTDC_ACT_Intraday: u8 = 49u8;
pub const THOST_FTDC_ACT_Long: u8 = 50u8;
pub const THOST_FTDC_MRT_Exchange: u8 = 49u8;
pub const THOST_FTDC_MRT_Investor: u8 = 50u8;
pub const THOST_FTDC_MRT_InvestorTrade: u8 = 51u8;
pub const THOST_FTDC_BUS_UnBak: u8 = 48u8;
pub const THOST_FTDC_BUS_BakUp: u8 = 49u8;
pub const THOST_FTDC_BUS_BakUped: u8 = 50u8;
pub const THOST_FTDC_BUS_BakFail: u8 = 51u8;
pub const THOST_FTDC_SIS_UnInitialize: u8 = 48u8;
pub const THOST_FTDC_SIS_Initialize: u8 = 49u8;
pub const THOST_FTDC_SIS_Initialized: u8 = 50u8;
pub const THOST_FTDC_SRS_NoCreate: u8 = 48u8;
pub const THOST_FTDC_SRS_Create: u8 = 49u8;
pub const THOST_FTDC_SRS_Created: u8 = 50u8;
pub const THOST_FTDC_SRS_CreateFail: u8 = 51u8;
pub const THOST_FTDC_SSS_UnSaveData: u8 = 48u8;
pub const THOST_FTDC_SSS_SaveDatad: u8 = 49u8;
pub const THOST_FTDC_SAS_UnArchived: u8 = 48u8;
pub const THOST_FTDC_SAS_Archiving: u8 = 49u8;
pub const THOST_FTDC_SAS_Archived: u8 = 50u8;
pub const THOST_FTDC_SAS_ArchiveFail: u8 = 51u8;
pub const THOST_FTDC_CTPT_Unkown: u8 = 48u8;
pub const THOST_FTDC_CTPT_MainCenter: u8 = 49u8;
pub const THOST_FTDC_CTPT_BackUp: u8 = 50u8;
pub const THOST_FTDC_CDT_Normal: u8 = 48u8;
pub const THOST_FTDC_CDT_SpecFirst: u8 = 49u8;
pub const THOST_FTDC_MFUR_None: u8 = 48u8;
pub const THOST_FTDC_MFUR_Margin: u8 = 49u8;
pub const THOST_FTDC_MFUR_All: u8 = 50u8;
pub const THOST_FTDC_MFUR_CNY3: u8 = 51u8;
pub const THOST_FTDC_SPT_CzceHedge: u8 = 49u8;
pub const THOST_FTDC_SPT_IneForeignCurrency: u8 = 50u8;
pub const THOST_FTDC_SPT_DceOpenClose: u8 = 51u8;
pub const THOST_FTDC_FMT_Mortgage: u8 = 49u8;
pub const THOST_FTDC_FMT_Redemption: u8 = 50u8;
pub const THOST_FTDC_ASPI_BaseMargin: u8 = 49u8;
pub const THOST_FTDC_ASPI_LowestInterest: u8 = 50u8;
pub const THOST_FTDC_FMD_In: u8 = 49u8;
pub const THOST_FTDC_FMD_Out: u8 = 50u8;
pub const THOST_FTDC_BT_Profit: u8 = 48u8;
pub const THOST_FTDC_BT_Loss: u8 = 49u8;
pub const THOST_FTDC_BT_Other: u8 = 90u8;
pub const THOST_FTDC_SST_Manual: u8 = 48u8;
pub const THOST_FTDC_SST_Automatic: u8 = 49u8;
pub const THOST_FTDC_CED_Settlement: u8 = 48u8;
pub const THOST_FTDC_CED_Sale: u8 = 49u8;
pub const THOST_FTDC_CSS_Entry: u8 = 49u8;
pub const THOST_FTDC_CSS_Approve: u8 = 50u8;
pub const THOST_FTDC_CSS_Refuse: u8 = 51u8;
pub const THOST_FTDC_CSS_Revoke: u8 = 52u8;
pub const THOST_FTDC_CSS_Send: u8 = 53u8;
pub const THOST_FTDC_CSS_Success: u8 = 54u8;
pub const THOST_FTDC_CSS_Failure: u8 = 55u8;
pub const THOST_FTDC_REQF_NoSend: u8 = 48u8;
pub const THOST_FTDC_REQF_SendSuccess: u8 = 49u8;
pub const THOST_FTDC_REQF_SendFailed: u8 = 50u8;
pub const THOST_FTDC_REQF_WaitReSend: u8 = 51u8;
pub const THOST_FTDC_RESF_Success: u8 = 48u8;
pub const THOST_FTDC_RESF_InsuffiCient: u8 = 49u8;
pub const THOST_FTDC_RESF_UnKnown: u8 = 56u8;
pub const THOST_FTDC_EXS_Before: u8 = 48u8;
pub const THOST_FTDC_EXS_After: u8 = 49u8;
pub const THOST_FTDC_CR_Domestic: u8 = 49u8;
pub const THOST_FTDC_CR_GMT: u8 = 50u8;
pub const THOST_FTDC_CR_Foreign: u8 = 51u8;
pub const THOST_FTDC_HB_No: u8 = 48u8;
pub const THOST_FTDC_HB_Yes: u8 = 49u8;
pub const THOST_FTDC_SM_Normal: u8 = 49u8;
pub const THOST_FTDC_SM_Emerge: u8 = 50u8;
pub const THOST_FTDC_SM_Restore: u8 = 51u8;
pub const THOST_FTDC_TPT_Full: u8 = 49u8;
pub const THOST_FTDC_TPT_Increment: u8 = 50u8;
pub const THOST_FTDC_TPT_BackUp: u8 = 51u8;
pub const THOST_FTDC_LM_Trade: u8 = 48u8;
pub const THOST_FTDC_LM_Transfer: u8 = 49u8;
pub const THOST_FTDC_CPT_Instrument: u8 = 49u8;
pub const THOST_FTDC_CPT_Margin: u8 = 50u8;
pub const THOST_FTDC_HT_Yes: u8 = 49u8;
pub const THOST_FTDC_HT_No: u8 = 48u8;
pub const THOST_FTDC_AMT_Bank: u8 = 49u8;
pub const THOST_FTDC_AMT_Securities: u8 = 50u8;
pub const THOST_FTDC_AMT_Fund: u8 = 51u8;
pub const THOST_FTDC_AMT_Insurance: u8 = 52u8;
pub const THOST_FTDC_AMT_Trust: u8 = 53u8;
pub const THOST_FTDC_AMT_Other: u8 = 57u8;
pub const THOST_FTDC_CFIOT_FundIO: u8 = 48u8;
pub const THOST_FTDC_CFIOT_SwapCurrency: u8 = 49u8;
pub const THOST_FTDC_CAT_Futures: u8 = 49u8;
pub const THOST_FTDC_CAT_AssetmgrFuture: u8 = 50u8;
pub const THOST_FTDC_CAT_AssetmgrTrustee: u8 = 51u8;
pub const THOST_FTDC_CAT_AssetmgrTransfer: u8 = 52u8;
pub const THOST_FTDC_LT_Chinese: u8 = 49u8;
pub const THOST_FTDC_LT_English: u8 = 50u8;
pub const THOST_FTDC_AMCT_Person: u8 = 49u8;
pub const THOST_FTDC_AMCT_Organ: u8 = 50u8;
pub const THOST_FTDC_AMCT_SpecialOrgan: u8 = 52u8;
pub const THOST_FTDC_ASST_Futures: u8 = 51u8;
pub const THOST_FTDC_ASST_SpecialOrgan: u8 = 52u8;
pub const THOST_FTDC_CIT_HasExch: u8 = 48u8;
pub const THOST_FTDC_CIT_HasATP: u8 = 49u8;
pub const THOST_FTDC_CIT_HasDiff: u8 = 50u8;
pub const THOST_FTDC_DT_HandDeliv: u8 = 49u8;
pub const THOST_FTDC_DT_PersonDeliv: u8 = 50u8;
pub const THOST_FTDC_MMSA_NO: u8 = 48u8;
pub const THOST_FTDC_MMSA_YES: u8 = 49u8;
pub const THOST_FTDC_CACT_Person: u8 = 48u8;
pub const THOST_FTDC_CACT_Company: u8 = 49u8;
pub const THOST_FTDC_CACT_Other: u8 = 50u8;
pub const THOST_FTDC_UOAAT_Futures: u8 = 49u8;
pub const THOST_FTDC_UOAAT_SpecialOrgan: u8 = 50u8;
pub const THOST_FTDC_DEN_Buy: u8 = 48u8;
pub const THOST_FTDC_DEN_Sell: u8 = 49u8;
pub const THOST_FTDC_OFEN_Open: u8 = 48u8;
pub const THOST_FTDC_OFEN_Close: u8 = 49u8;
pub const THOST_FTDC_OFEN_ForceClose: u8 = 50u8;
pub const THOST_FTDC_OFEN_CloseToday: u8 = 51u8;
pub const THOST_FTDC_OFEN_CloseYesterday: u8 = 52u8;
pub const THOST_FTDC_OFEN_ForceOff: u8 = 53u8;
pub const THOST_FTDC_OFEN_LocalForceClose: u8 = 54u8;
pub const THOST_FTDC_HFEN_Speculation: u8 = 49u8;
pub const THOST_FTDC_HFEN_Arbitrage: u8 = 50u8;
pub const THOST_FTDC_HFEN_Hedge: u8 = 51u8;
pub const THOST_FTDC_FIOTEN_FundIO: u8 = 49u8;
pub const THOST_FTDC_FIOTEN_Transfer: u8 = 50u8;
pub const THOST_FTDC_FIOTEN_SwapCurrency: u8 = 51u8;
pub const THOST_FTDC_FTEN_Deposite: u8 = 49u8;
pub const THOST_FTDC_FTEN_ItemFund: u8 = 50u8;
pub const THOST_FTDC_FTEN_Company: u8 = 51u8;
pub const THOST_FTDC_FTEN_InnerTransfer: u8 = 52u8;
pub const THOST_FTDC_FDEN_In: u8 = 49u8;
pub const THOST_FTDC_FDEN_Out: u8 = 50u8;
pub const THOST_FTDC_FMDEN_In: u8 = 49u8;
pub const THOST_FTDC_FMDEN_Out: u8 = 50u8;
pub const THOST_FTDC_CP_CallOptions: u8 = 49u8;
pub const THOST_FTDC_CP_PutOptions: u8 = 50u8;
pub const THOST_FTDC_STM_Continental: u8 = 48u8;
pub const THOST_FTDC_STM_American: u8 = 49u8;
pub const THOST_FTDC_STM_Bermuda: u8 = 50u8;
pub const THOST_FTDC_STT_Hedge: u8 = 48u8;
pub const THOST_FTDC_STT_Match: u8 = 49u8;
pub const THOST_FTDC_APPT_NotStrikeNum: u8 = 52u8;
pub const THOST_FTDC_GUDS_Gen: u8 = 48u8;
pub const THOST_FTDC_GUDS_Hand: u8 = 49u8;
pub const THOST_FTDC_OER_NoExec: u8 = 110u8;
pub const THOST_FTDC_OER_Canceled: u8 = 99u8;
pub const THOST_FTDC_OER_OK: u8 = 48u8;
pub const THOST_FTDC_OER_NoPosition: u8 = 49u8;
pub const THOST_FTDC_OER_NoDeposit: u8 = 50u8;
pub const THOST_FTDC_OER_NoParticipant: u8 = 51u8;
pub const THOST_FTDC_OER_NoClient: u8 = 52u8;
pub const THOST_FTDC_OER_NoInstrument: u8 = 54u8;
pub const THOST_FTDC_OER_NoRight: u8 = 55u8;
pub const THOST_FTDC_OER_InvalidVolume: u8 = 56u8;
pub const THOST_FTDC_OER_NoEnoughHistoryTrade: u8 = 57u8;
pub const THOST_FTDC_OER_Unknown: u8 = 97u8;
pub const THOST_FTDC_COMBT_Future: u8 = 48u8;
pub const THOST_FTDC_COMBT_BUL: u8 = 49u8;
pub const THOST_FTDC_COMBT_BER: u8 = 50u8;
pub const THOST_FTDC_COMBT_STD: u8 = 51u8;
pub const THOST_FTDC_COMBT_STG: u8 = 52u8;
pub const THOST_FTDC_COMBT_PRT: u8 = 53u8;
pub const THOST_FTDC_COMBT_CAS: u8 = 54u8;
pub const THOST_FTDC_COMBT_OPL: u8 = 55u8;
pub const THOST_FTDC_COMBT_BFO: u8 = 56u8;
pub const THOST_FTDC_COMBT_BLS: u8 = 57u8;
pub const THOST_FTDC_COMBT_BES: u8 = 97u8;
pub const THOST_FTDC_DCECOMBT_SPL: u8 = 48u8;
pub const THOST_FTDC_DCECOMBT_OPL: u8 = 49u8;
pub const THOST_FTDC_DCECOMBT_SP: u8 = 50u8;
pub const THOST_FTDC_DCECOMBT_SPC: u8 = 51u8;
pub const THOST_FTDC_DCECOMBT_BLS: u8 = 52u8;
pub const THOST_FTDC_DCECOMBT_BES: u8 = 53u8;
pub const THOST_FTDC_DCECOMBT_CAS: u8 = 54u8;
pub const THOST_FTDC_DCECOMBT_STD: u8 = 55u8;
pub const THOST_FTDC_DCECOMBT_STG: u8 = 56u8;
pub const THOST_FTDC_DCECOMBT_BFO: u8 = 57u8;
pub const THOST_FTDC_DCECOMBT_SFO: u8 = 97u8;
pub const THOST_FTDC_ORPT_PreSettlementPrice: u8 = 49u8;
pub const THOST_FTDC_ORPT_OpenPrice: u8 = 52u8;
pub const THOST_FTDC_ORPT_MaxPreSettlementPrice: u8 = 53u8;
pub const THOST_FTDC_BLAG_Default: u8 = 49u8;
pub const THOST_FTDC_BLAG_IncludeOptValLost: u8 = 50u8;
pub const THOST_FTDC_ACTP_Exec: u8 = 49u8;
pub const THOST_FTDC_ACTP_Abandon: u8 = 50u8;
pub const THOST_FTDC_FQST_Submitted: u8 = 97u8;
pub const THOST_FTDC_FQST_Accepted: u8 = 98u8;
pub const THOST_FTDC_FQST_Rejected: u8 = 99u8;
pub const THOST_FTDC_VM_Absolute: u8 = 48u8;
pub const THOST_FTDC_VM_Ratio: u8 = 49u8;
pub const THOST_FTDC_EOPF_Reserve: u8 = 48u8;
pub const THOST_FTDC_EOPF_UnReserve: u8 = 49u8;
pub const THOST_FTDC_EOCF_AutoClose: u8 = 48u8;
pub const THOST_FTDC_EOCF_NotToClose: u8 = 49u8;
pub const THOST_FTDC_PTE_Futures: u8 = 49u8;
pub const THOST_FTDC_PTE_Options: u8 = 50u8;
pub const THOST_FTDC_CUFN_CUFN_O: u8 = 79u8;
pub const THOST_FTDC_CUFN_CUFN_T: u8 = 84u8;
pub const THOST_FTDC_CUFN_CUFN_P: u8 = 80u8;
pub const THOST_FTDC_CUFN_CUFN_N: u8 = 78u8;
pub const THOST_FTDC_CUFN_CUFN_L: u8 = 76u8;
pub const THOST_FTDC_CUFN_CUFN_F: u8 = 70u8;
pub const THOST_FTDC_CUFN_CUFN_C: u8 = 67u8;
pub const THOST_FTDC_CUFN_CUFN_M: u8 = 77u8;
pub const THOST_FTDC_DUFN_DUFN_O: u8 = 79u8;
pub const THOST_FTDC_DUFN_DUFN_T: u8 = 84u8;
pub const THOST_FTDC_DUFN_DUFN_P: u8 = 80u8;
pub const THOST_FTDC_DUFN_DUFN_F: u8 = 70u8;
pub const THOST_FTDC_DUFN_DUFN_C: u8 = 67u8;
pub const THOST_FTDC_DUFN_DUFN_D: u8 = 68u8;
pub const THOST_FTDC_DUFN_DUFN_M: u8 = 77u8;
pub const THOST_FTDC_DUFN_DUFN_S: u8 = 83u8;
pub const THOST_FTDC_SUFN_SUFN_O: u8 = 79u8;
pub const THOST_FTDC_SUFN_SUFN_T: u8 = 84u8;
pub const THOST_FTDC_SUFN_SUFN_P: u8 = 80u8;
pub const THOST_FTDC_SUFN_SUFN_F: u8 = 70u8;
pub const THOST_FTDC_CFUFN_SUFN_T: u8 = 84u8;
pub const THOST_FTDC_CFUFN_SUFN_P: u8 = 80u8;
pub const THOST_FTDC_CFUFN_SUFN_F: u8 = 70u8;
pub const THOST_FTDC_CFUFN_SUFN_S: u8 = 83u8;
pub const THOST_FTDC_CMDR_Comb: u8 = 48u8;
pub const THOST_FTDC_CMDR_UnComb: u8 = 49u8;
pub const THOST_FTDC_CMDR_DelComb: u8 = 50u8;
pub const THOST_FTDC_STOV_RealValue: u8 = 49u8;
pub const THOST_FTDC_STOV_ProfitValue: u8 = 50u8;
pub const THOST_FTDC_STOV_RealRatio: u8 = 51u8;
pub const THOST_FTDC_STOV_ProfitRatio: u8 = 52u8;
pub const THOST_FTDC_ROAST_Processing: u8 = 48u8;
pub const THOST_FTDC_ROAST_Cancelled: u8 = 49u8;
pub const THOST_FTDC_ROAST_Opened: u8 = 50u8;
pub const THOST_FTDC_ROAST_Invalid: u8 = 51u8;
pub const THOST_FTDC_WPSR_Lib: u8 = 49u8;
pub const THOST_FTDC_WPSR_Manual: u8 = 50u8;
pub const THOST_FTDC_OSCF_CloseSelfOptionPosition: u8 = 49u8;
pub const THOST_FTDC_OSCF_ReserveOptionPosition: u8 = 50u8;
pub const THOST_FTDC_OSCF_SellCloseSelfFuturePosition: u8 = 51u8;
pub const THOST_FTDC_OSCF_ReserveFuturePosition: u8 = 52u8;
pub const THOST_FTDC_BZTP_Future: u8 = 49u8;
pub const THOST_FTDC_BZTP_Stock: u8 = 50u8;
pub const THOST_FTDC_APP_TYPE_Investor: u8 = 49u8;
pub const THOST_FTDC_APP_TYPE_InvestorRelay: u8 = 50u8;
pub const THOST_FTDC_APP_TYPE_OperatorRelay: u8 = 51u8;
pub const THOST_FTDC_APP_TYPE_UnKnown: u8 = 52u8;
pub const THOST_FTDC_RV_Right: u8 = 48u8;
pub const THOST_FTDC_RV_Refuse: u8 = 49u8;
pub const THOST_FTDC_OTC_TRDT_Block: u8 = 48u8;
pub const THOST_FTDC_OTC_TRDT_EFP: u8 = 49u8;
pub const THOST_FTDC_OTC_MT_DV01: u8 = 49u8;
pub const THOST_FTDC_OTC_MT_ParValue: u8 = 50u8;
pub const THOST_FTDC_AU_WHITE: u8 = 48u8;
pub const THOST_FTDC_AU_BLACK: u8 = 49u8;
pub const THOST_FTDC_INS_ALL: u8 = 48u8;
pub const THOST_FTDC_INS_FUTURE: u8 = 49u8;
pub const THOST_FTDC_INS_OPTION: u8 = 50u8;
pub const THOST_FTDC_INS_COMB: u8 = 51u8;
pub const THOST_FTDC_TD_ALL: u8 = 48u8;
pub const THOST_FTDC_TD_TRADE: u8 = 49u8;
pub const THOST_FTDC_TD_UNTRADE: u8 = 50u8;
pub const THOST_FTDC_PS_tradeable: u8 = 49u8;
pub const THOST_FTDC_PS_untradeable: u8 = 50u8;
pub const THOST_FTDC_SDS_Readable: u8 = 49u8;
pub const THOST_FTDC_SDS_Reading: u8 = 50u8;
pub const THOST_FTDC_SDS_Readend: u8 = 51u8;
pub const THOST_FTDC_SDS_OptErr: u8 = 101u8;
pub const THOST_FTDC_ACD_Add: u8 = 49u8;
pub const THOST_FTDC_ACD_Del: u8 = 50u8;
pub const THOST_FTDC_ACD_Upd: u8 = 51u8;
pub const THOST_FTDC_OAC_Balance: u8 = 49u8;
pub const THOST_FTDC_OAC_OrigFirst: u8 = 50u8;
pub const THOST_FTDC_PLCL_None: u8 = 48u8;
pub const THOST_FTDC_PLCL_Product: u8 = 49u8;
pub const THOST_FTDC_PLCL_Inst: u8 = 50u8;
pub const THOST_FTDC_OFCL_None: u8 = 48u8;
pub const THOST_FTDC_OFCL_Product: u8 = 49u8;
pub const THOST_FTDC_OFCL_Inst: u8 = 50u8;
pub const THOST_FTDC_EBL_False: u8 = 48u8;
pub const THOST_FTDC_EBL_True: u8 = 49u8;
pub const THOST_FTDC_ETR_USUAL: u8 = 49u8;
pub const THOST_FTDC_ETR_FNSP: u8 = 50u8;
pub const THOST_FTDC_ETR_BNSP: u8 = 51u8;
pub const THOST_FTDC_ETR_SPOT: u8 = 52u8;
pub const THOST_FTDC_EPF_None: u8 = 48u8;
pub const THOST_FTDC_EPF_SPBM: u8 = 49u8;
pub const THOST_FTDC_EPF_RULE: u8 = 50u8;
pub const THOST_FTDC_EPF_SPMM: u8 = 51u8;
pub const THOST_FTDC_EPF_RCAMS: u8 = 52u8;
pub const THOST_FTDC_WDPID_CashIn: u8 = 67u8;
pub const THOST_FTDC_ITR_CloseOnly: u8 = 49u8;
pub const THOST_FTDC_ITR_Forbidden: u8 = 50u8;
pub const THOST_FTDC_IMID_BothSide: u8 = 49u8;
pub const THOST_FTDC_IMID_MMSA: u8 = 50u8;
pub const THOST_FTDC_IMID_SPMM: u8 = 51u8;
pub const THOST_FTDC_ERComb_BUC: u8 = 48u8;
pub const THOST_FTDC_ERComb_BEC: u8 = 49u8;
pub const THOST_FTDC_ERComb_BEP: u8 = 50u8;
pub const THOST_FTDC_ERComb_BUP: u8 = 51u8;
pub const THOST_FTDC_ERComb_CAS: u8 = 52u8;
pub const THOST_FTDC_EET_None: u8 = 48u8;
pub const THOST_FTDC_EET_SPBM_AddOnHedge: u8 = 49u8;
pub const THOST_FTDC_EIC_Usual: u8 = 49u8;
pub const THOST_FTDC_EIC_Delivery: u8 = 50u8;
pub const THOST_FTDC_EIC_NonComb: u8 = 51u8;
pub const THOST_FTDC_PCF_None: u8 = 48u8;
pub const THOST_FTDC_PCF_OnlyFrozen: u8 = 49u8;
pub const THOST_FTDC_PCF_PositionChange: u8 = 50u8;
pub const THOST_TE_RESUME_TYPE_THOST_TERT_RESTART: THOST_TE_RESUME_TYPE = 0;
pub const THOST_TE_RESUME_TYPE_THOST_TERT_RESUME: THOST_TE_RESUME_TYPE = 1;
pub const THOST_TE_RESUME_TYPE_THOST_TERT_QUICK: THOST_TE_RESUME_TYPE = 2;
pub const THOST_TE_RESUME_TYPE_THOST_TERT_NONE: THOST_TE_RESUME_TYPE = 3;
pub type THOST_TE_RESUME_TYPE = ::std::os::raw::c_int;
pub type TThostFtdcTraderIDType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcInvestorIDType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcBrokerIDType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcBrokerAbbrType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcBrokerNameType = [::std::os::raw::c_char; 81usize];
pub type TThostFtdcOldExchangeInstIDType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcExchangeInstIDType = [::std::os::raw::c_char; 81usize];
pub type TThostFtdcOrderRefType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcParticipantIDType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcUserIDType = [::std::os::raw::c_char; 16usize];
pub type TThostFtdcPasswordType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcClientIDType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcInstrumentIDType = [::std::os::raw::c_char; 81usize];
pub type TThostFtdcOldInstrumentIDType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcInstrumentCodeType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcMarketIDType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcProductNameType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcExchangeIDType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcExchangeNameType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcExchangeAbbrType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcExchangeFlagType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcMacAddressType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcSystemIDType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcClientLoginRemarkType = [::std::os::raw::c_char; 151usize];
pub type TThostFtdcExchangePropertyType = ::std::os::raw::c_char;
pub type TThostFtdcDateType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcTimeType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcLongTimeType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcInstrumentNameType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcSettlementGroupIDType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcOrderSysIDType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcTradeIDType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcCommandTypeType = [::std::os::raw::c_char; 65usize];
pub type TThostFtdcOldIPAddressType = [::std::os::raw::c_char; 16usize];
pub type TThostFtdcIPAddressType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcIPPortType = ::std::os::raw::c_int;
pub type TThostFtdcProductInfoType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcProtocolInfoType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcBusinessUnitType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcDepositSeqNoType = [::std::os::raw::c_char; 15usize];
pub type TThostFtdcIdentifiedCardNoType = [::std::os::raw::c_char; 51usize];
pub type TThostFtdcIdCardTypeType = ::std::os::raw::c_char;
pub type TThostFtdcOrderLocalIDType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcUserNameType = [::std::os::raw::c_char; 81usize];
pub type TThostFtdcPartyNameType = [::std::os::raw::c_char; 81usize];
pub type TThostFtdcErrorMsgType = [::std::os::raw::c_char; 81usize];
pub type TThostFtdcFieldNameType = [::std::os::raw::c_char; 2049usize];
pub type TThostFtdcFieldContentType = [::std::os::raw::c_char; 2049usize];
pub type TThostFtdcSystemNameType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcContentType = [::std::os::raw::c_char; 501usize];
pub type TThostFtdcInvestorRangeType = ::std::os::raw::c_char;
pub type TThostFtdcDepartmentRangeType = ::std::os::raw::c_char;
pub type TThostFtdcDataSyncStatusType = ::std::os::raw::c_char;
pub type TThostFtdcBrokerDataSyncStatusType = ::std::os::raw::c_char;
pub type TThostFtdcExchangeConnectStatusType = ::std::os::raw::c_char;
pub type TThostFtdcTraderConnectStatusType = ::std::os::raw::c_char;
pub type TThostFtdcFunctionCodeType = ::std::os::raw::c_char;
pub type TThostFtdcBrokerFunctionCodeType = ::std::os::raw::c_char;
pub type TThostFtdcOrderActionStatusType = ::std::os::raw::c_char;
pub type TThostFtdcOrderStatusType = ::std::os::raw::c_char;
pub type TThostFtdcOrderSubmitStatusType = ::std::os::raw::c_char;
pub type TThostFtdcPositionDateType = ::std::os::raw::c_char;
pub type TThostFtdcPositionDateTypeType = ::std::os::raw::c_char;
pub type TThostFtdcTradingRoleType = ::std::os::raw::c_char;
pub type TThostFtdcProductClassType = ::std::os::raw::c_char;
pub type TThostFtdcAPIProductClassType = ::std::os::raw::c_char;
pub type TThostFtdcInstLifePhaseType = ::std::os::raw::c_char;
pub type TThostFtdcDirectionType = ::std::os::raw::c_char;
pub type TThostFtdcPositionTypeType = ::std::os::raw::c_char;
pub type TThostFtdcPosiDirectionType = ::std::os::raw::c_char;
pub type TThostFtdcSysSettlementStatusType = ::std::os::raw::c_char;
pub type TThostFtdcRatioAttrType = ::std::os::raw::c_char;
pub type TThostFtdcHedgeFlagType = ::std::os::raw::c_char;
pub type TThostFtdcBillHedgeFlagType = ::std::os::raw::c_char;
pub type TThostFtdcClientIDTypeType = ::std::os::raw::c_char;
pub type TThostFtdcOrderPriceTypeType = ::std::os::raw::c_char;
pub type TThostFtdcOffsetFlagType = ::std::os::raw::c_char;
pub type TThostFtdcForceCloseReasonType = ::std::os::raw::c_char;
pub type TThostFtdcOrderTypeType = ::std::os::raw::c_char;
pub type TThostFtdcTimeConditionType = ::std::os::raw::c_char;
pub type TThostFtdcVolumeConditionType = ::std::os::raw::c_char;
pub type TThostFtdcContingentConditionType = ::std::os::raw::c_char;
pub type TThostFtdcActionFlagType = ::std::os::raw::c_char;
pub type TThostFtdcTradingRightType = ::std::os::raw::c_char;
pub type TThostFtdcOrderSourceType = ::std::os::raw::c_char;
pub type TThostFtdcTradeTypeType = ::std::os::raw::c_char;
pub type TThostFtdcSpecPosiTypeType = ::std::os::raw::c_char;
pub type TThostFtdcPriceSourceType = ::std::os::raw::c_char;
pub type TThostFtdcInstrumentStatusType = ::std::os::raw::c_char;
pub type TThostFtdcInstStatusEnterReasonType = ::std::os::raw::c_char;
pub type TThostFtdcOrderActionRefType = ::std::os::raw::c_int;
pub type TThostFtdcInstallCountType = ::std::os::raw::c_int;
pub type TThostFtdcInstallIDType = ::std::os::raw::c_int;
pub type TThostFtdcErrorIDType = ::std::os::raw::c_int;
pub type TThostFtdcSettlementIDType = ::std::os::raw::c_int;
pub type TThostFtdcVolumeType = ::std::os::raw::c_int;
pub type TThostFtdcFrontIDType = ::std::os::raw::c_int;
pub type TThostFtdcSessionIDType = ::std::os::raw::c_int;
pub type TThostFtdcSequenceNoType = ::std::os::raw::c_int;
pub type TThostFtdcCommandNoType = ::std::os::raw::c_int;
pub type TThostFtdcMillisecType = ::std::os::raw::c_int;
pub type TThostFtdcSecType = ::std::os::raw::c_int;
pub type TThostFtdcVolumeMultipleType = ::std::os::raw::c_int;
pub type TThostFtdcTradingSegmentSNType = ::std::os::raw::c_int;
pub type TThostFtdcRequestIDType = ::std::os::raw::c_int;
pub type TThostFtdcYearType = ::std::os::raw::c_int;
pub type TThostFtdcMonthType = ::std::os::raw::c_int;
pub type TThostFtdcBoolType = ::std::os::raw::c_int;
pub type TThostFtdcPriceType = f64;
pub type TThostFtdcCombOffsetFlagType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcCombHedgeFlagType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcRatioType = f64;
pub type TThostFtdcMoneyType = f64;
pub type TThostFtdcLargeVolumeType = f64;
pub type TThostFtdcSequenceSeriesType = ::std::os::raw::c_short;
pub type TThostFtdcCommPhaseNoType = ::std::os::raw::c_short;
pub type TThostFtdcSequenceLabelType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcUnderlyingMultipleType = f64;
pub type TThostFtdcPriorityType = ::std::os::raw::c_int;
pub type TThostFtdcContractCodeType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcCityType = [::std::os::raw::c_char; 51usize];
pub type TThostFtdcIsStockType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcChannelType = [::std::os::raw::c_char; 51usize];
pub type TThostFtdcAddressType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcZipCodeType = [::std::os::raw::c_char; 7usize];
pub type TThostFtdcTelephoneType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcFaxType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcMobileType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcEMailType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcMemoType = [::std::os::raw::c_char; 161usize];
pub type TThostFtdcCompanyCodeType = [::std::os::raw::c_char; 51usize];
pub type TThostFtdcWebsiteType = [::std::os::raw::c_char; 51usize];
pub type TThostFtdcTaxNoType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcBatchStatusType = ::std::os::raw::c_char;
pub type TThostFtdcPropertyIDType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcPropertyNameType = [::std::os::raw::c_char; 65usize];
pub type TThostFtdcLicenseNoType = [::std::os::raw::c_char; 51usize];
pub type TThostFtdcAgentIDType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcAgentNameType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcAgentGroupIDType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcAgentGroupNameType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcReturnStyleType = ::std::os::raw::c_char;
pub type TThostFtdcReturnPatternType = ::std::os::raw::c_char;
pub type TThostFtdcReturnLevelType = ::std::os::raw::c_char;
pub type TThostFtdcReturnStandardType = ::std::os::raw::c_char;
pub type TThostFtdcMortgageTypeType = ::std::os::raw::c_char;
pub type TThostFtdcInvestorSettlementParamIDType = ::std::os::raw::c_char;
pub type TThostFtdcExchangeSettlementParamIDType = ::std::os::raw::c_char;
pub type TThostFtdcSystemParamIDType = ::std::os::raw::c_char;
pub type TThostFtdcTradeParamIDType = ::std::os::raw::c_char;
pub type TThostFtdcSettlementParamValueType = [::std::os::raw::c_char; 256usize];
pub type TThostFtdcCounterIDType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcInvestorGroupNameType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcBrandCodeType = [::std::os::raw::c_char; 257usize];
pub type TThostFtdcWarehouseType = [::std::os::raw::c_char; 257usize];
pub type TThostFtdcProductDateType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcGradeType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcClassifyType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcPositionType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcYieldlyType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcWeightType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcSubEntryFundNoType = ::std::os::raw::c_int;
pub type TThostFtdcFileIDType = ::std::os::raw::c_char;
pub type TThostFtdcFileNameType = [::std::os::raw::c_char; 257usize];
pub type TThostFtdcFileTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFileFormatType = ::std::os::raw::c_char;
pub type TThostFtdcFileUploadStatusType = ::std::os::raw::c_char;
pub type TThostFtdcTransferDirectionType = ::std::os::raw::c_char;
pub type TThostFtdcUploadModeType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcAccountIDType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcBankFlagType = [::std::os::raw::c_char; 4usize];
pub type TThostFtdcBankAccountType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcOpenNameType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcOpenBankType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcBankNameType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcPublishPathType = [::std::os::raw::c_char; 257usize];
pub type TThostFtdcOperatorIDType = [::std::os::raw::c_char; 65usize];
pub type TThostFtdcMonthCountType = ::std::os::raw::c_int;
pub type TThostFtdcAdvanceMonthArrayType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcDateExprType = [::std::os::raw::c_char; 1025usize];
pub type TThostFtdcInstrumentIDExprType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcInstrumentNameExprType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcSpecialCreateRuleType = ::std::os::raw::c_char;
pub type TThostFtdcBasisPriceTypeType = ::std::os::raw::c_char;
pub type TThostFtdcProductLifePhaseType = ::std::os::raw::c_char;
pub type TThostFtdcDeliveryModeType = ::std::os::raw::c_char;
pub type TThostFtdcLogLevelType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcProcessNameType = [::std::os::raw::c_char; 257usize];
pub type TThostFtdcOperationMemoType = [::std::os::raw::c_char; 1025usize];
pub type TThostFtdcFundIOTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFundTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFundDirectionType = ::std::os::raw::c_char;
pub type TThostFtdcFundStatusType = ::std::os::raw::c_char;
pub type TThostFtdcBillNoType = [::std::os::raw::c_char; 15usize];
pub type TThostFtdcBillNameType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcPublishStatusType = ::std::os::raw::c_char;
pub type TThostFtdcEnumValueIDType = [::std::os::raw::c_char; 65usize];
pub type TThostFtdcEnumValueTypeType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcEnumValueLabelType = [::std::os::raw::c_char; 65usize];
pub type TThostFtdcEnumValueResultType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcSystemStatusType = ::std::os::raw::c_char;
pub type TThostFtdcSettlementStatusType = ::std::os::raw::c_char;
pub type TThostFtdcRangeIntTypeType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcRangeIntFromType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcRangeIntToType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcFunctionIDType = [::std::os::raw::c_char; 25usize];
pub type TThostFtdcFunctionValueCodeType = [::std::os::raw::c_char; 257usize];
pub type TThostFtdcFunctionNameType = [::std::os::raw::c_char; 65usize];
pub type TThostFtdcRoleIDType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcRoleNameType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcDescriptionType = [::std::os::raw::c_char; 401usize];
pub type TThostFtdcCombineIDType = [::std::os::raw::c_char; 25usize];
pub type TThostFtdcCombineTypeType = [::std::os::raw::c_char; 25usize];
pub type TThostFtdcInvestorTypeType = ::std::os::raw::c_char;
pub type TThostFtdcBrokerTypeType = ::std::os::raw::c_char;
pub type TThostFtdcRiskLevelType = ::std::os::raw::c_char;
pub type TThostFtdcFeeAcceptStyleType = ::std::os::raw::c_char;
pub type TThostFtdcPasswordTypeType = ::std::os::raw::c_char;
pub type TThostFtdcAlgorithmType = ::std::os::raw::c_char;
pub type TThostFtdcIncludeCloseProfitType = ::std::os::raw::c_char;
pub type TThostFtdcAllWithoutTradeType = ::std::os::raw::c_char;
pub type TThostFtdcCommentType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcVersionType = [::std::os::raw::c_char; 4usize];
pub type TThostFtdcTradeCodeType = [::std::os::raw::c_char; 7usize];
pub type TThostFtdcTradeDateType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcTradeTimeType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcTradeSerialType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcTradeSerialNoType = ::std::os::raw::c_int;
pub type TThostFtdcFutureIDType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcBankIDType = [::std::os::raw::c_char; 4usize];
pub type TThostFtdcBankBrchIDType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcBankBranchIDType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcOperNoType = [::std::os::raw::c_char; 17usize];
pub type TThostFtdcDeviceIDType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcRecordNumType = [::std::os::raw::c_char; 7usize];
pub type TThostFtdcFutureAccountType = [::std::os::raw::c_char; 22usize];
pub type TThostFtdcFuturePwdFlagType = ::std::os::raw::c_char;
pub type TThostFtdcTransferTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFutureAccPwdType = [::std::os::raw::c_char; 17usize];
pub type TThostFtdcCurrencyCodeType = [::std::os::raw::c_char; 4usize];
pub type TThostFtdcRetCodeType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcRetInfoType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcTradeAmtType = [::std::os::raw::c_char; 20usize];
pub type TThostFtdcUseAmtType = [::std::os::raw::c_char; 20usize];
pub type TThostFtdcFetchAmtType = [::std::os::raw::c_char; 20usize];
pub type TThostFtdcTransferValidFlagType = ::std::os::raw::c_char;
pub type TThostFtdcCertCodeType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcReasonType = ::std::os::raw::c_char;
pub type TThostFtdcFundProjectIDType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcSexType = ::std::os::raw::c_char;
pub type TThostFtdcProfessionType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcNationalType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcProvinceType = [::std::os::raw::c_char; 51usize];
pub type TThostFtdcRegionType = [::std::os::raw::c_char; 16usize];
pub type TThostFtdcCountryType = [::std::os::raw::c_char; 16usize];
pub type TThostFtdcLicenseNOType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcCompanyTypeType = [::std::os::raw::c_char; 16usize];
pub type TThostFtdcBusinessScopeType = [::std::os::raw::c_char; 1001usize];
pub type TThostFtdcCapitalCurrencyType = [::std::os::raw::c_char; 4usize];
pub type TThostFtdcUserTypeType = ::std::os::raw::c_char;
pub type TThostFtdcBranchIDType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcRateTypeType = ::std::os::raw::c_char;
pub type TThostFtdcNoteTypeType = ::std::os::raw::c_char;
pub type TThostFtdcSettlementStyleType = ::std::os::raw::c_char;
pub type TThostFtdcBrokerDNSType = [::std::os::raw::c_char; 256usize];
pub type TThostFtdcSentenceType = [::std::os::raw::c_char; 501usize];
pub type TThostFtdcSettlementBillTypeType = ::std::os::raw::c_char;
pub type TThostFtdcUserRightTypeType = ::std::os::raw::c_char;
pub type TThostFtdcMarginPriceTypeType = ::std::os::raw::c_char;
pub type TThostFtdcBillGenStatusType = ::std::os::raw::c_char;
pub type TThostFtdcAlgoTypeType = ::std::os::raw::c_char;
pub type TThostFtdcHandlePositionAlgoIDType = ::std::os::raw::c_char;
pub type TThostFtdcFindMarginRateAlgoIDType = ::std::os::raw::c_char;
pub type TThostFtdcHandleTradingAccountAlgoIDType = ::std::os::raw::c_char;
pub type TThostFtdcPersonTypeType = ::std::os::raw::c_char;
pub type TThostFtdcQueryInvestorRangeType = ::std::os::raw::c_char;
pub type TThostFtdcInvestorRiskStatusType = ::std::os::raw::c_char;
pub type TThostFtdcLegIDType = ::std::os::raw::c_int;
pub type TThostFtdcLegMultipleType = ::std::os::raw::c_int;
pub type TThostFtdcImplyLevelType = ::std::os::raw::c_int;
pub type TThostFtdcClearAccountType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcOrganNOType = [::std::os::raw::c_char; 6usize];
pub type TThostFtdcClearbarchIDType = [::std::os::raw::c_char; 6usize];
pub type TThostFtdcUserEventTypeType = ::std::os::raw::c_char;
pub type TThostFtdcUserEventInfoType = [::std::os::raw::c_char; 1025usize];
pub type TThostFtdcCloseStyleType = ::std::os::raw::c_char;
pub type TThostFtdcStatModeType = ::std::os::raw::c_char;
pub type TThostFtdcParkedOrderStatusType = ::std::os::raw::c_char;
pub type TThostFtdcParkedOrderIDType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcParkedOrderActionIDType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcVirDealStatusType = ::std::os::raw::c_char;
pub type TThostFtdcOrgSystemIDType = ::std::os::raw::c_char;
pub type TThostFtdcVirTradeStatusType = ::std::os::raw::c_char;
pub type TThostFtdcVirBankAccTypeType = ::std::os::raw::c_char;
pub type TThostFtdcVirementStatusType = ::std::os::raw::c_char;
pub type TThostFtdcVirementAvailAbilityType = ::std::os::raw::c_char;
pub type TThostFtdcVirementTradeCodeType = ::std::os::raw::c_char;
pub type TThostFtdcPhotoTypeNameType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcPhotoTypeIDType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcPhotoNameType = [::std::os::raw::c_char; 161usize];
pub type TThostFtdcTopicIDType = ::std::os::raw::c_int;
pub type TThostFtdcReportTypeIDType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcCharacterIDType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcAMLParamIDType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcAMLInvestorTypeType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcAMLIdCardTypeType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcAMLTradeDirectType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcAMLTradeModelType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcAMLOpParamValueType = f64;
pub type TThostFtdcAMLCustomerCardTypeType = [::std::os::raw::c_char; 81usize];
pub type TThostFtdcAMLInstitutionNameType = [::std::os::raw::c_char; 65usize];
pub type TThostFtdcAMLDistrictIDType = [::std::os::raw::c_char; 7usize];
pub type TThostFtdcAMLRelationShipType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcAMLInstitutionTypeType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcAMLInstitutionIDType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcAMLAccountTypeType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcAMLTradingTypeType = [::std::os::raw::c_char; 7usize];
pub type TThostFtdcAMLTransactClassType = [::std::os::raw::c_char; 7usize];
pub type TThostFtdcAMLCapitalIOType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcAMLSiteType = [::std::os::raw::c_char; 10usize];
pub type TThostFtdcAMLCapitalPurposeType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcAMLReportTypeType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcAMLSerialNoType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcAMLStatusType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcAMLGenStatusType = ::std::os::raw::c_char;
pub type TThostFtdcAMLSeqCodeType = [::std::os::raw::c_char; 65usize];
pub type TThostFtdcAMLFileNameType = [::std::os::raw::c_char; 257usize];
pub type TThostFtdcAMLMoneyType = f64;
pub type TThostFtdcAMLFileAmountType = ::std::os::raw::c_int;
pub type TThostFtdcCFMMCKeyType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcCFMMCTokenType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcCFMMCKeyKindType = ::std::os::raw::c_char;
pub type TThostFtdcAMLReportNameType = [::std::os::raw::c_char; 81usize];
pub type TThostFtdcIndividualNameType = [::std::os::raw::c_char; 51usize];
pub type TThostFtdcCurrencyIDType = [::std::os::raw::c_char; 4usize];
pub type TThostFtdcCustNumberType = [::std::os::raw::c_char; 36usize];
pub type TThostFtdcOrganCodeType = [::std::os::raw::c_char; 36usize];
pub type TThostFtdcOrganNameType = [::std::os::raw::c_char; 71usize];
pub type TThostFtdcSuperOrganCodeType = [::std::os::raw::c_char; 12usize];
pub type TThostFtdcSubBranchIDType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcSubBranchNameType = [::std::os::raw::c_char; 71usize];
pub type TThostFtdcBranchNetCodeType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcBranchNetNameType = [::std::os::raw::c_char; 71usize];
pub type TThostFtdcOrganFlagType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcBankCodingForFutureType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcBankReturnCodeType = [::std::os::raw::c_char; 7usize];
pub type TThostFtdcPlateReturnCodeType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcBankSubBranchIDType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcFutureBranchIDType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcReturnCodeType = [::std::os::raw::c_char; 7usize];
pub type TThostFtdcOperatorCodeType = [::std::os::raw::c_char; 17usize];
pub type TThostFtdcClearDepIDType = [::std::os::raw::c_char; 6usize];
pub type TThostFtdcClearBrchIDType = [::std::os::raw::c_char; 6usize];
pub type TThostFtdcClearNameType = [::std::os::raw::c_char; 71usize];
pub type TThostFtdcBankAccountNameType = [::std::os::raw::c_char; 71usize];
pub type TThostFtdcInvDepIDType = [::std::os::raw::c_char; 6usize];
pub type TThostFtdcInvBrchIDType = [::std::os::raw::c_char; 6usize];
pub type TThostFtdcMessageFormatVersionType = [::std::os::raw::c_char; 36usize];
pub type TThostFtdcDigestType = [::std::os::raw::c_char; 36usize];
pub type TThostFtdcAuthenticDataType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcPasswordKeyType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcFutureAccountNameType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcMobilePhoneType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcFutureMainKeyType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcFutureWorkKeyType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcFutureTransKeyType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcBankMainKeyType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcBankWorkKeyType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcBankTransKeyType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcBankServerDescriptionType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcAddInfoType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcDescrInfoForReturnCodeType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcCountryCodeType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcSerialType = ::std::os::raw::c_int;
pub type TThostFtdcPlateSerialType = ::std::os::raw::c_int;
pub type TThostFtdcBankSerialType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcCorrectSerialType = ::std::os::raw::c_int;
pub type TThostFtdcFutureSerialType = ::std::os::raw::c_int;
pub type TThostFtdcApplicationIDType = ::std::os::raw::c_int;
pub type TThostFtdcBankProxyIDType = ::std::os::raw::c_int;
pub type TThostFtdcFBTCoreIDType = ::std::os::raw::c_int;
pub type TThostFtdcServerPortType = ::std::os::raw::c_int;
pub type TThostFtdcRepealedTimesType = ::std::os::raw::c_int;
pub type TThostFtdcRepealTimeIntervalType = ::std::os::raw::c_int;
pub type TThostFtdcTotalTimesType = ::std::os::raw::c_int;
pub type TThostFtdcFBTRequestIDType = ::std::os::raw::c_int;
pub type TThostFtdcTIDType = ::std::os::raw::c_int;
pub type TThostFtdcTradeAmountType = f64;
pub type TThostFtdcCustFeeType = f64;
pub type TThostFtdcFutureFeeType = f64;
pub type TThostFtdcSingleMaxAmtType = f64;
pub type TThostFtdcSingleMinAmtType = f64;
pub type TThostFtdcTotalAmtType = f64;
pub type TThostFtdcCertificationTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFileBusinessCodeType = ::std::os::raw::c_char;
pub type TThostFtdcCashExchangeCodeType = ::std::os::raw::c_char;
pub type TThostFtdcYesNoIndicatorType = ::std::os::raw::c_char;
pub type TThostFtdcBanlanceTypeType = ::std::os::raw::c_char;
pub type TThostFtdcGenderType = ::std::os::raw::c_char;
pub type TThostFtdcFeePayFlagType = ::std::os::raw::c_char;
pub type TThostFtdcPassWordKeyTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFBTPassWordTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFBTEncryModeType = ::std::os::raw::c_char;
pub type TThostFtdcBankRepealFlagType = ::std::os::raw::c_char;
pub type TThostFtdcBrokerRepealFlagType = ::std::os::raw::c_char;
pub type TThostFtdcInstitutionTypeType = ::std::os::raw::c_char;
pub type TThostFtdcLastFragmentType = ::std::os::raw::c_char;
pub type TThostFtdcBankAccStatusType = ::std::os::raw::c_char;
pub type TThostFtdcMoneyAccountStatusType = ::std::os::raw::c_char;
pub type TThostFtdcManageStatusType = ::std::os::raw::c_char;
pub type TThostFtdcSystemTypeType = ::std::os::raw::c_char;
pub type TThostFtdcTxnEndFlagType = ::std::os::raw::c_char;
pub type TThostFtdcProcessStatusType = ::std::os::raw::c_char;
pub type TThostFtdcCustTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFBTTransferDirectionType = ::std::os::raw::c_char;
pub type TThostFtdcOpenOrDestroyType = ::std::os::raw::c_char;
pub type TThostFtdcAvailabilityFlagType = ::std::os::raw::c_char;
pub type TThostFtdcOrganTypeType = ::std::os::raw::c_char;
pub type TThostFtdcOrganLevelType = ::std::os::raw::c_char;
pub type TThostFtdcProtocalIDType = ::std::os::raw::c_char;
pub type TThostFtdcConnectModeType = ::std::os::raw::c_char;
pub type TThostFtdcSyncModeType = ::std::os::raw::c_char;
pub type TThostFtdcBankAccTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFutureAccTypeType = ::std::os::raw::c_char;
pub type TThostFtdcOrganStatusType = ::std::os::raw::c_char;
pub type TThostFtdcCCBFeeModeType = ::std::os::raw::c_char;
pub type TThostFtdcCommApiTypeType = ::std::os::raw::c_char;
pub type TThostFtdcServiceIDType = ::std::os::raw::c_int;
pub type TThostFtdcServiceLineNoType = ::std::os::raw::c_int;
pub type TThostFtdcServiceNameType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcLinkStatusType = ::std::os::raw::c_char;
pub type TThostFtdcCommApiPointerType = ::std::os::raw::c_int;
pub type TThostFtdcPwdFlagType = ::std::os::raw::c_char;
pub type TThostFtdcSecuAccTypeType = ::std::os::raw::c_char;
pub type TThostFtdcTransferStatusType = ::std::os::raw::c_char;
pub type TThostFtdcSponsorTypeType = ::std::os::raw::c_char;
pub type TThostFtdcReqRspTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFBTUserEventTypeType = ::std::os::raw::c_char;
pub type TThostFtdcBankIDByBankType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcBankOperNoType = [::std::os::raw::c_char; 4usize];
pub type TThostFtdcBankCustNoType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcDBOPSeqNoType = ::std::os::raw::c_int;
pub type TThostFtdcTableNameType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcPKNameType = [::std::os::raw::c_char; 201usize];
pub type TThostFtdcPKValueType = [::std::os::raw::c_char; 501usize];
pub type TThostFtdcDBOperationType = ::std::os::raw::c_char;
pub type TThostFtdcSyncFlagType = ::std::os::raw::c_char;
pub type TThostFtdcTargetIDType = [::std::os::raw::c_char; 4usize];
pub type TThostFtdcSyncTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFBETimeType = [::std::os::raw::c_char; 7usize];
pub type TThostFtdcFBEBankNoType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcFBECertNoType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcExDirectionType = ::std::os::raw::c_char;
pub type TThostFtdcFBEBankAccountType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcFBEBankAccountNameType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcFBEAmtType = f64;
pub type TThostFtdcFBEBusinessTypeType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcFBEPostScriptType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcFBERemarkType = [::std::os::raw::c_char; 71usize];
pub type TThostFtdcExRateType = f64;
pub type TThostFtdcFBEResultFlagType = ::std::os::raw::c_char;
pub type TThostFtdcFBERtnMsgType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcFBEExtendMsgType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcFBEBusinessSerialType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcFBESystemSerialType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcFBETotalExCntType = ::std::os::raw::c_int;
pub type TThostFtdcFBEExchStatusType = ::std::os::raw::c_char;
pub type TThostFtdcFBEFileFlagType = ::std::os::raw::c_char;
pub type TThostFtdcFBEAlreadyTradeType = ::std::os::raw::c_char;
pub type TThostFtdcFBEOpenBankType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcFBEUserEventTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFBEFileNameType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcFBEBatchSerialType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcFBEReqFlagType = ::std::os::raw::c_char;
pub type TThostFtdcNotifyClassType = ::std::os::raw::c_char;
pub type TThostFtdcRiskNofityInfoType = [::std::os::raw::c_char; 257usize];
pub type TThostFtdcForceCloseSceneIdType = [::std::os::raw::c_char; 24usize];
pub type TThostFtdcForceCloseTypeType = ::std::os::raw::c_char;
pub type TThostFtdcInstrumentIDsType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcRiskNotifyMethodType = ::std::os::raw::c_char;
pub type TThostFtdcRiskNotifyStatusType = ::std::os::raw::c_char;
pub type TThostFtdcRiskUserEventType = ::std::os::raw::c_char;
pub type TThostFtdcParamIDType = ::std::os::raw::c_int;
pub type TThostFtdcParamNameType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcParamValueType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcConditionalOrderSortTypeType = ::std::os::raw::c_char;
pub type TThostFtdcSendTypeType = ::std::os::raw::c_char;
pub type TThostFtdcClientIDStatusType = ::std::os::raw::c_char;
pub type TThostFtdcIndustryIDType = [::std::os::raw::c_char; 17usize];
pub type TThostFtdcQuestionIDType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcQuestionContentType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcOptionIDType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcOptionContentType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcQuestionTypeType = ::std::os::raw::c_char;
pub type TThostFtdcProcessIDType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcSeqNoType = ::std::os::raw::c_int;
pub type TThostFtdcUOAProcessStatusType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcProcessTypeType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcBusinessTypeType = ::std::os::raw::c_char;
pub type TThostFtdcCfmmcReturnCodeType = ::std::os::raw::c_char;
pub type TThostFtdcExReturnCodeType = ::std::os::raw::c_int;
pub type TThostFtdcClientTypeType = ::std::os::raw::c_char;
pub type TThostFtdcExchangeIDTypeType = ::std::os::raw::c_char;
pub type TThostFtdcExClientIDTypeType = ::std::os::raw::c_char;
pub type TThostFtdcClientClassifyType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcUOAOrganTypeType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcUOACountryCodeType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcAreaCodeType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcFuturesIDType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcCffmcDateType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcCffmcTimeType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcNocIDType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcUpdateFlagType = ::std::os::raw::c_char;
pub type TThostFtdcApplyOperateIDType = ::std::os::raw::c_char;
pub type TThostFtdcApplyStatusIDType = ::std::os::raw::c_char;
pub type TThostFtdcSendMethodType = ::std::os::raw::c_char;
pub type TThostFtdcEventTypeType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcEventModeType = ::std::os::raw::c_char;
pub type TThostFtdcUOAAutoSendType = ::std::os::raw::c_char;
pub type TThostFtdcQueryDepthType = ::std::os::raw::c_int;
pub type TThostFtdcDataCenterIDType = ::std::os::raw::c_int;
pub type TThostFtdcFlowIDType = ::std::os::raw::c_char;
pub type TThostFtdcCheckLevelType = ::std::os::raw::c_char;
pub type TThostFtdcCheckNoType = ::std::os::raw::c_int;
pub type TThostFtdcCheckStatusType = ::std::os::raw::c_char;
pub type TThostFtdcUsedStatusType = ::std::os::raw::c_char;
pub type TThostFtdcRateTemplateNameType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcPropertyStringType = [::std::os::raw::c_char; 2049usize];
pub type TThostFtdcBankAcountOriginType = ::std::os::raw::c_char;
pub type TThostFtdcMonthBillTradeSumType = ::std::os::raw::c_char;
pub type TThostFtdcFBTTradeCodeEnumType = ::std::os::raw::c_char;
pub type TThostFtdcRateTemplateIDType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcRiskRateType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcTimestampType = ::std::os::raw::c_int;
pub type TThostFtdcInvestorIDRuleNameType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcInvestorIDRuleExprType = [::std::os::raw::c_char; 513usize];
pub type TThostFtdcLastDriftType = ::std::os::raw::c_int;
pub type TThostFtdcLastSuccessType = ::std::os::raw::c_int;
pub type TThostFtdcAuthKeyType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcSerialNumberType = [::std::os::raw::c_char; 17usize];
pub type TThostFtdcOTPTypeType = ::std::os::raw::c_char;
pub type TThostFtdcOTPVendorsIDType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcOTPVendorsNameType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcOTPStatusType = ::std::os::raw::c_char;
pub type TThostFtdcBrokerUserTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFutureTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFundEventTypeType = ::std::os::raw::c_char;
pub type TThostFtdcAccountSourceTypeType = ::std::os::raw::c_char;
pub type TThostFtdcCodeSourceTypeType = ::std::os::raw::c_char;
pub type TThostFtdcUserRangeType = ::std::os::raw::c_char;
pub type TThostFtdcTimeSpanType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcImportSequenceIDType = [::std::os::raw::c_char; 17usize];
pub type TThostFtdcByGroupType = ::std::os::raw::c_char;
pub type TThostFtdcTradeSumStatModeType = ::std::os::raw::c_char;
pub type TThostFtdcComTypeType = ::std::os::raw::c_int;
pub type TThostFtdcUserProductIDType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcUserProductNameType = [::std::os::raw::c_char; 65usize];
pub type TThostFtdcUserProductMemoType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcCSRCCancelFlagType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcCSRCDateType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcCSRCInvestorNameType = [::std::os::raw::c_char; 201usize];
pub type TThostFtdcCSRCOpenInvestorNameType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcCSRCInvestorIDType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcCSRCIdentifiedCardNoType = [::std::os::raw::c_char; 51usize];
pub type TThostFtdcCSRCClientIDType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcCSRCBankFlagType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcCSRCBankAccountType = [::std::os::raw::c_char; 23usize];
pub type TThostFtdcCSRCOpenNameType = [::std::os::raw::c_char; 401usize];
pub type TThostFtdcCSRCMemoType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcCSRCTimeType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcCSRCTradeIDType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcCSRCExchangeInstIDType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcCSRCMortgageNameType = [::std::os::raw::c_char; 7usize];
pub type TThostFtdcCSRCReasonType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcIsSettlementType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcCSRCMoneyType = f64;
pub type TThostFtdcCSRCPriceType = f64;
pub type TThostFtdcCSRCOptionsTypeType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcCSRCStrikePriceType = f64;
pub type TThostFtdcCSRCTargetProductIDType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcCSRCTargetInstrIDType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcCommModelNameType = [::std::os::raw::c_char; 161usize];
pub type TThostFtdcCommModelMemoType = [::std::os::raw::c_char; 1025usize];
pub type TThostFtdcExprSetModeType = ::std::os::raw::c_char;
pub type TThostFtdcRateInvestorRangeType = ::std::os::raw::c_char;
pub type TThostFtdcAgentBrokerIDType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcDRIdentityIDType = ::std::os::raw::c_int;
pub type TThostFtdcDRIdentityNameType = [::std::os::raw::c_char; 65usize];
pub type TThostFtdcDBLinkIDType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcSyncDataStatusType = ::std::os::raw::c_char;
pub type TThostFtdcTradeSourceType = ::std::os::raw::c_char;
pub type TThostFtdcFlexStatModeType = ::std::os::raw::c_char;
pub type TThostFtdcByInvestorRangeType = ::std::os::raw::c_char;
pub type TThostFtdcSRiskRateType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcSequenceNo12Type = ::std::os::raw::c_int;
pub type TThostFtdcPropertyInvestorRangeType = ::std::os::raw::c_char;
pub type TThostFtdcFileStatusType = ::std::os::raw::c_char;
pub type TThostFtdcFileGenStyleType = ::std::os::raw::c_char;
pub type TThostFtdcSysOperModeType = ::std::os::raw::c_char;
pub type TThostFtdcSysOperTypeType = ::std::os::raw::c_char;
pub type TThostFtdcCSRCDataQueyTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFreezeStatusType = ::std::os::raw::c_char;
pub type TThostFtdcStandardStatusType = ::std::os::raw::c_char;
pub type TThostFtdcCSRCFreezeStatusType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcRightParamTypeType = ::std::os::raw::c_char;
pub type TThostFtdcRightTemplateIDType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcRightTemplateNameType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcDataStatusType = ::std::os::raw::c_char;
pub type TThostFtdcAMLCheckStatusType = ::std::os::raw::c_char;
pub type TThostFtdcAmlDateTypeType = ::std::os::raw::c_char;
pub type TThostFtdcAmlCheckLevelType = ::std::os::raw::c_char;
pub type TThostFtdcAmlCheckFlowType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcDataTypeType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcExportFileTypeType = ::std::os::raw::c_char;
pub type TThostFtdcSettleManagerTypeType = ::std::os::raw::c_char;
pub type TThostFtdcSettleManagerIDType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcSettleManagerNameType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcSettleManagerLevelType = ::std::os::raw::c_char;
pub type TThostFtdcSettleManagerGroupType = ::std::os::raw::c_char;
pub type TThostFtdcCheckResultMemoType = [::std::os::raw::c_char; 1025usize];
pub type TThostFtdcFunctionUrlType = [::std::os::raw::c_char; 1025usize];
pub type TThostFtdcAuthInfoType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcAuthCodeType = [::std::os::raw::c_char; 17usize];
pub type TThostFtdcLimitUseTypeType = ::std::os::raw::c_char;
pub type TThostFtdcDataResourceType = ::std::os::raw::c_char;
pub type TThostFtdcMarginTypeType = ::std::os::raw::c_char;
pub type TThostFtdcActiveTypeType = ::std::os::raw::c_char;
pub type TThostFtdcMarginRateTypeType = ::std::os::raw::c_char;
pub type TThostFtdcBackUpStatusType = ::std::os::raw::c_char;
pub type TThostFtdcInitSettlementType = ::std::os::raw::c_char;
pub type TThostFtdcReportStatusType = ::std::os::raw::c_char;
pub type TThostFtdcSaveStatusType = ::std::os::raw::c_char;
pub type TThostFtdcSettArchiveStatusType = ::std::os::raw::c_char;
pub type TThostFtdcCTPTypeType = ::std::os::raw::c_char;
pub type TThostFtdcToolIDType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcToolNameType = [::std::os::raw::c_char; 81usize];
pub type TThostFtdcCloseDealTypeType = ::std::os::raw::c_char;
pub type TThostFtdcMortgageFundUseRangeType = ::std::os::raw::c_char;
pub type TThostFtdcCurrencyUnitType = f64;
pub type TThostFtdcExchangeRateType = f64;
pub type TThostFtdcSpecProductTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFundMortgageTypeType = ::std::os::raw::c_char;
pub type TThostFtdcAccountSettlementParamIDType = ::std::os::raw::c_char;
pub type TThostFtdcCurrencyNameType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcCurrencySignType = [::std::os::raw::c_char; 4usize];
pub type TThostFtdcFundMortDirectionType = ::std::os::raw::c_char;
pub type TThostFtdcBusinessClassType = ::std::os::raw::c_char;
pub type TThostFtdcSwapSourceTypeType = ::std::os::raw::c_char;
pub type TThostFtdcCurrExDirectionType = ::std::os::raw::c_char;
pub type TThostFtdcCurrencySwapStatusType = ::std::os::raw::c_char;
pub type TThostFtdcCurrExchCertNoType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcBatchSerialNoType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcReqFlagType = ::std::os::raw::c_char;
pub type TThostFtdcResFlagType = ::std::os::raw::c_char;
pub type TThostFtdcPageControlType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcRecordCountType = ::std::os::raw::c_int;
pub type TThostFtdcCurrencySwapMemoType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcExStatusType = ::std::os::raw::c_char;
pub type TThostFtdcClientRegionType = ::std::os::raw::c_char;
pub type TThostFtdcWorkPlaceType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcBusinessPeriodType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcWebSiteType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcUOAIdCardTypeType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcClientModeType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcInvestorFullNameType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcUOABrokerIDType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcUOAZipCodeType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcUOAEMailType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcOldCityType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcCorporateIdentifiedCardNoType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcHasBoardType = ::std::os::raw::c_char;
pub type TThostFtdcStartModeType = ::std::os::raw::c_char;
pub type TThostFtdcTemplateTypeType = ::std::os::raw::c_char;
pub type TThostFtdcLoginModeType = ::std::os::raw::c_char;
pub type TThostFtdcPromptTypeType = ::std::os::raw::c_char;
pub type TThostFtdcLedgerManageIDType = [::std::os::raw::c_char; 51usize];
pub type TThostFtdcInvestVarietyType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcBankAccountTypeType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcLedgerManageBankType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcCffexDepartmentNameType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcCffexDepartmentCodeType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcHasTrusteeType = ::std::os::raw::c_char;
pub type TThostFtdcCSRCMemo1Type = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcAssetmgrCFullNameType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcAssetmgrApprovalNOType = [::std::os::raw::c_char; 51usize];
pub type TThostFtdcAssetmgrMgrNameType = [::std::os::raw::c_char; 401usize];
pub type TThostFtdcAmTypeType = ::std::os::raw::c_char;
pub type TThostFtdcCSRCAmTypeType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcCSRCFundIOTypeType = ::std::os::raw::c_char;
pub type TThostFtdcCusAccountTypeType = ::std::os::raw::c_char;
pub type TThostFtdcCSRCNationalType = [::std::os::raw::c_char; 4usize];
pub type TThostFtdcCSRCSecAgentIDType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcLanguageTypeType = ::std::os::raw::c_char;
pub type TThostFtdcAmAccountType = [::std::os::raw::c_char; 23usize];
pub type TThostFtdcAssetmgrClientTypeType = ::std::os::raw::c_char;
pub type TThostFtdcAssetmgrTypeType = ::std::os::raw::c_char;
pub type TThostFtdcUOMType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcSHFEInstLifePhaseType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcSHFEProductClassType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcPriceDecimalType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcInTheMoneyFlagType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcCheckInstrTypeType = ::std::os::raw::c_char;
pub type TThostFtdcDeliveryTypeType = ::std::os::raw::c_char;
pub type TThostFtdcBigMoneyType = f64;
pub type TThostFtdcMaxMarginSideAlgorithmType = ::std::os::raw::c_char;
pub type TThostFtdcDAClientTypeType = ::std::os::raw::c_char;
pub type TThostFtdcCombinInstrIDType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcCombinSettlePriceType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcDCEPriorityType = ::std::os::raw::c_int;
pub type TThostFtdcTradeGroupIDType = ::std::os::raw::c_int;
pub type TThostFtdcIsCheckPrepaType = ::std::os::raw::c_int;
pub type TThostFtdcUOAAssetmgrTypeType = ::std::os::raw::c_char;
pub type TThostFtdcDirectionEnType = ::std::os::raw::c_char;
pub type TThostFtdcOffsetFlagEnType = ::std::os::raw::c_char;
pub type TThostFtdcHedgeFlagEnType = ::std::os::raw::c_char;
pub type TThostFtdcFundIOTypeEnType = ::std::os::raw::c_char;
pub type TThostFtdcFundTypeEnType = ::std::os::raw::c_char;
pub type TThostFtdcFundDirectionEnType = ::std::os::raw::c_char;
pub type TThostFtdcFundMortDirectionEnType = ::std::os::raw::c_char;
pub type TThostFtdcSwapBusinessTypeType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcOptionsTypeType = ::std::os::raw::c_char;
pub type TThostFtdcStrikeModeType = ::std::os::raw::c_char;
pub type TThostFtdcStrikeTypeType = ::std::os::raw::c_char;
pub type TThostFtdcApplyTypeType = ::std::os::raw::c_char;
pub type TThostFtdcGiveUpDataSourceType = ::std::os::raw::c_char;
pub type TThostFtdcExecOrderSysIDType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcExecResultType = ::std::os::raw::c_char;
pub type TThostFtdcStrikeSequenceType = ::std::os::raw::c_int;
pub type TThostFtdcStrikeTimeType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcCombinationTypeType = ::std::os::raw::c_char;
pub type TThostFtdcDceCombinationTypeType = ::std::os::raw::c_char;
pub type TThostFtdcOptionRoyaltyPriceTypeType = ::std::os::raw::c_char;
pub type TThostFtdcBalanceAlgorithmType = ::std::os::raw::c_char;
pub type TThostFtdcActionTypeType = ::std::os::raw::c_char;
pub type TThostFtdcForQuoteStatusType = ::std::os::raw::c_char;
pub type TThostFtdcValueMethodType = ::std::os::raw::c_char;
pub type TThostFtdcExecOrderPositionFlagType = ::std::os::raw::c_char;
pub type TThostFtdcExecOrderCloseFlagType = ::std::os::raw::c_char;
pub type TThostFtdcProductTypeType = ::std::os::raw::c_char;
pub type TThostFtdcCZCEUploadFileNameType = ::std::os::raw::c_char;
pub type TThostFtdcDCEUploadFileNameType = ::std::os::raw::c_char;
pub type TThostFtdcSHFEUploadFileNameType = ::std::os::raw::c_char;
pub type TThostFtdcCFFEXUploadFileNameType = ::std::os::raw::c_char;
pub type TThostFtdcCombDirectionType = ::std::os::raw::c_char;
pub type TThostFtdcStrikeOffsetTypeType = ::std::os::raw::c_char;
pub type TThostFtdcReserveOpenAccStasType = ::std::os::raw::c_char;
pub type TThostFtdcLoginRemarkType = [::std::os::raw::c_char; 36usize];
pub type TThostFtdcInvestUnitIDType = [::std::os::raw::c_char; 17usize];
pub type TThostFtdcBulletinIDType = ::std::os::raw::c_int;
pub type TThostFtdcNewsTypeType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcNewsUrgencyType = ::std::os::raw::c_char;
pub type TThostFtdcAbstractType = [::std::os::raw::c_char; 81usize];
pub type TThostFtdcComeFromType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcURLLinkType = [::std::os::raw::c_char; 201usize];
pub type TThostFtdcLongIndividualNameType = [::std::os::raw::c_char; 161usize];
pub type TThostFtdcLongFBEBankAccountNameType = [::std::os::raw::c_char; 161usize];
pub type TThostFtdcDateTimeType = [::std::os::raw::c_char; 17usize];
pub type TThostFtdcWeakPasswordSourceType = ::std::os::raw::c_char;
pub type TThostFtdcRandomStringType = [::std::os::raw::c_char; 17usize];
pub type TThostFtdcOptSelfCloseFlagType = ::std::os::raw::c_char;
pub type TThostFtdcBizTypeType = ::std::os::raw::c_char;
pub type TThostFtdcAppTypeType = ::std::os::raw::c_char;
pub type TThostFtdcAppIDType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcSystemInfoLenType = ::std::os::raw::c_int;
pub type TThostFtdcAdditionalInfoLenType = ::std::os::raw::c_int;
pub type TThostFtdcClientSystemInfoType = [::std::os::raw::c_char; 273usize];
pub type TThostFtdcAdditionalInfoType = [::std::os::raw::c_char; 261usize];
pub type TThostFtdcBase64ClientSystemInfoType = [::std::os::raw::c_char; 365usize];
pub type TThostFtdcBase64AdditionalInfoType = [::std::os::raw::c_char; 349usize];
pub type TThostFtdcCurrentAuthMethodType = ::std::os::raw::c_int;
pub type TThostFtdcCaptchaInfoLenType = ::std::os::raw::c_int;
pub type TThostFtdcCaptchaInfoType = [::std::os::raw::c_char; 2561usize];
pub type TThostFtdcUserTextSeqType = ::std::os::raw::c_int;
pub type TThostFtdcHandshakeDataType = [::std::os::raw::c_char; 301usize];
pub type TThostFtdcHandshakeDataLenType = ::std::os::raw::c_int;
pub type TThostFtdcCryptoKeyVersionType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcRsaKeyVersionType = ::std::os::raw::c_int;
pub type TThostFtdcSoftwareProviderIDType = [::std::os::raw::c_char; 22usize];
pub type TThostFtdcCollectTimeType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcQueryFreqType = ::std::os::raw::c_int;
pub type TThostFtdcResponseValueType = ::std::os::raw::c_char;
pub type TThostFtdcOTCTradeTypeType = ::std::os::raw::c_char;
pub type TThostFtdcMatchTypeType = ::std::os::raw::c_char;
pub type TThostFtdcOTCTraderIDType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcRiskValueType = f64;
pub type TThostFtdcIDBNameType = [::std::os::raw::c_char; 100usize];
pub type TThostFtdcDiscountRatioType = f64;
pub type TThostFtdcAuthTypeType = ::std::os::raw::c_char;
pub type TThostFtdcClassTypeType = ::std::os::raw::c_char;
pub type TThostFtdcTradingTypeType = ::std::os::raw::c_char;
pub type TThostFtdcProductStatusType = ::std::os::raw::c_char;
pub type TThostFtdcSyncDeltaStatusType = ::std::os::raw::c_char;
pub type TThostFtdcActionDirectionType = ::std::os::raw::c_char;
pub type TThostFtdcOrderCancelAlgType = ::std::os::raw::c_char;
pub type TThostFtdcSyncDescriptionType = [::std::os::raw::c_char; 257usize];
pub type TThostFtdcCommonIntType = ::std::os::raw::c_int;
pub type TThostFtdcSysVersionType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcOpenLimitControlLevelType = ::std::os::raw::c_char;
pub type TThostFtdcOrderFreqControlLevelType = ::std::os::raw::c_char;
pub type TThostFtdcEnumBoolType = ::std::os::raw::c_char;
pub type TThostFtdcTimeRangeType = ::std::os::raw::c_char;
pub type TThostFtdcDeltaType = f64;
pub type TThostFtdcSpreadIdType = ::std::os::raw::c_int;
pub type TThostFtdcPortfolioType = ::std::os::raw::c_char;
pub type TThostFtdcPortfolioDefIDType = ::std::os::raw::c_int;
pub type TThostFtdcWithDrawParamIDType = ::std::os::raw::c_char;
pub type TThostFtdcWithDrawParamValueType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcInvstTradingRightType = ::std::os::raw::c_char;
pub type TThostFtdcThostFunctionCodeType = ::std::os::raw::c_int;
pub type TThostFtdcSPMMDiscountRatioType = f64;
pub type TThostFtdcSPMMModelDescType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcSPMMModelIDType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcSPMMProductIDType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcInstMarginCalIDType = ::std::os::raw::c_char;
pub type TThostFtdcProductIDType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcHedgeRateType = f64;
pub type TThostFtdcRCAMSPriorityType = ::std::os::raw::c_int;
pub type TThostFtdcAdjustValueType = f64;
pub type TThostFtdcRCAMSCombinationTypeType = ::std::os::raw::c_char;
pub type TThostFtdcRuleIdType = [::std::os::raw::c_char; 51usize];
pub type TThostFtdcPortfTypeType = ::std::os::raw::c_char;
pub type TThostFtdcInstrumentClassType = ::std::os::raw::c_char;
pub type TThostFtdcCommodityGroupIDType = ::std::os::raw::c_int;
pub type TThostFtdcStdPositionType = f64;
pub type TThostFtdcProdChangeFlagType = ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcDisseminationField {
    pub SequenceSeries: TThostFtdcSequenceSeriesType,
    pub SequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReqUserLoginField {
    pub TradingDay: TThostFtdcDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Password: TThostFtdcPasswordType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub OneTimePassword: TThostFtdcPasswordType,
    pub reserve1: TThostFtdcOldIPAddressType,
    pub LoginRemark: TThostFtdcLoginRemarkType,
    pub ClientIPPort: TThostFtdcIPPortType,
    pub ClientIPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRspUserLoginField {
    pub TradingDay: TThostFtdcDateType,
    pub LoginTime: TThostFtdcTimeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub SystemName: TThostFtdcSystemNameType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub MaxOrderRef: TThostFtdcOrderRefType,
    pub SHFETime: TThostFtdcTimeType,
    pub DCETime: TThostFtdcTimeType,
    pub CZCETime: TThostFtdcTimeType,
    pub FFEXTime: TThostFtdcTimeType,
    pub INETime: TThostFtdcTimeType,
    pub SysVersion: TThostFtdcSysVersionType,
    pub GFEXTime: TThostFtdcTimeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcUserLogoutField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcForceUserLogoutField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReqAuthenticateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub AuthCode: TThostFtdcAuthCodeType,
    pub AppID: TThostFtdcAppIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRspAuthenticateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub AppID: TThostFtdcAppIDType,
    pub AppType: TThostFtdcAppTypeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcAuthenticationInfoField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub AuthInfo: TThostFtdcAuthInfoType,
    pub IsResult: TThostFtdcBoolType,
    pub AppID: TThostFtdcAppIDType,
    pub AppType: TThostFtdcAppTypeType,
    pub reserve1: TThostFtdcOldIPAddressType,
    pub ClientIPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRspUserLogin2Field {
    pub TradingDay: TThostFtdcDateType,
    pub LoginTime: TThostFtdcTimeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub SystemName: TThostFtdcSystemNameType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub MaxOrderRef: TThostFtdcOrderRefType,
    pub SHFETime: TThostFtdcTimeType,
    pub DCETime: TThostFtdcTimeType,
    pub CZCETime: TThostFtdcTimeType,
    pub FFEXTime: TThostFtdcTimeType,
    pub INETime: TThostFtdcTimeType,
    pub RandomString: TThostFtdcRandomStringType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTransferHeaderField {
    pub Version: TThostFtdcVersionType,
    pub TradeCode: TThostFtdcTradeCodeType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub TradeSerial: TThostFtdcTradeSerialType,
    pub FutureID: TThostFtdcFutureIDType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBrchID: TThostFtdcBankBrchIDType,
    pub OperNo: TThostFtdcOperNoType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub RecordNum: TThostFtdcRecordNumType,
    pub SessionID: TThostFtdcSessionIDType,
    pub RequestID: TThostFtdcRequestIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTransferBankToFutureReqField {
    pub FutureAccount: TThostFtdcAccountIDType,
    pub FuturePwdFlag: TThostFtdcFuturePwdFlagType,
    pub FutureAccPwd: TThostFtdcFutureAccPwdType,
    pub TradeAmt: TThostFtdcMoneyType,
    pub CustFee: TThostFtdcMoneyType,
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTransferBankToFutureRspField {
    pub RetCode: TThostFtdcRetCodeType,
    pub RetInfo: TThostFtdcRetInfoType,
    pub FutureAccount: TThostFtdcAccountIDType,
    pub TradeAmt: TThostFtdcMoneyType,
    pub CustFee: TThostFtdcMoneyType,
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTransferFutureToBankReqField {
    pub FutureAccount: TThostFtdcAccountIDType,
    pub FuturePwdFlag: TThostFtdcFuturePwdFlagType,
    pub FutureAccPwd: TThostFtdcFutureAccPwdType,
    pub TradeAmt: TThostFtdcMoneyType,
    pub CustFee: TThostFtdcMoneyType,
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTransferFutureToBankRspField {
    pub RetCode: TThostFtdcRetCodeType,
    pub RetInfo: TThostFtdcRetInfoType,
    pub FutureAccount: TThostFtdcAccountIDType,
    pub TradeAmt: TThostFtdcMoneyType,
    pub CustFee: TThostFtdcMoneyType,
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTransferQryBankReqField {
    pub FutureAccount: TThostFtdcAccountIDType,
    pub FuturePwdFlag: TThostFtdcFuturePwdFlagType,
    pub FutureAccPwd: TThostFtdcFutureAccPwdType,
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTransferQryBankRspField {
    pub RetCode: TThostFtdcRetCodeType,
    pub RetInfo: TThostFtdcRetInfoType,
    pub FutureAccount: TThostFtdcAccountIDType,
    pub TradeAmt: TThostFtdcMoneyType,
    pub UseAmt: TThostFtdcMoneyType,
    pub FetchAmt: TThostFtdcMoneyType,
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTransferQryDetailReqField {
    pub FutureAccount: TThostFtdcAccountIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTransferQryDetailRspField {
    pub TradeDate: TThostFtdcDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub TradeCode: TThostFtdcTradeCodeType,
    pub FutureSerial: TThostFtdcTradeSerialNoType,
    pub FutureID: TThostFtdcFutureIDType,
    pub FutureAccount: TThostFtdcFutureAccountType,
    pub BankSerial: TThostFtdcTradeSerialNoType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBrchID: TThostFtdcBankBrchIDType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub CertCode: TThostFtdcCertCodeType,
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
    pub TxAmount: TThostFtdcMoneyType,
    pub Flag: TThostFtdcTransferValidFlagType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRspInfoField {
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcExchangeField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ExchangeName: TThostFtdcExchangeNameType,
    pub ExchangeProperty: TThostFtdcExchangePropertyType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcProductField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ProductName: TThostFtdcProductNameType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProductClass: TThostFtdcProductClassType,
    pub VolumeMultiple: TThostFtdcVolumeMultipleType,
    pub PriceTick: TThostFtdcPriceType,
    pub MaxMarketOrderVolume: TThostFtdcVolumeType,
    pub MinMarketOrderVolume: TThostFtdcVolumeType,
    pub MaxLimitOrderVolume: TThostFtdcVolumeType,
    pub MinLimitOrderVolume: TThostFtdcVolumeType,
    pub PositionType: TThostFtdcPositionTypeType,
    pub PositionDateType: TThostFtdcPositionDateTypeType,
    pub CloseDealType: TThostFtdcCloseDealTypeType,
    pub TradeCurrencyID: TThostFtdcCurrencyIDType,
    pub MortgageFundUseRange: TThostFtdcMortgageFundUseRangeType,
    pub reserve2: TThostFtdcOldInstrumentIDType,
    pub UnderlyingMultiple: TThostFtdcUnderlyingMultipleType,
    pub ProductID: TThostFtdcInstrumentIDType,
    pub ExchangeProductID: TThostFtdcInstrumentIDType,
    pub OpenLimitControlLevel: TThostFtdcOpenLimitControlLevelType,
    pub OrderFreqControlLevel: TThostFtdcOrderFreqControlLevelType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInstrumentField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentName: TThostFtdcInstrumentNameType,
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    pub reserve3: TThostFtdcOldInstrumentIDType,
    pub ProductClass: TThostFtdcProductClassType,
    pub DeliveryYear: TThostFtdcYearType,
    pub DeliveryMonth: TThostFtdcMonthType,
    pub MaxMarketOrderVolume: TThostFtdcVolumeType,
    pub MinMarketOrderVolume: TThostFtdcVolumeType,
    pub MaxLimitOrderVolume: TThostFtdcVolumeType,
    pub MinLimitOrderVolume: TThostFtdcVolumeType,
    pub VolumeMultiple: TThostFtdcVolumeMultipleType,
    pub PriceTick: TThostFtdcPriceType,
    pub CreateDate: TThostFtdcDateType,
    pub OpenDate: TThostFtdcDateType,
    pub ExpireDate: TThostFtdcDateType,
    pub StartDelivDate: TThostFtdcDateType,
    pub EndDelivDate: TThostFtdcDateType,
    pub InstLifePhase: TThostFtdcInstLifePhaseType,
    pub IsTrading: TThostFtdcBoolType,
    pub PositionType: TThostFtdcPositionTypeType,
    pub PositionDateType: TThostFtdcPositionDateTypeType,
    pub LongMarginRatio: TThostFtdcRatioType,
    pub ShortMarginRatio: TThostFtdcRatioType,
    pub MaxMarginSideAlgorithm: TThostFtdcMaxMarginSideAlgorithmType,
    pub reserve4: TThostFtdcOldInstrumentIDType,
    pub StrikePrice: TThostFtdcPriceType,
    pub OptionsType: TThostFtdcOptionsTypeType,
    pub UnderlyingMultiple: TThostFtdcUnderlyingMultipleType,
    pub CombinationType: TThostFtdcCombinationTypeType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub ProductID: TThostFtdcInstrumentIDType,
    pub UnderlyingInstrID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcBrokerField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerAbbr: TThostFtdcBrokerAbbrType,
    pub BrokerName: TThostFtdcBrokerNameType,
    pub IsActive: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTraderField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub Password: TThostFtdcPasswordType,
    pub InstallCount: TThostFtdcInstallCountType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub OrderCancelAlg: TThostFtdcOrderCancelAlgType,
    pub TradeInstallCount: TThostFtdcInstallCountType,
    pub MDInstallCount: TThostFtdcInstallCountType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInvestorField {
    pub InvestorID: TThostFtdcInvestorIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    pub InvestorName: TThostFtdcPartyNameType,
    pub IdentifiedCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub IsActive: TThostFtdcBoolType,
    pub Telephone: TThostFtdcTelephoneType,
    pub Address: TThostFtdcAddressType,
    pub OpenDate: TThostFtdcDateType,
    pub Mobile: TThostFtdcMobileType,
    pub CommModelID: TThostFtdcInvestorIDType,
    pub MarginModelID: TThostFtdcInvestorIDType,
    pub IsOrderFreq: TThostFtdcEnumBoolType,
    pub IsOpenVolLimit: TThostFtdcEnumBoolType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTradingCodeField {
    pub InvestorID: TThostFtdcInvestorIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub IsActive: TThostFtdcBoolType,
    pub ClientIDType: TThostFtdcClientIDTypeType,
    pub BranchID: TThostFtdcBranchIDType,
    pub BizType: TThostFtdcBizTypeType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcPartBrokerField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub IsActive: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSuperUserField {
    pub UserID: TThostFtdcUserIDType,
    pub UserName: TThostFtdcUserNameType,
    pub Password: TThostFtdcPasswordType,
    pub IsActive: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSuperUserFunctionField {
    pub UserID: TThostFtdcUserIDType,
    pub FunctionCode: TThostFtdcFunctionCodeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInvestorGroupField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    pub InvestorGroupName: TThostFtdcInvestorGroupNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTradingAccountField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub PreMortgage: TThostFtdcMoneyType,
    pub PreCredit: TThostFtdcMoneyType,
    pub PreDeposit: TThostFtdcMoneyType,
    pub PreBalance: TThostFtdcMoneyType,
    pub PreMargin: TThostFtdcMoneyType,
    pub InterestBase: TThostFtdcMoneyType,
    pub Interest: TThostFtdcMoneyType,
    pub Deposit: TThostFtdcMoneyType,
    pub Withdraw: TThostFtdcMoneyType,
    pub FrozenMargin: TThostFtdcMoneyType,
    pub FrozenCash: TThostFtdcMoneyType,
    pub FrozenCommission: TThostFtdcMoneyType,
    pub CurrMargin: TThostFtdcMoneyType,
    pub CashIn: TThostFtdcMoneyType,
    pub Commission: TThostFtdcMoneyType,
    pub CloseProfit: TThostFtdcMoneyType,
    pub PositionProfit: TThostFtdcMoneyType,
    pub Balance: TThostFtdcMoneyType,
    pub Available: TThostFtdcMoneyType,
    pub WithdrawQuota: TThostFtdcMoneyType,
    pub Reserve: TThostFtdcMoneyType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub Credit: TThostFtdcMoneyType,
    pub Mortgage: TThostFtdcMoneyType,
    pub ExchangeMargin: TThostFtdcMoneyType,
    pub DeliveryMargin: TThostFtdcMoneyType,
    pub ExchangeDeliveryMargin: TThostFtdcMoneyType,
    pub ReserveBalance: TThostFtdcMoneyType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub PreFundMortgageIn: TThostFtdcMoneyType,
    pub PreFundMortgageOut: TThostFtdcMoneyType,
    pub FundMortgageIn: TThostFtdcMoneyType,
    pub FundMortgageOut: TThostFtdcMoneyType,
    pub FundMortgageAvailable: TThostFtdcMoneyType,
    pub MortgageableFund: TThostFtdcMoneyType,
    pub SpecProductMargin: TThostFtdcMoneyType,
    pub SpecProductFrozenMargin: TThostFtdcMoneyType,
    pub SpecProductCommission: TThostFtdcMoneyType,
    pub SpecProductFrozenCommission: TThostFtdcMoneyType,
    pub SpecProductPositionProfit: TThostFtdcMoneyType,
    pub SpecProductCloseProfit: TThostFtdcMoneyType,
    pub SpecProductPositionProfitByAlg: TThostFtdcMoneyType,
    pub SpecProductExchangeMargin: TThostFtdcMoneyType,
    pub BizType: TThostFtdcBizTypeType,
    pub FrozenSwap: TThostFtdcMoneyType,
    pub RemainSwap: TThostFtdcMoneyType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInvestorPositionField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub PosiDirection: TThostFtdcPosiDirectionType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub PositionDate: TThostFtdcPositionDateType,
    pub YdPosition: TThostFtdcVolumeType,
    pub Position: TThostFtdcVolumeType,
    pub LongFrozen: TThostFtdcVolumeType,
    pub ShortFrozen: TThostFtdcVolumeType,
    pub LongFrozenAmount: TThostFtdcMoneyType,
    pub ShortFrozenAmount: TThostFtdcMoneyType,
    pub OpenVolume: TThostFtdcVolumeType,
    pub CloseVolume: TThostFtdcVolumeType,
    pub OpenAmount: TThostFtdcMoneyType,
    pub CloseAmount: TThostFtdcMoneyType,
    pub PositionCost: TThostFtdcMoneyType,
    pub PreMargin: TThostFtdcMoneyType,
    pub UseMargin: TThostFtdcMoneyType,
    pub FrozenMargin: TThostFtdcMoneyType,
    pub FrozenCash: TThostFtdcMoneyType,
    pub FrozenCommission: TThostFtdcMoneyType,
    pub CashIn: TThostFtdcMoneyType,
    pub Commission: TThostFtdcMoneyType,
    pub CloseProfit: TThostFtdcMoneyType,
    pub PositionProfit: TThostFtdcMoneyType,
    pub PreSettlementPrice: TThostFtdcPriceType,
    pub SettlementPrice: TThostFtdcPriceType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub OpenCost: TThostFtdcMoneyType,
    pub ExchangeMargin: TThostFtdcMoneyType,
    pub CombPosition: TThostFtdcVolumeType,
    pub CombLongFrozen: TThostFtdcVolumeType,
    pub CombShortFrozen: TThostFtdcVolumeType,
    pub CloseProfitByDate: TThostFtdcMoneyType,
    pub CloseProfitByTrade: TThostFtdcMoneyType,
    pub TodayPosition: TThostFtdcVolumeType,
    pub MarginRateByMoney: TThostFtdcRatioType,
    pub MarginRateByVolume: TThostFtdcRatioType,
    pub StrikeFrozen: TThostFtdcVolumeType,
    pub StrikeFrozenAmount: TThostFtdcMoneyType,
    pub AbandonFrozen: TThostFtdcVolumeType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub YdStrikeFrozen: TThostFtdcVolumeType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub PositionCostOffset: TThostFtdcMoneyType,
    pub TasPosition: TThostFtdcVolumeType,
    pub TasPositionCost: TThostFtdcMoneyType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInstrumentMarginRateField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub IsRelative: TThostFtdcBoolType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInstrumentCommissionRateField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OpenRatioByMoney: TThostFtdcRatioType,
    pub OpenRatioByVolume: TThostFtdcRatioType,
    pub CloseRatioByMoney: TThostFtdcRatioType,
    pub CloseRatioByVolume: TThostFtdcRatioType,
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub BizType: TThostFtdcBizTypeType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcDepthMarketDataField {
    pub TradingDay: TThostFtdcDateType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    pub LastPrice: TThostFtdcPriceType,
    pub PreSettlementPrice: TThostFtdcPriceType,
    pub PreClosePrice: TThostFtdcPriceType,
    pub PreOpenInterest: TThostFtdcLargeVolumeType,
    pub OpenPrice: TThostFtdcPriceType,
    pub HighestPrice: TThostFtdcPriceType,
    pub LowestPrice: TThostFtdcPriceType,
    pub Volume: TThostFtdcVolumeType,
    pub Turnover: TThostFtdcMoneyType,
    pub OpenInterest: TThostFtdcLargeVolumeType,
    pub ClosePrice: TThostFtdcPriceType,
    pub SettlementPrice: TThostFtdcPriceType,
    pub UpperLimitPrice: TThostFtdcPriceType,
    pub LowerLimitPrice: TThostFtdcPriceType,
    pub PreDelta: TThostFtdcRatioType,
    pub CurrDelta: TThostFtdcRatioType,
    pub UpdateTime: TThostFtdcTimeType,
    pub UpdateMillisec: TThostFtdcMillisecType,
    pub BidPrice1: TThostFtdcPriceType,
    pub BidVolume1: TThostFtdcVolumeType,
    pub AskPrice1: TThostFtdcPriceType,
    pub AskVolume1: TThostFtdcVolumeType,
    pub BidPrice2: TThostFtdcPriceType,
    pub BidVolume2: TThostFtdcVolumeType,
    pub AskPrice2: TThostFtdcPriceType,
    pub AskVolume2: TThostFtdcVolumeType,
    pub BidPrice3: TThostFtdcPriceType,
    pub BidVolume3: TThostFtdcVolumeType,
    pub AskPrice3: TThostFtdcPriceType,
    pub AskVolume3: TThostFtdcVolumeType,
    pub BidPrice4: TThostFtdcPriceType,
    pub BidVolume4: TThostFtdcVolumeType,
    pub AskPrice4: TThostFtdcPriceType,
    pub AskVolume4: TThostFtdcVolumeType,
    pub BidPrice5: TThostFtdcPriceType,
    pub BidVolume5: TThostFtdcVolumeType,
    pub AskPrice5: TThostFtdcPriceType,
    pub AskVolume5: TThostFtdcVolumeType,
    pub AveragePrice: TThostFtdcPriceType,
    pub ActionDay: TThostFtdcDateType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub BandingUpperPrice: TThostFtdcPriceType,
    pub BandingLowerPrice: TThostFtdcPriceType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInstrumentTradingRightField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub TradingRight: TThostFtdcTradingRightType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcBrokerUserField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub UserName: TThostFtdcUserNameType,
    pub UserType: TThostFtdcUserTypeType,
    pub IsActive: TThostFtdcBoolType,
    pub IsUsingOTP: TThostFtdcBoolType,
    pub IsAuthForce: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcBrokerUserPasswordField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Password: TThostFtdcPasswordType,
    pub LastUpdateTime: TThostFtdcDateTimeType,
    pub LastLoginTime: TThostFtdcDateTimeType,
    pub ExpireDate: TThostFtdcDateType,
    pub WeakExpireDate: TThostFtdcDateType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcBrokerUserFunctionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub BrokerFunctionCode: TThostFtdcBrokerFunctionCodeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTraderOfferField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub Password: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub TraderConnectStatus: TThostFtdcTraderConnectStatusType,
    pub ConnectRequestDate: TThostFtdcDateType,
    pub ConnectRequestTime: TThostFtdcTimeType,
    pub LastReportDate: TThostFtdcDateType,
    pub LastReportTime: TThostFtdcTimeType,
    pub ConnectDate: TThostFtdcDateType,
    pub ConnectTime: TThostFtdcTimeType,
    pub StartDate: TThostFtdcDateType,
    pub StartTime: TThostFtdcTimeType,
    pub TradingDay: TThostFtdcDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub MaxTradeID: TThostFtdcTradeIDType,
    pub MaxOrderMessageReference: TThostFtdcReturnCodeType,
    pub OrderCancelAlg: TThostFtdcOrderCancelAlgType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSettlementInfoField {
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub Content: TThostFtdcContentType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInstrumentMarginRateAdjustField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub IsRelative: TThostFtdcBoolType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcExchangeMarginRateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcExchangeMarginRateAdjustField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub ExchLongMarginRatioByMoney: TThostFtdcRatioType,
    pub ExchLongMarginRatioByVolume: TThostFtdcMoneyType,
    pub ExchShortMarginRatioByMoney: TThostFtdcRatioType,
    pub ExchShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub NoLongMarginRatioByMoney: TThostFtdcRatioType,
    pub NoLongMarginRatioByVolume: TThostFtdcMoneyType,
    pub NoShortMarginRatioByMoney: TThostFtdcRatioType,
    pub NoShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcExchangeRateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    pub FromCurrencyUnit: TThostFtdcCurrencyUnitType,
    pub ToCurrencyID: TThostFtdcCurrencyIDType,
    pub ExchangeRate: TThostFtdcExchangeRateType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSettlementRefField {
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcCurrentTimeField {
    pub CurrDate: TThostFtdcDateType,
    pub CurrTime: TThostFtdcTimeType,
    pub CurrMillisec: TThostFtdcMillisecType,
    pub ActionDay: TThostFtdcDateType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcCommPhaseField {
    pub TradingDay: TThostFtdcDateType,
    pub CommPhaseNo: TThostFtdcCommPhaseNoType,
    pub SystemID: TThostFtdcSystemIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcLoginInfoField {
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub LoginDate: TThostFtdcDateType,
    pub LoginTime: TThostFtdcTimeType,
    pub reserve1: TThostFtdcOldIPAddressType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    pub SystemName: TThostFtdcSystemNameType,
    pub PasswordDeprecated: TThostFtdcPasswordType,
    pub MaxOrderRef: TThostFtdcOrderRefType,
    pub SHFETime: TThostFtdcTimeType,
    pub DCETime: TThostFtdcTimeType,
    pub CZCETime: TThostFtdcTimeType,
    pub FFEXTime: TThostFtdcTimeType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub OneTimePassword: TThostFtdcPasswordType,
    pub INETime: TThostFtdcTimeType,
    pub IsQryControl: TThostFtdcBoolType,
    pub LoginRemark: TThostFtdcLoginRemarkType,
    pub Password: TThostFtdcPasswordType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcLogoutAllField {
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub SystemName: TThostFtdcSystemNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcFrontStatusField {
    pub FrontID: TThostFtdcFrontIDType,
    pub LastReportDate: TThostFtdcDateType,
    pub LastReportTime: TThostFtdcTimeType,
    pub IsActive: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcUserPasswordUpdateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub OldPassword: TThostFtdcPasswordType,
    pub NewPassword: TThostFtdcPasswordType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInputOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub OrderRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    pub Direction: TThostFtdcDirectionType,
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    pub LimitPrice: TThostFtdcPriceType,
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    pub TimeCondition: TThostFtdcTimeConditionType,
    pub GTDDate: TThostFtdcDateType,
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    pub MinVolume: TThostFtdcVolumeType,
    pub ContingentCondition: TThostFtdcContingentConditionType,
    pub StopPrice: TThostFtdcPriceType,
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    pub IsAutoSuspend: TThostFtdcBoolType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub RequestID: TThostFtdcRequestIDType,
    pub UserForceClose: TThostFtdcBoolType,
    pub IsSwapOrder: TThostFtdcBoolType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub OrderRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    pub Direction: TThostFtdcDirectionType,
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    pub LimitPrice: TThostFtdcPriceType,
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    pub TimeCondition: TThostFtdcTimeConditionType,
    pub GTDDate: TThostFtdcDateType,
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    pub MinVolume: TThostFtdcVolumeType,
    pub ContingentCondition: TThostFtdcContingentConditionType,
    pub StopPrice: TThostFtdcPriceType,
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    pub IsAutoSuspend: TThostFtdcBoolType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub RequestID: TThostFtdcRequestIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    pub NotifySequence: TThostFtdcSequenceNoType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub OrderSource: TThostFtdcOrderSourceType,
    pub OrderStatus: TThostFtdcOrderStatusType,
    pub OrderType: TThostFtdcOrderTypeType,
    pub VolumeTraded: TThostFtdcVolumeType,
    pub VolumeTotal: TThostFtdcVolumeType,
    pub InsertDate: TThostFtdcDateType,
    pub InsertTime: TThostFtdcTimeType,
    pub ActiveTime: TThostFtdcTimeType,
    pub SuspendTime: TThostFtdcTimeType,
    pub UpdateTime: TThostFtdcTimeType,
    pub CancelTime: TThostFtdcTimeType,
    pub ActiveTraderID: TThostFtdcTraderIDType,
    pub ClearingPartID: TThostFtdcParticipantIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub UserForceClose: TThostFtdcBoolType,
    pub ActiveUserID: TThostFtdcUserIDType,
    pub BrokerOrderSeq: TThostFtdcSequenceNoType,
    pub RelativeOrderSysID: TThostFtdcOrderSysIDType,
    pub ZCETotalTradedVolume: TThostFtdcVolumeType,
    pub IsSwapOrder: TThostFtdcBoolType,
    pub BranchID: TThostFtdcBranchIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub reserve3: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcExchangeOrderField {
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    pub Direction: TThostFtdcDirectionType,
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    pub LimitPrice: TThostFtdcPriceType,
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    pub TimeCondition: TThostFtdcTimeConditionType,
    pub GTDDate: TThostFtdcDateType,
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    pub MinVolume: TThostFtdcVolumeType,
    pub ContingentCondition: TThostFtdcContingentConditionType,
    pub StopPrice: TThostFtdcPriceType,
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    pub IsAutoSuspend: TThostFtdcBoolType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub RequestID: TThostFtdcRequestIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    pub NotifySequence: TThostFtdcSequenceNoType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub OrderSource: TThostFtdcOrderSourceType,
    pub OrderStatus: TThostFtdcOrderStatusType,
    pub OrderType: TThostFtdcOrderTypeType,
    pub VolumeTraded: TThostFtdcVolumeType,
    pub VolumeTotal: TThostFtdcVolumeType,
    pub InsertDate: TThostFtdcDateType,
    pub InsertTime: TThostFtdcTimeType,
    pub ActiveTime: TThostFtdcTimeType,
    pub SuspendTime: TThostFtdcTimeType,
    pub UpdateTime: TThostFtdcTimeType,
    pub CancelTime: TThostFtdcTimeType,
    pub ActiveTraderID: TThostFtdcTraderIDType,
    pub ClearingPartID: TThostFtdcParticipantIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub BranchID: TThostFtdcBranchIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcExchangeOrderInsertErrorField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInputOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    pub OrderRef: TThostFtdcOrderRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub LimitPrice: TThostFtdcPriceType,
    pub VolumeChange: TThostFtdcVolumeType,
    pub UserID: TThostFtdcUserIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    pub OrderRef: TThostFtdcOrderRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub LimitPrice: TThostFtdcPriceType,
    pub VolumeChange: TThostFtdcVolumeType,
    pub ActionDate: TThostFtdcDateType,
    pub ActionTime: TThostFtdcTimeType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    pub UserID: TThostFtdcUserIDType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub BranchID: TThostFtdcBranchIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcExchangeOrderActionField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub LimitPrice: TThostFtdcPriceType,
    pub VolumeChange: TThostFtdcVolumeType,
    pub ActionDate: TThostFtdcDateType,
    pub ActionTime: TThostFtdcTimeType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    pub UserID: TThostFtdcUserIDType,
    pub BranchID: TThostFtdcBranchIDType,
    pub reserve1: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcExchangeOrderActionErrorField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcExchangeTradeField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TradeID: TThostFtdcTradeIDType,
    pub Direction: TThostFtdcDirectionType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub TradingRole: TThostFtdcTradingRoleType,
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub Price: TThostFtdcPriceType,
    pub Volume: TThostFtdcVolumeType,
    pub TradeDate: TThostFtdcDateType,
    pub TradeTime: TThostFtdcTimeType,
    pub TradeType: TThostFtdcTradeTypeType,
    pub PriceSource: TThostFtdcPriceSourceType,
    pub TraderID: TThostFtdcTraderIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub ClearingPartID: TThostFtdcParticipantIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub TradeSource: TThostFtdcTradeSourceType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTradeField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub OrderRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TradeID: TThostFtdcTradeIDType,
    pub Direction: TThostFtdcDirectionType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub TradingRole: TThostFtdcTradingRoleType,
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub Price: TThostFtdcPriceType,
    pub Volume: TThostFtdcVolumeType,
    pub TradeDate: TThostFtdcDateType,
    pub TradeTime: TThostFtdcTimeType,
    pub TradeType: TThostFtdcTradeTypeType,
    pub PriceSource: TThostFtdcPriceSourceType,
    pub TraderID: TThostFtdcTraderIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub ClearingPartID: TThostFtdcParticipantIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub BrokerOrderSeq: TThostFtdcSequenceNoType,
    pub TradeSource: TThostFtdcTradeSourceType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcUserSessionField {
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub LoginDate: TThostFtdcDateType,
    pub LoginTime: TThostFtdcTimeType,
    pub reserve1: TThostFtdcOldIPAddressType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub LoginRemark: TThostFtdcLoginRemarkType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryMaxOrderVolumeField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub Direction: TThostFtdcDirectionType,
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub MaxVolume: TThostFtdcVolumeType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSettlementInfoConfirmField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ConfirmDate: TThostFtdcDateType,
    pub ConfirmTime: TThostFtdcTimeType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDepositField {
    pub DepositSeqNo: TThostFtdcDepositSeqNoType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub Deposit: TThostFtdcMoneyType,
    pub IsForce: TThostFtdcBoolType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub IsFromSopt: TThostFtdcBoolType,
    pub TradingPassword: TThostFtdcPasswordType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncFundMortgageField {
    pub MortgageSeqNo: TThostFtdcDepositSeqNoType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    pub MortgageAmount: TThostFtdcMoneyType,
    pub ToCurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcBrokerSyncField {
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncingInvestorField {
    pub InvestorID: TThostFtdcInvestorIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    pub InvestorName: TThostFtdcPartyNameType,
    pub IdentifiedCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub IsActive: TThostFtdcBoolType,
    pub Telephone: TThostFtdcTelephoneType,
    pub Address: TThostFtdcAddressType,
    pub OpenDate: TThostFtdcDateType,
    pub Mobile: TThostFtdcMobileType,
    pub CommModelID: TThostFtdcInvestorIDType,
    pub MarginModelID: TThostFtdcInvestorIDType,
    pub IsOrderFreq: TThostFtdcEnumBoolType,
    pub IsOpenVolLimit: TThostFtdcEnumBoolType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncingTradingCodeField {
    pub InvestorID: TThostFtdcInvestorIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub IsActive: TThostFtdcBoolType,
    pub ClientIDType: TThostFtdcClientIDTypeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncingInvestorGroupField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    pub InvestorGroupName: TThostFtdcInvestorGroupNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncingTradingAccountField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub PreMortgage: TThostFtdcMoneyType,
    pub PreCredit: TThostFtdcMoneyType,
    pub PreDeposit: TThostFtdcMoneyType,
    pub PreBalance: TThostFtdcMoneyType,
    pub PreMargin: TThostFtdcMoneyType,
    pub InterestBase: TThostFtdcMoneyType,
    pub Interest: TThostFtdcMoneyType,
    pub Deposit: TThostFtdcMoneyType,
    pub Withdraw: TThostFtdcMoneyType,
    pub FrozenMargin: TThostFtdcMoneyType,
    pub FrozenCash: TThostFtdcMoneyType,
    pub FrozenCommission: TThostFtdcMoneyType,
    pub CurrMargin: TThostFtdcMoneyType,
    pub CashIn: TThostFtdcMoneyType,
    pub Commission: TThostFtdcMoneyType,
    pub CloseProfit: TThostFtdcMoneyType,
    pub PositionProfit: TThostFtdcMoneyType,
    pub Balance: TThostFtdcMoneyType,
    pub Available: TThostFtdcMoneyType,
    pub WithdrawQuota: TThostFtdcMoneyType,
    pub Reserve: TThostFtdcMoneyType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub Credit: TThostFtdcMoneyType,
    pub Mortgage: TThostFtdcMoneyType,
    pub ExchangeMargin: TThostFtdcMoneyType,
    pub DeliveryMargin: TThostFtdcMoneyType,
    pub ExchangeDeliveryMargin: TThostFtdcMoneyType,
    pub ReserveBalance: TThostFtdcMoneyType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub PreFundMortgageIn: TThostFtdcMoneyType,
    pub PreFundMortgageOut: TThostFtdcMoneyType,
    pub FundMortgageIn: TThostFtdcMoneyType,
    pub FundMortgageOut: TThostFtdcMoneyType,
    pub FundMortgageAvailable: TThostFtdcMoneyType,
    pub MortgageableFund: TThostFtdcMoneyType,
    pub SpecProductMargin: TThostFtdcMoneyType,
    pub SpecProductFrozenMargin: TThostFtdcMoneyType,
    pub SpecProductCommission: TThostFtdcMoneyType,
    pub SpecProductFrozenCommission: TThostFtdcMoneyType,
    pub SpecProductPositionProfit: TThostFtdcMoneyType,
    pub SpecProductCloseProfit: TThostFtdcMoneyType,
    pub SpecProductPositionProfitByAlg: TThostFtdcMoneyType,
    pub SpecProductExchangeMargin: TThostFtdcMoneyType,
    pub FrozenSwap: TThostFtdcMoneyType,
    pub RemainSwap: TThostFtdcMoneyType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncingInvestorPositionField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub PosiDirection: TThostFtdcPosiDirectionType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub PositionDate: TThostFtdcPositionDateType,
    pub YdPosition: TThostFtdcVolumeType,
    pub Position: TThostFtdcVolumeType,
    pub LongFrozen: TThostFtdcVolumeType,
    pub ShortFrozen: TThostFtdcVolumeType,
    pub LongFrozenAmount: TThostFtdcMoneyType,
    pub ShortFrozenAmount: TThostFtdcMoneyType,
    pub OpenVolume: TThostFtdcVolumeType,
    pub CloseVolume: TThostFtdcVolumeType,
    pub OpenAmount: TThostFtdcMoneyType,
    pub CloseAmount: TThostFtdcMoneyType,
    pub PositionCost: TThostFtdcMoneyType,
    pub PreMargin: TThostFtdcMoneyType,
    pub UseMargin: TThostFtdcMoneyType,
    pub FrozenMargin: TThostFtdcMoneyType,
    pub FrozenCash: TThostFtdcMoneyType,
    pub FrozenCommission: TThostFtdcMoneyType,
    pub CashIn: TThostFtdcMoneyType,
    pub Commission: TThostFtdcMoneyType,
    pub CloseProfit: TThostFtdcMoneyType,
    pub PositionProfit: TThostFtdcMoneyType,
    pub PreSettlementPrice: TThostFtdcPriceType,
    pub SettlementPrice: TThostFtdcPriceType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub OpenCost: TThostFtdcMoneyType,
    pub ExchangeMargin: TThostFtdcMoneyType,
    pub CombPosition: TThostFtdcVolumeType,
    pub CombLongFrozen: TThostFtdcVolumeType,
    pub CombShortFrozen: TThostFtdcVolumeType,
    pub CloseProfitByDate: TThostFtdcMoneyType,
    pub CloseProfitByTrade: TThostFtdcMoneyType,
    pub TodayPosition: TThostFtdcVolumeType,
    pub MarginRateByMoney: TThostFtdcRatioType,
    pub MarginRateByVolume: TThostFtdcRatioType,
    pub StrikeFrozen: TThostFtdcVolumeType,
    pub StrikeFrozenAmount: TThostFtdcMoneyType,
    pub AbandonFrozen: TThostFtdcVolumeType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub YdStrikeFrozen: TThostFtdcVolumeType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub PositionCostOffset: TThostFtdcMoneyType,
    pub TasPosition: TThostFtdcVolumeType,
    pub TasPositionCost: TThostFtdcMoneyType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncingInstrumentMarginRateField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub IsRelative: TThostFtdcBoolType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncingInstrumentCommissionRateField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OpenRatioByMoney: TThostFtdcRatioType,
    pub OpenRatioByVolume: TThostFtdcRatioType,
    pub CloseRatioByMoney: TThostFtdcRatioType,
    pub CloseRatioByVolume: TThostFtdcRatioType,
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncingInstrumentTradingRightField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub TradingRight: TThostFtdcTradingRightType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub InsertTimeStart: TThostFtdcTimeType,
    pub InsertTimeEnd: TThostFtdcTimeType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryTradeField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TradeID: TThostFtdcTradeIDType,
    pub TradeTimeStart: TThostFtdcTimeType,
    pub TradeTimeEnd: TThostFtdcTimeType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryInvestorPositionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryTradingAccountField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub BizType: TThostFtdcBizTypeType,
    pub AccountID: TThostFtdcAccountIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryInvestorField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryTradingCodeField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ClientIDType: TThostFtdcClientIDTypeType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryInvestorGroupField {
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryInstrumentMarginRateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryInstrumentCommissionRateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryInstrumentTradingRightField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryBrokerField {
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryTraderField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub TraderID: TThostFtdcTraderIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQrySuperUserFunctionField {
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryUserSessionField {
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryPartBrokerField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryFrontStatusField {
    pub FrontID: TThostFtdcFrontIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryExchangeOrderField {
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryExchangeOrderActionField {
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TraderID: TThostFtdcTraderIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQrySuperUserField {
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryExchangeField {
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryProductField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ProductClass: TThostFtdcProductClassType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProductID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryInstrumentField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    pub reserve3: TThostFtdcOldInstrumentIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub ProductID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryDepthMarketDataField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryBrokerUserField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryBrokerUserFunctionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryTraderOfferField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub TraderID: TThostFtdcTraderIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQrySyncDepositField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub DepositSeqNo: TThostFtdcDepositSeqNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQrySettlementInfoField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub TradingDay: TThostFtdcDateType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryExchangeMarginRateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryExchangeMarginRateAdjustField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryExchangeRateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    pub ToCurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQrySyncFundMortgageField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub MortgageSeqNo: TThostFtdcDepositSeqNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryHisOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub InsertTimeStart: TThostFtdcTimeType,
    pub InsertTimeEnd: TThostFtdcTimeType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcOptionInstrMiniMarginField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub MinMargin: TThostFtdcMoneyType,
    pub ValueMethod: TThostFtdcValueMethodType,
    pub IsRelative: TThostFtdcBoolType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcOptionInstrMarginAdjustField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub SShortMarginRatioByMoney: TThostFtdcRatioType,
    pub SShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub HShortMarginRatioByMoney: TThostFtdcRatioType,
    pub HShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub AShortMarginRatioByMoney: TThostFtdcRatioType,
    pub AShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub IsRelative: TThostFtdcBoolType,
    pub MShortMarginRatioByMoney: TThostFtdcRatioType,
    pub MShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcOptionInstrCommRateField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OpenRatioByMoney: TThostFtdcRatioType,
    pub OpenRatioByVolume: TThostFtdcRatioType,
    pub CloseRatioByMoney: TThostFtdcRatioType,
    pub CloseRatioByVolume: TThostFtdcRatioType,
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    pub StrikeRatioByMoney: TThostFtdcRatioType,
    pub StrikeRatioByVolume: TThostFtdcRatioType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcOptionInstrTradeCostField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub FixedMargin: TThostFtdcMoneyType,
    pub MiniMargin: TThostFtdcMoneyType,
    pub Royalty: TThostFtdcMoneyType,
    pub ExchFixedMargin: TThostFtdcMoneyType,
    pub ExchMiniMargin: TThostFtdcMoneyType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryOptionInstrTradeCostField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub InputPrice: TThostFtdcPriceType,
    pub UnderlyingPrice: TThostFtdcPriceType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryOptionInstrCommRateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcIndexPriceField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ClosePrice: TThostFtdcPriceType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInputExecOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExecOrderRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub Volume: TThostFtdcVolumeType,
    pub RequestID: TThostFtdcRequestIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub ActionType: TThostFtdcActionTypeType,
    pub PosiDirection: TThostFtdcPosiDirectionType,
    pub ReservePositionFlag: TThostFtdcExecOrderPositionFlagType,
    pub CloseFlag: TThostFtdcExecOrderCloseFlagType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInputExecOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExecOrderActionRef: TThostFtdcOrderActionRefType,
    pub ExecOrderRef: TThostFtdcOrderRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub UserID: TThostFtdcUserIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcExecOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExecOrderRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub Volume: TThostFtdcVolumeType,
    pub RequestID: TThostFtdcRequestIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub ActionType: TThostFtdcActionTypeType,
    pub PosiDirection: TThostFtdcPosiDirectionType,
    pub ReservePositionFlag: TThostFtdcExecOrderPositionFlagType,
    pub CloseFlag: TThostFtdcExecOrderCloseFlagType,
    pub ExecOrderLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    pub NotifySequence: TThostFtdcSequenceNoType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    pub InsertDate: TThostFtdcDateType,
    pub InsertTime: TThostFtdcTimeType,
    pub CancelTime: TThostFtdcTimeType,
    pub ExecResult: TThostFtdcExecResultType,
    pub ClearingPartID: TThostFtdcParticipantIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub ActiveUserID: TThostFtdcUserIDType,
    pub BrokerExecOrderSeq: TThostFtdcSequenceNoType,
    pub BranchID: TThostFtdcBranchIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub reserve3: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcExecOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExecOrderActionRef: TThostFtdcOrderActionRefType,
    pub ExecOrderRef: TThostFtdcOrderRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub ActionDate: TThostFtdcDateType,
    pub ActionTime: TThostFtdcTimeType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub ExecOrderLocalID: TThostFtdcOrderLocalIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    pub UserID: TThostFtdcUserIDType,
    pub ActionType: TThostFtdcActionTypeType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub BranchID: TThostFtdcBranchIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryExecOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    pub InsertTimeStart: TThostFtdcTimeType,
    pub InsertTimeEnd: TThostFtdcTimeType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcExchangeExecOrderField {
    pub Volume: TThostFtdcVolumeType,
    pub RequestID: TThostFtdcRequestIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub ActionType: TThostFtdcActionTypeType,
    pub PosiDirection: TThostFtdcPosiDirectionType,
    pub ReservePositionFlag: TThostFtdcExecOrderPositionFlagType,
    pub CloseFlag: TThostFtdcExecOrderCloseFlagType,
    pub ExecOrderLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    pub NotifySequence: TThostFtdcSequenceNoType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    pub InsertDate: TThostFtdcDateType,
    pub InsertTime: TThostFtdcTimeType,
    pub CancelTime: TThostFtdcTimeType,
    pub ExecResult: TThostFtdcExecResultType,
    pub ClearingPartID: TThostFtdcParticipantIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub BranchID: TThostFtdcBranchIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryExchangeExecOrderField {
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryExecOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcExchangeExecOrderActionField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub ActionDate: TThostFtdcDateType,
    pub ActionTime: TThostFtdcTimeType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub ExecOrderLocalID: TThostFtdcOrderLocalIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    pub UserID: TThostFtdcUserIDType,
    pub ActionType: TThostFtdcActionTypeType,
    pub BranchID: TThostFtdcBranchIDType,
    pub reserve1: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    pub Volume: TThostFtdcVolumeType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryExchangeExecOrderActionField {
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TraderID: TThostFtdcTraderIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcErrExecOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExecOrderRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub Volume: TThostFtdcVolumeType,
    pub RequestID: TThostFtdcRequestIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub ActionType: TThostFtdcActionTypeType,
    pub PosiDirection: TThostFtdcPosiDirectionType,
    pub ReservePositionFlag: TThostFtdcExecOrderPositionFlagType,
    pub CloseFlag: TThostFtdcExecOrderCloseFlagType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryErrExecOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcErrExecOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExecOrderActionRef: TThostFtdcOrderActionRefType,
    pub ExecOrderRef: TThostFtdcOrderRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub UserID: TThostFtdcUserIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryErrExecOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcOptionInstrTradingRightField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub Direction: TThostFtdcDirectionType,
    pub TradingRight: TThostFtdcTradingRightType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryOptionInstrTradingRightField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub Direction: TThostFtdcDirectionType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInputForQuoteField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ForQuoteRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcForQuoteField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ForQuoteRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub ForQuoteLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub InsertDate: TThostFtdcDateType,
    pub InsertTime: TThostFtdcTimeType,
    pub ForQuoteStatus: TThostFtdcForQuoteStatusType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub ActiveUserID: TThostFtdcUserIDType,
    pub BrokerForQutoSeq: TThostFtdcSequenceNoType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub reserve3: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryForQuoteField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InsertTimeStart: TThostFtdcTimeType,
    pub InsertTimeEnd: TThostFtdcTimeType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcExchangeForQuoteField {
    pub ForQuoteLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub InsertDate: TThostFtdcDateType,
    pub InsertTime: TThostFtdcTimeType,
    pub ForQuoteStatus: TThostFtdcForQuoteStatusType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryExchangeForQuoteField {
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInputQuoteField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub QuoteRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub AskPrice: TThostFtdcPriceType,
    pub BidPrice: TThostFtdcPriceType,
    pub AskVolume: TThostFtdcVolumeType,
    pub BidVolume: TThostFtdcVolumeType,
    pub RequestID: TThostFtdcRequestIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub AskOffsetFlag: TThostFtdcOffsetFlagType,
    pub BidOffsetFlag: TThostFtdcOffsetFlagType,
    pub AskHedgeFlag: TThostFtdcHedgeFlagType,
    pub BidHedgeFlag: TThostFtdcHedgeFlagType,
    pub AskOrderRef: TThostFtdcOrderRefType,
    pub BidOrderRef: TThostFtdcOrderRefType,
    pub ForQuoteSysID: TThostFtdcOrderSysIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub ReplaceSysID: TThostFtdcOrderSysIDType,
    pub TimeCondition: TThostFtdcTimeConditionType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInputQuoteActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub QuoteActionRef: TThostFtdcOrderActionRefType,
    pub QuoteRef: TThostFtdcOrderRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub UserID: TThostFtdcUserIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQuoteField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub QuoteRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub AskPrice: TThostFtdcPriceType,
    pub BidPrice: TThostFtdcPriceType,
    pub AskVolume: TThostFtdcVolumeType,
    pub BidVolume: TThostFtdcVolumeType,
    pub RequestID: TThostFtdcRequestIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub AskOffsetFlag: TThostFtdcOffsetFlagType,
    pub BidOffsetFlag: TThostFtdcOffsetFlagType,
    pub AskHedgeFlag: TThostFtdcHedgeFlagType,
    pub BidHedgeFlag: TThostFtdcHedgeFlagType,
    pub QuoteLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub NotifySequence: TThostFtdcSequenceNoType,
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    pub InsertDate: TThostFtdcDateType,
    pub InsertTime: TThostFtdcTimeType,
    pub CancelTime: TThostFtdcTimeType,
    pub QuoteStatus: TThostFtdcOrderStatusType,
    pub ClearingPartID: TThostFtdcParticipantIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub AskOrderSysID: TThostFtdcOrderSysIDType,
    pub BidOrderSysID: TThostFtdcOrderSysIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub ActiveUserID: TThostFtdcUserIDType,
    pub BrokerQuoteSeq: TThostFtdcSequenceNoType,
    pub AskOrderRef: TThostFtdcOrderRefType,
    pub BidOrderRef: TThostFtdcOrderRefType,
    pub ForQuoteSysID: TThostFtdcOrderSysIDType,
    pub BranchID: TThostFtdcBranchIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub reserve3: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub ReplaceSysID: TThostFtdcOrderSysIDType,
    pub TimeCondition: TThostFtdcTimeConditionType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQuoteActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub QuoteActionRef: TThostFtdcOrderActionRefType,
    pub QuoteRef: TThostFtdcOrderRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub ActionDate: TThostFtdcDateType,
    pub ActionTime: TThostFtdcTimeType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub QuoteLocalID: TThostFtdcOrderLocalIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    pub UserID: TThostFtdcUserIDType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub BranchID: TThostFtdcBranchIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryQuoteField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    pub InsertTimeStart: TThostFtdcTimeType,
    pub InsertTimeEnd: TThostFtdcTimeType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcExchangeQuoteField {
    pub AskPrice: TThostFtdcPriceType,
    pub BidPrice: TThostFtdcPriceType,
    pub AskVolume: TThostFtdcVolumeType,
    pub BidVolume: TThostFtdcVolumeType,
    pub RequestID: TThostFtdcRequestIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub AskOffsetFlag: TThostFtdcOffsetFlagType,
    pub BidOffsetFlag: TThostFtdcOffsetFlagType,
    pub AskHedgeFlag: TThostFtdcHedgeFlagType,
    pub BidHedgeFlag: TThostFtdcHedgeFlagType,
    pub QuoteLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub NotifySequence: TThostFtdcSequenceNoType,
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    pub InsertDate: TThostFtdcDateType,
    pub InsertTime: TThostFtdcTimeType,
    pub CancelTime: TThostFtdcTimeType,
    pub QuoteStatus: TThostFtdcOrderStatusType,
    pub ClearingPartID: TThostFtdcParticipantIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub AskOrderSysID: TThostFtdcOrderSysIDType,
    pub BidOrderSysID: TThostFtdcOrderSysIDType,
    pub ForQuoteSysID: TThostFtdcOrderSysIDType,
    pub BranchID: TThostFtdcBranchIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub TimeCondition: TThostFtdcTimeConditionType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryExchangeQuoteField {
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryQuoteActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcExchangeQuoteActionField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub ActionDate: TThostFtdcDateType,
    pub ActionTime: TThostFtdcTimeType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub QuoteLocalID: TThostFtdcOrderLocalIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    pub UserID: TThostFtdcUserIDType,
    pub reserve1: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryExchangeQuoteActionField {
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TraderID: TThostFtdcTraderIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcOptionInstrDeltaField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub Delta: TThostFtdcRatioType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcForQuoteRspField {
    pub TradingDay: TThostFtdcDateType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ForQuoteSysID: TThostFtdcOrderSysIDType,
    pub ForQuoteTime: TThostFtdcTimeType,
    pub ActionDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcStrikeOffsetField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub Offset: TThostFtdcMoneyType,
    pub OffsetType: TThostFtdcStrikeOffsetTypeType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryStrikeOffsetField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInputBatchOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub UserID: TThostFtdcUserIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub reserve1: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcBatchOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ActionDate: TThostFtdcDateType,
    pub ActionTime: TThostFtdcTimeType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    pub UserID: TThostFtdcUserIDType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub reserve1: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcExchangeBatchOrderActionField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ActionDate: TThostFtdcDateType,
    pub ActionTime: TThostFtdcTimeType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    pub UserID: TThostFtdcUserIDType,
    pub reserve1: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryBatchOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcCombInstrumentGuardField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub GuarantRatio: TThostFtdcRatioType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryCombInstrumentGuardField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInputCombActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub CombActionRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub Direction: TThostFtdcDirectionType,
    pub Volume: TThostFtdcVolumeType,
    pub CombDirection: TThostFtdcCombDirectionType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcCombActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub CombActionRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub Direction: TThostFtdcDirectionType,
    pub Volume: TThostFtdcVolumeType,
    pub CombDirection: TThostFtdcCombDirectionType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub ActionStatus: TThostFtdcOrderActionStatusType,
    pub NotifySequence: TThostFtdcSequenceNoType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub reserve3: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub ComTradeID: TThostFtdcTradeIDType,
    pub BranchID: TThostFtdcBranchIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryCombActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcExchangeCombActionField {
    pub Direction: TThostFtdcDirectionType,
    pub Volume: TThostFtdcVolumeType,
    pub CombDirection: TThostFtdcCombDirectionType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub ActionStatus: TThostFtdcOrderActionStatusType,
    pub NotifySequence: TThostFtdcSequenceNoType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub ComTradeID: TThostFtdcTradeIDType,
    pub BranchID: TThostFtdcBranchIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryExchangeCombActionField {
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcProductExchRateField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub QuoteCurrencyID: TThostFtdcCurrencyIDType,
    pub ExchangeRate: TThostFtdcExchangeRateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProductID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryProductExchRateField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProductID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryForQuoteParamField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcForQuoteParamField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub LastPrice: TThostFtdcPriceType,
    pub PriceInterval: TThostFtdcPriceType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcMMOptionInstrCommRateField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OpenRatioByMoney: TThostFtdcRatioType,
    pub OpenRatioByVolume: TThostFtdcRatioType,
    pub CloseRatioByMoney: TThostFtdcRatioType,
    pub CloseRatioByVolume: TThostFtdcRatioType,
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    pub StrikeRatioByMoney: TThostFtdcRatioType,
    pub StrikeRatioByVolume: TThostFtdcRatioType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryMMOptionInstrCommRateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcMMInstrumentCommissionRateField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OpenRatioByMoney: TThostFtdcRatioType,
    pub OpenRatioByVolume: TThostFtdcRatioType,
    pub CloseRatioByMoney: TThostFtdcRatioType,
    pub CloseRatioByVolume: TThostFtdcRatioType,
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryMMInstrumentCommissionRateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInstrumentOrderCommRateField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub OrderCommByVolume: TThostFtdcRatioType,
    pub OrderActionCommByVolume: TThostFtdcRatioType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub OrderCommByTrade: TThostFtdcRatioType,
    pub OrderActionCommByTrade: TThostFtdcRatioType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryInstrumentOrderCommRateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTradeParamField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub TradeParamID: TThostFtdcTradeParamIDType,
    pub TradeParamValue: TThostFtdcSettlementParamValueType,
    pub Memo: TThostFtdcMemoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInstrumentMarginRateULField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcFutureLimitPosiParamField {
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub SpecOpenVolume: TThostFtdcVolumeType,
    pub ArbiOpenVolume: TThostFtdcVolumeType,
    pub OpenVolume: TThostFtdcVolumeType,
    pub ProductID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcLoginForbiddenIPField {
    pub reserve1: TThostFtdcOldIPAddressType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcIPListField {
    pub reserve1: TThostFtdcOldIPAddressType,
    pub IsWhite: TThostFtdcBoolType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInputOptionSelfCloseField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub OptionSelfCloseRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub Volume: TThostFtdcVolumeType,
    pub RequestID: TThostFtdcRequestIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub OptSelfCloseFlag: TThostFtdcOptSelfCloseFlagType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInputOptionSelfCloseActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OptionSelfCloseActionRef: TThostFtdcOrderActionRefType,
    pub OptionSelfCloseRef: TThostFtdcOrderRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub UserID: TThostFtdcUserIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcOptionSelfCloseField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub OptionSelfCloseRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub Volume: TThostFtdcVolumeType,
    pub RequestID: TThostFtdcRequestIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub OptSelfCloseFlag: TThostFtdcOptSelfCloseFlagType,
    pub OptionSelfCloseLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    pub NotifySequence: TThostFtdcSequenceNoType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    pub InsertDate: TThostFtdcDateType,
    pub InsertTime: TThostFtdcTimeType,
    pub CancelTime: TThostFtdcTimeType,
    pub ExecResult: TThostFtdcExecResultType,
    pub ClearingPartID: TThostFtdcParticipantIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub ActiveUserID: TThostFtdcUserIDType,
    pub BrokerOptionSelfCloseSeq: TThostFtdcSequenceNoType,
    pub BranchID: TThostFtdcBranchIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub reserve3: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcOptionSelfCloseActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OptionSelfCloseActionRef: TThostFtdcOrderActionRefType,
    pub OptionSelfCloseRef: TThostFtdcOrderRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub ActionDate: TThostFtdcDateType,
    pub ActionTime: TThostFtdcTimeType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OptionSelfCloseLocalID: TThostFtdcOrderLocalIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    pub UserID: TThostFtdcUserIDType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub BranchID: TThostFtdcBranchIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryOptionSelfCloseField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    pub InsertTimeStart: TThostFtdcTimeType,
    pub InsertTimeEnd: TThostFtdcTimeType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcExchangeOptionSelfCloseField {
    pub Volume: TThostFtdcVolumeType,
    pub RequestID: TThostFtdcRequestIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub OptSelfCloseFlag: TThostFtdcOptSelfCloseFlagType,
    pub OptionSelfCloseLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    pub NotifySequence: TThostFtdcSequenceNoType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    pub InsertDate: TThostFtdcDateType,
    pub InsertTime: TThostFtdcTimeType,
    pub CancelTime: TThostFtdcTimeType,
    pub ExecResult: TThostFtdcExecResultType,
    pub ClearingPartID: TThostFtdcParticipantIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub BranchID: TThostFtdcBranchIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryOptionSelfCloseActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcExchangeOptionSelfCloseActionField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub ActionDate: TThostFtdcDateType,
    pub ActionTime: TThostFtdcTimeType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OptionSelfCloseLocalID: TThostFtdcOrderLocalIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    pub UserID: TThostFtdcUserIDType,
    pub BranchID: TThostFtdcBranchIDType,
    pub reserve1: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    pub OptSelfCloseFlag: TThostFtdcOptSelfCloseFlagType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDelaySwapField {
    pub DelaySwapSeqNo: TThostFtdcDepositSeqNoType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    pub FromAmount: TThostFtdcMoneyType,
    pub FromFrozenSwap: TThostFtdcMoneyType,
    pub FromRemainSwap: TThostFtdcMoneyType,
    pub ToCurrencyID: TThostFtdcCurrencyIDType,
    pub ToAmount: TThostFtdcMoneyType,
    pub IsManualSwap: TThostFtdcBoolType,
    pub IsAllRemainSetZero: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQrySyncDelaySwapField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub DelaySwapSeqNo: TThostFtdcDepositSeqNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInvestUnitField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InvestorUnitName: TThostFtdcPartyNameType,
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    pub CommModelID: TThostFtdcInvestorIDType,
    pub MarginModelID: TThostFtdcInvestorIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryInvestUnitField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSecAgentCheckModeField {
    pub InvestorID: TThostFtdcInvestorIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub BrokerSecAgentID: TThostFtdcAccountIDType,
    pub CheckSelfAccount: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSecAgentTradeInfoField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerSecAgentID: TThostFtdcAccountIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcMarketDataField {
    pub TradingDay: TThostFtdcDateType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    pub LastPrice: TThostFtdcPriceType,
    pub PreSettlementPrice: TThostFtdcPriceType,
    pub PreClosePrice: TThostFtdcPriceType,
    pub PreOpenInterest: TThostFtdcLargeVolumeType,
    pub OpenPrice: TThostFtdcPriceType,
    pub HighestPrice: TThostFtdcPriceType,
    pub LowestPrice: TThostFtdcPriceType,
    pub Volume: TThostFtdcVolumeType,
    pub Turnover: TThostFtdcMoneyType,
    pub OpenInterest: TThostFtdcLargeVolumeType,
    pub ClosePrice: TThostFtdcPriceType,
    pub SettlementPrice: TThostFtdcPriceType,
    pub UpperLimitPrice: TThostFtdcPriceType,
    pub LowerLimitPrice: TThostFtdcPriceType,
    pub PreDelta: TThostFtdcRatioType,
    pub CurrDelta: TThostFtdcRatioType,
    pub UpdateTime: TThostFtdcTimeType,
    pub UpdateMillisec: TThostFtdcMillisecType,
    pub ActionDay: TThostFtdcDateType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcMarketDataBaseField {
    pub TradingDay: TThostFtdcDateType,
    pub PreSettlementPrice: TThostFtdcPriceType,
    pub PreClosePrice: TThostFtdcPriceType,
    pub PreOpenInterest: TThostFtdcLargeVolumeType,
    pub PreDelta: TThostFtdcRatioType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcMarketDataStaticField {
    pub OpenPrice: TThostFtdcPriceType,
    pub HighestPrice: TThostFtdcPriceType,
    pub LowestPrice: TThostFtdcPriceType,
    pub ClosePrice: TThostFtdcPriceType,
    pub UpperLimitPrice: TThostFtdcPriceType,
    pub LowerLimitPrice: TThostFtdcPriceType,
    pub SettlementPrice: TThostFtdcPriceType,
    pub CurrDelta: TThostFtdcRatioType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcMarketDataLastMatchField {
    pub LastPrice: TThostFtdcPriceType,
    pub Volume: TThostFtdcVolumeType,
    pub Turnover: TThostFtdcMoneyType,
    pub OpenInterest: TThostFtdcLargeVolumeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcMarketDataBestPriceField {
    pub BidPrice1: TThostFtdcPriceType,
    pub BidVolume1: TThostFtdcVolumeType,
    pub AskPrice1: TThostFtdcPriceType,
    pub AskVolume1: TThostFtdcVolumeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcMarketDataBid23Field {
    pub BidPrice2: TThostFtdcPriceType,
    pub BidVolume2: TThostFtdcVolumeType,
    pub BidPrice3: TThostFtdcPriceType,
    pub BidVolume3: TThostFtdcVolumeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcMarketDataAsk23Field {
    pub AskPrice2: TThostFtdcPriceType,
    pub AskVolume2: TThostFtdcVolumeType,
    pub AskPrice3: TThostFtdcPriceType,
    pub AskVolume3: TThostFtdcVolumeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcMarketDataBid45Field {
    pub BidPrice4: TThostFtdcPriceType,
    pub BidVolume4: TThostFtdcVolumeType,
    pub BidPrice5: TThostFtdcPriceType,
    pub BidVolume5: TThostFtdcVolumeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcMarketDataAsk45Field {
    pub AskPrice4: TThostFtdcPriceType,
    pub AskVolume4: TThostFtdcVolumeType,
    pub AskPrice5: TThostFtdcPriceType,
    pub AskVolume5: TThostFtdcVolumeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcMarketDataUpdateTimeField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub UpdateTime: TThostFtdcTimeType,
    pub UpdateMillisec: TThostFtdcMillisecType,
    pub ActionDay: TThostFtdcDateType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcMarketDataBandingPriceField {
    pub BandingUpperPrice: TThostFtdcPriceType,
    pub BandingLowerPrice: TThostFtdcPriceType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcMarketDataExchangeField {
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSpecificInstrumentField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInstrumentStatusField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    pub SettlementGroupID: TThostFtdcSettlementGroupIDType,
    pub reserve2: TThostFtdcOldInstrumentIDType,
    pub InstrumentStatus: TThostFtdcInstrumentStatusType,
    pub TradingSegmentSN: TThostFtdcTradingSegmentSNType,
    pub EnterTime: TThostFtdcTimeType,
    pub EnterReason: TThostFtdcInstStatusEnterReasonType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryInstrumentStatusField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInvestorAccountField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcPositionProfitAlgorithmField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Algorithm: TThostFtdcAlgorithmType,
    pub Memo: TThostFtdcMemoType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcDiscountField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub Discount: TThostFtdcRatioType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryTransferBankField {
    pub BankID: TThostFtdcBankIDType,
    pub BankBrchID: TThostFtdcBankBrchIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTransferBankField {
    pub BankID: TThostFtdcBankIDType,
    pub BankBrchID: TThostFtdcBankBrchIDType,
    pub BankName: TThostFtdcBankNameType,
    pub IsActive: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryInvestorPositionDetailField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInvestorPositionDetailField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub Direction: TThostFtdcDirectionType,
    pub OpenDate: TThostFtdcDateType,
    pub TradeID: TThostFtdcTradeIDType,
    pub Volume: TThostFtdcVolumeType,
    pub OpenPrice: TThostFtdcPriceType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub TradeType: TThostFtdcTradeTypeType,
    pub reserve2: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub CloseProfitByDate: TThostFtdcMoneyType,
    pub CloseProfitByTrade: TThostFtdcMoneyType,
    pub PositionProfitByDate: TThostFtdcMoneyType,
    pub PositionProfitByTrade: TThostFtdcMoneyType,
    pub Margin: TThostFtdcMoneyType,
    pub ExchMargin: TThostFtdcMoneyType,
    pub MarginRateByMoney: TThostFtdcRatioType,
    pub MarginRateByVolume: TThostFtdcRatioType,
    pub LastSettlementPrice: TThostFtdcPriceType,
    pub SettlementPrice: TThostFtdcPriceType,
    pub CloseVolume: TThostFtdcVolumeType,
    pub CloseAmount: TThostFtdcMoneyType,
    pub TimeFirstVolume: TThostFtdcVolumeType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub SpecPosiType: TThostFtdcSpecPosiTypeType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTradingAccountPasswordField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcMDTraderOfferField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub Password: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub TraderConnectStatus: TThostFtdcTraderConnectStatusType,
    pub ConnectRequestDate: TThostFtdcDateType,
    pub ConnectRequestTime: TThostFtdcTimeType,
    pub LastReportDate: TThostFtdcDateType,
    pub LastReportTime: TThostFtdcTimeType,
    pub ConnectDate: TThostFtdcDateType,
    pub ConnectTime: TThostFtdcTimeType,
    pub StartDate: TThostFtdcDateType,
    pub StartTime: TThostFtdcTimeType,
    pub TradingDay: TThostFtdcDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub MaxTradeID: TThostFtdcTradeIDType,
    pub MaxOrderMessageReference: TThostFtdcReturnCodeType,
    pub OrderCancelAlg: TThostFtdcOrderCancelAlgType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryMDTraderOfferField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub TraderID: TThostFtdcTraderIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryNoticeField {
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcNoticeField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub Content: TThostFtdcContentType,
    pub SequenceLabel: TThostFtdcSequenceLabelType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcUserRightField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub UserRightType: TThostFtdcUserRightTypeType,
    pub IsForbidden: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQrySettlementInfoConfirmField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcLoadSettlementInfoField {
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcBrokerWithdrawAlgorithmField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub WithdrawAlgorithm: TThostFtdcAlgorithmType,
    pub UsingRatio: TThostFtdcRatioType,
    pub IncludeCloseProfit: TThostFtdcIncludeCloseProfitType,
    pub AllWithoutTrade: TThostFtdcAllWithoutTradeType,
    pub AvailIncludeCloseProfit: TThostFtdcIncludeCloseProfitType,
    pub IsBrokerUserEvent: TThostFtdcBoolType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub FundMortgageRatio: TThostFtdcRatioType,
    pub BalanceAlgorithm: TThostFtdcBalanceAlgorithmType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTradingAccountPasswordUpdateV1Field {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OldPassword: TThostFtdcPasswordType,
    pub NewPassword: TThostFtdcPasswordType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTradingAccountPasswordUpdateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub OldPassword: TThostFtdcPasswordType,
    pub NewPassword: TThostFtdcPasswordType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryCombinationLegField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub LegID: TThostFtdcLegIDType,
    pub reserve2: TThostFtdcOldInstrumentIDType,
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    pub LegInstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQrySyncStatusField {
    pub TradingDay: TThostFtdcDateType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcCombinationLegField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub LegID: TThostFtdcLegIDType,
    pub reserve2: TThostFtdcOldInstrumentIDType,
    pub Direction: TThostFtdcDirectionType,
    pub LegMultiple: TThostFtdcLegMultipleType,
    pub ImplyLevel: TThostFtdcImplyLevelType,
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    pub LegInstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncStatusField {
    pub TradingDay: TThostFtdcDateType,
    pub DataSyncStatus: TThostFtdcDataSyncStatusType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryLinkManField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcLinkManField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub PersonType: TThostFtdcPersonTypeType,
    pub IdentifiedCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub PersonName: TThostFtdcPartyNameType,
    pub Telephone: TThostFtdcTelephoneType,
    pub Address: TThostFtdcAddressType,
    pub ZipCode: TThostFtdcZipCodeType,
    pub Priority: TThostFtdcPriorityType,
    pub UOAZipCode: TThostFtdcUOAZipCodeType,
    pub PersonFullName: TThostFtdcInvestorFullNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryBrokerUserEventField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub UserEventType: TThostFtdcUserEventTypeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcBrokerUserEventField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub UserEventType: TThostFtdcUserEventTypeType,
    pub EventSequenceNo: TThostFtdcSequenceNoType,
    pub EventDate: TThostFtdcDateType,
    pub EventTime: TThostFtdcTimeType,
    pub UserEventInfo: TThostFtdcUserEventInfoType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
    pub TradingDay: TThostFtdcDateType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryContractBankField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBrchID: TThostFtdcBankBrchIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcContractBankField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBrchID: TThostFtdcBankBrchIDType,
    pub BankName: TThostFtdcBankNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInvestorPositionCombineDetailField {
    pub TradingDay: TThostFtdcDateType,
    pub OpenDate: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ComTradeID: TThostFtdcTradeIDType,
    pub TradeID: TThostFtdcTradeIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub Direction: TThostFtdcDirectionType,
    pub TotalAmt: TThostFtdcVolumeType,
    pub Margin: TThostFtdcMoneyType,
    pub ExchMargin: TThostFtdcMoneyType,
    pub MarginRateByMoney: TThostFtdcRatioType,
    pub MarginRateByVolume: TThostFtdcRatioType,
    pub LegID: TThostFtdcLegIDType,
    pub LegMultiple: TThostFtdcLegMultipleType,
    pub reserve2: TThostFtdcOldInstrumentIDType,
    pub TradeGroupID: TThostFtdcTradeGroupIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcParkedOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub OrderRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    pub Direction: TThostFtdcDirectionType,
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    pub LimitPrice: TThostFtdcPriceType,
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    pub TimeCondition: TThostFtdcTimeConditionType,
    pub GTDDate: TThostFtdcDateType,
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    pub MinVolume: TThostFtdcVolumeType,
    pub ContingentCondition: TThostFtdcContingentConditionType,
    pub StopPrice: TThostFtdcPriceType,
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    pub IsAutoSuspend: TThostFtdcBoolType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub RequestID: TThostFtdcRequestIDType,
    pub UserForceClose: TThostFtdcBoolType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParkedOrderID: TThostFtdcParkedOrderIDType,
    pub UserType: TThostFtdcUserTypeType,
    pub Status: TThostFtdcParkedOrderStatusType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub IsSwapOrder: TThostFtdcBoolType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcParkedOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    pub OrderRef: TThostFtdcOrderRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub LimitPrice: TThostFtdcPriceType,
    pub VolumeChange: TThostFtdcVolumeType,
    pub UserID: TThostFtdcUserIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ParkedOrderActionID: TThostFtdcParkedOrderActionIDType,
    pub UserType: TThostFtdcUserTypeType,
    pub Status: TThostFtdcParkedOrderStatusType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryParkedOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryParkedOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRemoveParkedOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ParkedOrderID: TThostFtdcParkedOrderIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRemoveParkedOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ParkedOrderActionID: TThostFtdcParkedOrderActionIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInvestorWithdrawAlgorithmField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub UsingRatio: TThostFtdcRatioType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub FundMortgageRatio: TThostFtdcRatioType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryInvestorPositionCombineDetailField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcMarketDataAveragePriceField {
    pub AveragePrice: TThostFtdcPriceType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcVerifyInvestorPasswordField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub Password: TThostFtdcPasswordType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcUserIPField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub reserve1: TThostFtdcOldIPAddressType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub IPMask: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTradingNoticeInfoField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub SendTime: TThostFtdcTimeType,
    pub FieldContent: TThostFtdcContentType,
    pub SequenceSeries: TThostFtdcSequenceSeriesType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTradingNoticeField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub SequenceSeries: TThostFtdcSequenceSeriesType,
    pub UserID: TThostFtdcUserIDType,
    pub SendTime: TThostFtdcTimeType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub FieldContent: TThostFtdcContentType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryTradingNoticeField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryErrOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcErrOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub OrderRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    pub Direction: TThostFtdcDirectionType,
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    pub LimitPrice: TThostFtdcPriceType,
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    pub TimeCondition: TThostFtdcTimeConditionType,
    pub GTDDate: TThostFtdcDateType,
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    pub MinVolume: TThostFtdcVolumeType,
    pub ContingentCondition: TThostFtdcContingentConditionType,
    pub StopPrice: TThostFtdcPriceType,
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    pub IsAutoSuspend: TThostFtdcBoolType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub RequestID: TThostFtdcRequestIDType,
    pub UserForceClose: TThostFtdcBoolType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub IsSwapOrder: TThostFtdcBoolType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcErrorConditionalOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub OrderRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    pub Direction: TThostFtdcDirectionType,
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    pub LimitPrice: TThostFtdcPriceType,
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    pub TimeCondition: TThostFtdcTimeConditionType,
    pub GTDDate: TThostFtdcDateType,
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    pub MinVolume: TThostFtdcVolumeType,
    pub ContingentCondition: TThostFtdcContingentConditionType,
    pub StopPrice: TThostFtdcPriceType,
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    pub IsAutoSuspend: TThostFtdcBoolType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub RequestID: TThostFtdcRequestIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    pub NotifySequence: TThostFtdcSequenceNoType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub OrderSource: TThostFtdcOrderSourceType,
    pub OrderStatus: TThostFtdcOrderStatusType,
    pub OrderType: TThostFtdcOrderTypeType,
    pub VolumeTraded: TThostFtdcVolumeType,
    pub VolumeTotal: TThostFtdcVolumeType,
    pub InsertDate: TThostFtdcDateType,
    pub InsertTime: TThostFtdcTimeType,
    pub ActiveTime: TThostFtdcTimeType,
    pub SuspendTime: TThostFtdcTimeType,
    pub UpdateTime: TThostFtdcTimeType,
    pub CancelTime: TThostFtdcTimeType,
    pub ActiveTraderID: TThostFtdcTraderIDType,
    pub ClearingPartID: TThostFtdcParticipantIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub UserForceClose: TThostFtdcBoolType,
    pub ActiveUserID: TThostFtdcUserIDType,
    pub BrokerOrderSeq: TThostFtdcSequenceNoType,
    pub RelativeOrderSysID: TThostFtdcOrderSysIDType,
    pub ZCETotalTradedVolume: TThostFtdcVolumeType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub IsSwapOrder: TThostFtdcBoolType,
    pub BranchID: TThostFtdcBranchIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub reserve3: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryErrOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcErrOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    pub OrderRef: TThostFtdcOrderRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub LimitPrice: TThostFtdcPriceType,
    pub VolumeChange: TThostFtdcVolumeType,
    pub ActionDate: TThostFtdcDateType,
    pub ActionTime: TThostFtdcTimeType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    pub UserID: TThostFtdcUserIDType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub BranchID: TThostFtdcBranchIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub reserve2: TThostFtdcOldIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryExchangeSequenceField {
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcExchangeSequenceField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub MarketStatus: TThostFtdcInstrumentStatusType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryMaxOrderVolumeWithPriceField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub Direction: TThostFtdcDirectionType,
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub MaxVolume: TThostFtdcVolumeType,
    pub Price: TThostFtdcPriceType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryBrokerTradingParamsField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub AccountID: TThostFtdcAccountIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcBrokerTradingParamsField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub MarginPriceType: TThostFtdcMarginPriceTypeType,
    pub Algorithm: TThostFtdcAlgorithmType,
    pub AvailIncludeCloseProfit: TThostFtdcIncludeCloseProfitType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub OptionRoyaltyPriceType: TThostFtdcOptionRoyaltyPriceTypeType,
    pub AccountID: TThostFtdcAccountIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryBrokerTradingAlgosField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcBrokerTradingAlgosField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub HandlePositionAlgoID: TThostFtdcHandlePositionAlgoIDType,
    pub FindMarginRateAlgoID: TThostFtdcFindMarginRateAlgoIDType,
    pub HandleTradingAccountAlgoID: TThostFtdcHandleTradingAccountAlgoIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQueryBrokerDepositField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcBrokerDepositField {
    pub TradingDay: TThostFtdcTradeDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub PreBalance: TThostFtdcMoneyType,
    pub CurrMargin: TThostFtdcMoneyType,
    pub CloseProfit: TThostFtdcMoneyType,
    pub Balance: TThostFtdcMoneyType,
    pub Deposit: TThostFtdcMoneyType,
    pub Withdraw: TThostFtdcMoneyType,
    pub Available: TThostFtdcMoneyType,
    pub Reserve: TThostFtdcMoneyType,
    pub FrozenMargin: TThostFtdcMoneyType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryCFMMCBrokerKeyField {
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcCFMMCBrokerKeyField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub CreateDate: TThostFtdcDateType,
    pub CreateTime: TThostFtdcTimeType,
    pub KeyID: TThostFtdcSequenceNoType,
    pub CurrentKey: TThostFtdcCFMMCKeyType,
    pub KeyKind: TThostFtdcCFMMCKeyKindType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcCFMMCTradingAccountKeyField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub KeyID: TThostFtdcSequenceNoType,
    pub CurrentKey: TThostFtdcCFMMCKeyType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryCFMMCTradingAccountKeyField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcBrokerUserOTPParamField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub OTPVendorsID: TThostFtdcOTPVendorsIDType,
    pub SerialNumber: TThostFtdcSerialNumberType,
    pub AuthKey: TThostFtdcAuthKeyType,
    pub LastDrift: TThostFtdcLastDriftType,
    pub LastSuccess: TThostFtdcLastSuccessType,
    pub OTPType: TThostFtdcOTPTypeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcManualSyncBrokerUserOTPField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub OTPType: TThostFtdcOTPTypeType,
    pub FirstOTP: TThostFtdcPasswordType,
    pub SecondOTP: TThostFtdcPasswordType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcCommRateModelField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub CommModelID: TThostFtdcInvestorIDType,
    pub CommModelName: TThostFtdcCommModelNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryCommRateModelField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub CommModelID: TThostFtdcInvestorIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcMarginModelField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub MarginModelID: TThostFtdcInvestorIDType,
    pub MarginModelName: TThostFtdcCommModelNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryMarginModelField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub MarginModelID: TThostFtdcInvestorIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcEWarrantOffsetField {
    pub TradingDay: TThostFtdcTradeDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub Direction: TThostFtdcDirectionType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub Volume: TThostFtdcVolumeType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryEWarrantOffsetField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryInvestorProductGroupMarginField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub ProductGroupID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInvestorProductGroupMarginField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub FrozenMargin: TThostFtdcMoneyType,
    pub LongFrozenMargin: TThostFtdcMoneyType,
    pub ShortFrozenMargin: TThostFtdcMoneyType,
    pub UseMargin: TThostFtdcMoneyType,
    pub LongUseMargin: TThostFtdcMoneyType,
    pub ShortUseMargin: TThostFtdcMoneyType,
    pub ExchMargin: TThostFtdcMoneyType,
    pub LongExchMargin: TThostFtdcMoneyType,
    pub ShortExchMargin: TThostFtdcMoneyType,
    pub CloseProfit: TThostFtdcMoneyType,
    pub FrozenCommission: TThostFtdcMoneyType,
    pub Commission: TThostFtdcMoneyType,
    pub FrozenCash: TThostFtdcMoneyType,
    pub CashIn: TThostFtdcMoneyType,
    pub PositionProfit: TThostFtdcMoneyType,
    pub OffsetAmount: TThostFtdcMoneyType,
    pub LongOffsetAmount: TThostFtdcMoneyType,
    pub ShortOffsetAmount: TThostFtdcMoneyType,
    pub ExchOffsetAmount: TThostFtdcMoneyType,
    pub LongExchOffsetAmount: TThostFtdcMoneyType,
    pub ShortExchOffsetAmount: TThostFtdcMoneyType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub ProductGroupID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQueryCFMMCTradingAccountTokenField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcCFMMCTradingAccountTokenField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub KeyID: TThostFtdcSequenceNoType,
    pub Token: TThostFtdcCFMMCTokenType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryProductGroupField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProductID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcProductGroupField {
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub reserve2: TThostFtdcOldInstrumentIDType,
    pub ProductID: TThostFtdcInstrumentIDType,
    pub ProductGroupID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcBulletinField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TradingDay: TThostFtdcDateType,
    pub BulletinID: TThostFtdcBulletinIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub NewsType: TThostFtdcNewsTypeType,
    pub NewsUrgency: TThostFtdcNewsUrgencyType,
    pub SendTime: TThostFtdcTimeType,
    pub Abstract: TThostFtdcAbstractType,
    pub ComeFrom: TThostFtdcComeFromType,
    pub Content: TThostFtdcContentType,
    pub URLLink: TThostFtdcURLLinkType,
    pub MarketID: TThostFtdcMarketIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryBulletinField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub BulletinID: TThostFtdcBulletinIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub NewsType: TThostFtdcNewsTypeType,
    pub NewsUrgency: TThostFtdcNewsUrgencyType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcMulticastInstrumentField {
    pub TopicID: TThostFtdcInstallIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InstrumentNo: TThostFtdcInstallIDType,
    pub CodePrice: TThostFtdcPriceType,
    pub VolumeMultiple: TThostFtdcVolumeMultipleType,
    pub PriceTick: TThostFtdcPriceType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryMulticastInstrumentField {
    pub TopicID: TThostFtdcInstallIDType,
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcAppIDAuthAssignField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AppID: TThostFtdcAppIDType,
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReqOpenAccountField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub Gender: TThostFtdcGenderType,
    pub CountryCode: TThostFtdcCountryCodeType,
    pub CustType: TThostFtdcCustTypeType,
    pub Address: TThostFtdcAddressType,
    pub ZipCode: TThostFtdcZipCodeType,
    pub Telephone: TThostFtdcTelephoneType,
    pub MobilePhone: TThostFtdcMobilePhoneType,
    pub Fax: TThostFtdcFaxType,
    pub EMail: TThostFtdcEMailType,
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub CashExchangeCode: TThostFtdcCashExchangeCodeType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankSecuAcc: TThostFtdcBankAccountType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub OperNo: TThostFtdcOperNoType,
    pub TID: TThostFtdcTIDType,
    pub UserID: TThostFtdcUserIDType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReqCancelAccountField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub Gender: TThostFtdcGenderType,
    pub CountryCode: TThostFtdcCountryCodeType,
    pub CustType: TThostFtdcCustTypeType,
    pub Address: TThostFtdcAddressType,
    pub ZipCode: TThostFtdcZipCodeType,
    pub Telephone: TThostFtdcTelephoneType,
    pub MobilePhone: TThostFtdcMobilePhoneType,
    pub Fax: TThostFtdcFaxType,
    pub EMail: TThostFtdcEMailType,
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub CashExchangeCode: TThostFtdcCashExchangeCodeType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankSecuAcc: TThostFtdcBankAccountType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub OperNo: TThostFtdcOperNoType,
    pub TID: TThostFtdcTIDType,
    pub UserID: TThostFtdcUserIDType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReqChangeAccountField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub Gender: TThostFtdcGenderType,
    pub CountryCode: TThostFtdcCountryCodeType,
    pub CustType: TThostFtdcCustTypeType,
    pub Address: TThostFtdcAddressType,
    pub ZipCode: TThostFtdcZipCodeType,
    pub Telephone: TThostFtdcTelephoneType,
    pub MobilePhone: TThostFtdcMobilePhoneType,
    pub Fax: TThostFtdcFaxType,
    pub EMail: TThostFtdcEMailType,
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub NewBankAccount: TThostFtdcBankAccountType,
    pub NewBankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub InstallID: TThostFtdcInstallIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub TID: TThostFtdcTIDType,
    pub Digest: TThostFtdcDigestType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReqTransferField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CustType: TThostFtdcCustTypeType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub FutureSerial: TThostFtdcFutureSerialType,
    pub UserID: TThostFtdcUserIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub TradeAmount: TThostFtdcTradeAmountType,
    pub FutureFetchAmount: TThostFtdcTradeAmountType,
    pub FeePayFlag: TThostFtdcFeePayFlagType,
    pub CustFee: TThostFtdcCustFeeType,
    pub BrokerFee: TThostFtdcFutureFeeType,
    pub Message: TThostFtdcAddInfoType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankSecuAcc: TThostFtdcBankAccountType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub TransferStatus: TThostFtdcTransferStatusType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRspTransferField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CustType: TThostFtdcCustTypeType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub FutureSerial: TThostFtdcFutureSerialType,
    pub UserID: TThostFtdcUserIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub TradeAmount: TThostFtdcTradeAmountType,
    pub FutureFetchAmount: TThostFtdcTradeAmountType,
    pub FeePayFlag: TThostFtdcFeePayFlagType,
    pub CustFee: TThostFtdcCustFeeType,
    pub BrokerFee: TThostFtdcFutureFeeType,
    pub Message: TThostFtdcAddInfoType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankSecuAcc: TThostFtdcBankAccountType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub TransferStatus: TThostFtdcTransferStatusType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReqRepealField {
    pub RepealTimeInterval: TThostFtdcRepealTimeIntervalType,
    pub RepealedTimes: TThostFtdcRepealedTimesType,
    pub BankRepealFlag: TThostFtdcBankRepealFlagType,
    pub BrokerRepealFlag: TThostFtdcBrokerRepealFlagType,
    pub PlateRepealSerial: TThostFtdcPlateSerialType,
    pub BankRepealSerial: TThostFtdcBankSerialType,
    pub FutureRepealSerial: TThostFtdcFutureSerialType,
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CustType: TThostFtdcCustTypeType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub FutureSerial: TThostFtdcFutureSerialType,
    pub UserID: TThostFtdcUserIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub TradeAmount: TThostFtdcTradeAmountType,
    pub FutureFetchAmount: TThostFtdcTradeAmountType,
    pub FeePayFlag: TThostFtdcFeePayFlagType,
    pub CustFee: TThostFtdcCustFeeType,
    pub BrokerFee: TThostFtdcFutureFeeType,
    pub Message: TThostFtdcAddInfoType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankSecuAcc: TThostFtdcBankAccountType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub TransferStatus: TThostFtdcTransferStatusType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRspRepealField {
    pub RepealTimeInterval: TThostFtdcRepealTimeIntervalType,
    pub RepealedTimes: TThostFtdcRepealedTimesType,
    pub BankRepealFlag: TThostFtdcBankRepealFlagType,
    pub BrokerRepealFlag: TThostFtdcBrokerRepealFlagType,
    pub PlateRepealSerial: TThostFtdcPlateSerialType,
    pub BankRepealSerial: TThostFtdcBankSerialType,
    pub FutureRepealSerial: TThostFtdcFutureSerialType,
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CustType: TThostFtdcCustTypeType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub FutureSerial: TThostFtdcFutureSerialType,
    pub UserID: TThostFtdcUserIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub TradeAmount: TThostFtdcTradeAmountType,
    pub FutureFetchAmount: TThostFtdcTradeAmountType,
    pub FeePayFlag: TThostFtdcFeePayFlagType,
    pub CustFee: TThostFtdcCustFeeType,
    pub BrokerFee: TThostFtdcFutureFeeType,
    pub Message: TThostFtdcAddInfoType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankSecuAcc: TThostFtdcBankAccountType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub TransferStatus: TThostFtdcTransferStatusType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReqQueryAccountField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CustType: TThostFtdcCustTypeType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub FutureSerial: TThostFtdcFutureSerialType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankSecuAcc: TThostFtdcBankAccountType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRspQueryAccountField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CustType: TThostFtdcCustTypeType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub FutureSerial: TThostFtdcFutureSerialType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankSecuAcc: TThostFtdcBankAccountType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub BankUseAmount: TThostFtdcTradeAmountType,
    pub BankFetchAmount: TThostFtdcTradeAmountType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcFutureSignIOField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Digest: TThostFtdcDigestType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRspFutureSignInField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Digest: TThostFtdcDigestType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub PinKey: TThostFtdcPasswordKeyType,
    pub MacKey: TThostFtdcPasswordKeyType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReqFutureSignOutField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Digest: TThostFtdcDigestType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRspFutureSignOutField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Digest: TThostFtdcDigestType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReqQueryTradeResultBySerialField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub Reference: TThostFtdcSerialType,
    pub RefrenceIssureType: TThostFtdcInstitutionTypeType,
    pub RefrenceIssure: TThostFtdcOrganCodeType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CustType: TThostFtdcCustTypeType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub TradeAmount: TThostFtdcTradeAmountType,
    pub Digest: TThostFtdcDigestType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRspQueryTradeResultBySerialField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub Reference: TThostFtdcSerialType,
    pub RefrenceIssureType: TThostFtdcInstitutionTypeType,
    pub RefrenceIssure: TThostFtdcOrganCodeType,
    pub OriginReturnCode: TThostFtdcReturnCodeType,
    pub OriginDescrInfoForReturnCode: TThostFtdcDescrInfoForReturnCodeType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub TradeAmount: TThostFtdcTradeAmountType,
    pub Digest: TThostFtdcDigestType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReqDayEndFileReadyField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub FileBusinessCode: TThostFtdcFileBusinessCodeType,
    pub Digest: TThostFtdcDigestType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReturnResultField {
    pub ReturnCode: TThostFtdcReturnCodeType,
    pub DescrInfoForReturnCode: TThostFtdcDescrInfoForReturnCodeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcVerifyFuturePasswordField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub TID: TThostFtdcTIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcVerifyCustInfoField {
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CustType: TThostFtdcCustTypeType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcVerifyFuturePasswordAndCustInfoField {
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CustType: TThostFtdcCustTypeType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcDepositResultInformField {
    pub DepositSeqNo: TThostFtdcDepositSeqNoType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub Deposit: TThostFtdcMoneyType,
    pub RequestID: TThostFtdcRequestIDType,
    pub ReturnCode: TThostFtdcReturnCodeType,
    pub DescrInfoForReturnCode: TThostFtdcDescrInfoForReturnCodeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReqSyncKeyField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Message: TThostFtdcAddInfoType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRspSyncKeyField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Message: TThostFtdcAddInfoType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcNotifyQueryAccountField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CustType: TThostFtdcCustTypeType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub FutureSerial: TThostFtdcFutureSerialType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankSecuAcc: TThostFtdcBankAccountType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub BankUseAmount: TThostFtdcTradeAmountType,
    pub BankFetchAmount: TThostFtdcTradeAmountType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTransferSerialField {
    pub PlateSerial: TThostFtdcPlateSerialType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradingDay: TThostFtdcDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub TradeCode: TThostFtdcTradeCodeType,
    pub SessionID: TThostFtdcSessionIDType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub FutureAccType: TThostFtdcFutureAccTypeType,
    pub AccountID: TThostFtdcAccountIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub FutureSerial: TThostFtdcFutureSerialType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub TradeAmount: TThostFtdcTradeAmountType,
    pub CustFee: TThostFtdcCustFeeType,
    pub BrokerFee: TThostFtdcFutureFeeType,
    pub AvailabilityFlag: TThostFtdcAvailabilityFlagType,
    pub OperatorCode: TThostFtdcOperatorCodeType,
    pub BankNewAccount: TThostFtdcBankAccountType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryTransferSerialField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub BankID: TThostFtdcBankIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcNotifyFutureSignInField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Digest: TThostFtdcDigestType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub PinKey: TThostFtdcPasswordKeyType,
    pub MacKey: TThostFtdcPasswordKeyType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcNotifyFutureSignOutField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Digest: TThostFtdcDigestType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcNotifySyncKeyField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Message: TThostFtdcAddInfoType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryAccountregisterField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcAccountregisterField {
    pub TradeDay: TThostFtdcTradeDateType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub OpenOrDestroy: TThostFtdcOpenOrDestroyType,
    pub RegDate: TThostFtdcTradeDateType,
    pub OutDate: TThostFtdcTradeDateType,
    pub TID: TThostFtdcTIDType,
    pub CustType: TThostFtdcCustTypeType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcOpenAccountField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub Gender: TThostFtdcGenderType,
    pub CountryCode: TThostFtdcCountryCodeType,
    pub CustType: TThostFtdcCustTypeType,
    pub Address: TThostFtdcAddressType,
    pub ZipCode: TThostFtdcZipCodeType,
    pub Telephone: TThostFtdcTelephoneType,
    pub MobilePhone: TThostFtdcMobilePhoneType,
    pub Fax: TThostFtdcFaxType,
    pub EMail: TThostFtdcEMailType,
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub CashExchangeCode: TThostFtdcCashExchangeCodeType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankSecuAcc: TThostFtdcBankAccountType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub OperNo: TThostFtdcOperNoType,
    pub TID: TThostFtdcTIDType,
    pub UserID: TThostFtdcUserIDType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcCancelAccountField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub Gender: TThostFtdcGenderType,
    pub CountryCode: TThostFtdcCountryCodeType,
    pub CustType: TThostFtdcCustTypeType,
    pub Address: TThostFtdcAddressType,
    pub ZipCode: TThostFtdcZipCodeType,
    pub Telephone: TThostFtdcTelephoneType,
    pub MobilePhone: TThostFtdcMobilePhoneType,
    pub Fax: TThostFtdcFaxType,
    pub EMail: TThostFtdcEMailType,
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub CashExchangeCode: TThostFtdcCashExchangeCodeType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankSecuAcc: TThostFtdcBankAccountType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub OperNo: TThostFtdcOperNoType,
    pub TID: TThostFtdcTIDType,
    pub UserID: TThostFtdcUserIDType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcChangeAccountField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub Gender: TThostFtdcGenderType,
    pub CountryCode: TThostFtdcCountryCodeType,
    pub CustType: TThostFtdcCustTypeType,
    pub Address: TThostFtdcAddressType,
    pub ZipCode: TThostFtdcZipCodeType,
    pub Telephone: TThostFtdcTelephoneType,
    pub MobilePhone: TThostFtdcMobilePhoneType,
    pub Fax: TThostFtdcFaxType,
    pub EMail: TThostFtdcEMailType,
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub NewBankAccount: TThostFtdcBankAccountType,
    pub NewBankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub InstallID: TThostFtdcInstallIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub TID: TThostFtdcTIDType,
    pub Digest: TThostFtdcDigestType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSecAgentACIDMapField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub BrokerSecAgentID: TThostFtdcAccountIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQrySecAgentACIDMapField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcUserRightsAssignField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcBrokerUserRightAssignField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
    pub Tradeable: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcDRTransferField {
    pub OrigDRIdentityID: TThostFtdcDRIdentityIDType,
    pub DestDRIdentityID: TThostFtdcDRIdentityIDType,
    pub OrigBrokerID: TThostFtdcBrokerIDType,
    pub DestBrokerID: TThostFtdcBrokerIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcFensUserInfoField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub LoginMode: TThostFtdcLoginModeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcCurrTransferIdentityField {
    pub IdentityID: TThostFtdcDRIdentityIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcLoginForbiddenUserField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub reserve1: TThostFtdcOldIPAddressType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryLoginForbiddenUserField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTradingAccountReserveField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Reserve: TThostFtdcMoneyType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryLoginForbiddenIPField {
    pub reserve1: TThostFtdcOldIPAddressType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryIPListField {
    pub reserve1: TThostFtdcOldIPAddressType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryUserRightsAssignField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReserveOpenAccountConfirmField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcLongIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub Gender: TThostFtdcGenderType,
    pub CountryCode: TThostFtdcCountryCodeType,
    pub CustType: TThostFtdcCustTypeType,
    pub Address: TThostFtdcAddressType,
    pub ZipCode: TThostFtdcZipCodeType,
    pub Telephone: TThostFtdcTelephoneType,
    pub MobilePhone: TThostFtdcMobilePhoneType,
    pub Fax: TThostFtdcFaxType,
    pub EMail: TThostFtdcEMailType,
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub TID: TThostFtdcTIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub BankReserveOpenSeq: TThostFtdcBankSerialType,
    pub BookDate: TThostFtdcTradeDateType,
    pub BookPsw: TThostFtdcPasswordType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReserveOpenAccountField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcLongIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub Gender: TThostFtdcGenderType,
    pub CountryCode: TThostFtdcCountryCodeType,
    pub CustType: TThostFtdcCustTypeType,
    pub Address: TThostFtdcAddressType,
    pub ZipCode: TThostFtdcZipCodeType,
    pub Telephone: TThostFtdcTelephoneType,
    pub MobilePhone: TThostFtdcMobilePhoneType,
    pub Fax: TThostFtdcFaxType,
    pub EMail: TThostFtdcEMailType,
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub TID: TThostFtdcTIDType,
    pub ReserveOpenAccStas: TThostFtdcReserveOpenAccStasType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcAccountPropertyField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub BankID: TThostFtdcBankIDType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub OpenName: TThostFtdcInvestorFullNameType,
    pub OpenBank: TThostFtdcOpenBankType,
    pub IsActive: TThostFtdcBoolType,
    pub AccountSourceType: TThostFtdcAccountSourceTypeType,
    pub OpenDate: TThostFtdcDateType,
    pub CancelDate: TThostFtdcDateType,
    pub OperatorID: TThostFtdcOperatorIDType,
    pub OperateDate: TThostFtdcDateType,
    pub OperateTime: TThostFtdcTimeType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryCurrDRIdentityField {
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcCurrDRIdentityField {
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQrySecAgentCheckModeField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQrySecAgentTradeInfoField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerSecAgentID: TThostFtdcAccountIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReqUserAuthMethodField {
    pub TradingDay: TThostFtdcDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRspUserAuthMethodField {
    pub UsableAuthMethod: TThostFtdcCurrentAuthMethodType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReqGenUserCaptchaField {
    pub TradingDay: TThostFtdcDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRspGenUserCaptchaField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub CaptchaInfoLen: TThostFtdcCaptchaInfoLenType,
    pub CaptchaInfo: TThostFtdcCaptchaInfoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReqGenUserTextField {
    pub TradingDay: TThostFtdcDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRspGenUserTextField {
    pub UserTextSeq: TThostFtdcUserTextSeqType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReqUserLoginWithCaptchaField {
    pub TradingDay: TThostFtdcDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Password: TThostFtdcPasswordType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub reserve1: TThostFtdcOldIPAddressType,
    pub LoginRemark: TThostFtdcLoginRemarkType,
    pub Captcha: TThostFtdcPasswordType,
    pub ClientIPPort: TThostFtdcIPPortType,
    pub ClientIPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReqUserLoginWithTextField {
    pub TradingDay: TThostFtdcDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Password: TThostFtdcPasswordType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub reserve1: TThostFtdcOldIPAddressType,
    pub LoginRemark: TThostFtdcLoginRemarkType,
    pub Text: TThostFtdcPasswordType,
    pub ClientIPPort: TThostFtdcIPPortType,
    pub ClientIPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReqUserLoginWithOTPField {
    pub TradingDay: TThostFtdcDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Password: TThostFtdcPasswordType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub reserve1: TThostFtdcOldIPAddressType,
    pub LoginRemark: TThostFtdcLoginRemarkType,
    pub OTPPassword: TThostFtdcPasswordType,
    pub ClientIPPort: TThostFtdcIPPortType,
    pub ClientIPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReqApiHandshakeField {
    pub CryptoKeyVersion: TThostFtdcCryptoKeyVersionType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRspApiHandshakeField {
    pub FrontHandshakeDataLen: TThostFtdcHandshakeDataLenType,
    pub FrontHandshakeData: TThostFtdcHandshakeDataType,
    pub IsApiAuthEnabled: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReqVerifyApiKeyField {
    pub ApiHandshakeDataLen: TThostFtdcHandshakeDataLenType,
    pub ApiHandshakeData: TThostFtdcHandshakeDataType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcDepartmentUserField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub InvestorRange: TThostFtdcDepartmentRangeType,
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQueryFreqField {
    pub QueryFreq: TThostFtdcQueryFreqType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcAuthForbiddenIPField {
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryAuthForbiddenIPField {
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDelaySwapFrozenField {
    pub DelaySwapSeqNo: TThostFtdcDepositSeqNoType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    pub FromRemainSwap: TThostFtdcMoneyType,
    pub IsManualSwap: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcUserSystemInfoField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub ClientSystemInfoLen: TThostFtdcSystemInfoLenType,
    pub ClientSystemInfo: TThostFtdcClientSystemInfoType,
    pub reserve1: TThostFtdcOldIPAddressType,
    pub ClientIPPort: TThostFtdcIPPortType,
    pub ClientLoginTime: TThostFtdcTimeType,
    pub ClientAppID: TThostFtdcAppIDType,
    pub ClientPublicIP: TThostFtdcIPAddressType,
    pub ClientLoginRemark: TThostFtdcClientLoginRemarkType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcAuthUserIDField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AppID: TThostFtdcAppIDType,
    pub UserID: TThostFtdcUserIDType,
    pub AuthType: TThostFtdcAuthTypeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcAuthIPField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AppID: TThostFtdcAppIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryClassifiedInstrumentField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub ProductID: TThostFtdcInstrumentIDType,
    pub TradingType: TThostFtdcTradingTypeType,
    pub ClassType: TThostFtdcClassTypeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryCombPromotionParamField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcCombPromotionParamField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    pub Xparameter: TThostFtdcDiscountRatioType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcReqUserLoginSCField {
    pub TradingDay: TThostFtdcDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Password: TThostFtdcPasswordType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub OneTimePassword: TThostFtdcPasswordType,
    pub ClientIPAddress: TThostFtdcIPAddressType,
    pub LoginRemark: TThostFtdcLoginRemarkType,
    pub ClientIPPort: TThostFtdcIPPortType,
    pub AuthCode: TThostFtdcAuthCodeType,
    pub AppID: TThostFtdcAppIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryRiskSettleInvstPositionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryRiskSettleProductStatusField {
    pub ProductID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRiskSettleInvstPositionField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub PosiDirection: TThostFtdcPosiDirectionType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub PositionDate: TThostFtdcPositionDateType,
    pub YdPosition: TThostFtdcVolumeType,
    pub Position: TThostFtdcVolumeType,
    pub LongFrozen: TThostFtdcVolumeType,
    pub ShortFrozen: TThostFtdcVolumeType,
    pub LongFrozenAmount: TThostFtdcMoneyType,
    pub ShortFrozenAmount: TThostFtdcMoneyType,
    pub OpenVolume: TThostFtdcVolumeType,
    pub CloseVolume: TThostFtdcVolumeType,
    pub OpenAmount: TThostFtdcMoneyType,
    pub CloseAmount: TThostFtdcMoneyType,
    pub PositionCost: TThostFtdcMoneyType,
    pub PreMargin: TThostFtdcMoneyType,
    pub UseMargin: TThostFtdcMoneyType,
    pub FrozenMargin: TThostFtdcMoneyType,
    pub FrozenCash: TThostFtdcMoneyType,
    pub FrozenCommission: TThostFtdcMoneyType,
    pub CashIn: TThostFtdcMoneyType,
    pub Commission: TThostFtdcMoneyType,
    pub CloseProfit: TThostFtdcMoneyType,
    pub PositionProfit: TThostFtdcMoneyType,
    pub PreSettlementPrice: TThostFtdcPriceType,
    pub SettlementPrice: TThostFtdcPriceType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub OpenCost: TThostFtdcMoneyType,
    pub ExchangeMargin: TThostFtdcMoneyType,
    pub CombPosition: TThostFtdcVolumeType,
    pub CombLongFrozen: TThostFtdcVolumeType,
    pub CombShortFrozen: TThostFtdcVolumeType,
    pub CloseProfitByDate: TThostFtdcMoneyType,
    pub CloseProfitByTrade: TThostFtdcMoneyType,
    pub TodayPosition: TThostFtdcVolumeType,
    pub MarginRateByMoney: TThostFtdcRatioType,
    pub MarginRateByVolume: TThostFtdcRatioType,
    pub StrikeFrozen: TThostFtdcVolumeType,
    pub StrikeFrozenAmount: TThostFtdcMoneyType,
    pub AbandonFrozen: TThostFtdcVolumeType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub YdStrikeFrozen: TThostFtdcVolumeType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub PositionCostOffset: TThostFtdcMoneyType,
    pub TasPosition: TThostFtdcVolumeType,
    pub TasPositionCost: TThostFtdcMoneyType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRiskSettleProductStatusField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProductID: TThostFtdcInstrumentIDType,
    pub ProductStatus: TThostFtdcProductStatusType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaInfoField {
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
    pub SyncDeltaStatus: TThostFtdcSyncDeltaStatusType,
    pub SyncDescription: TThostFtdcSyncDescriptionType,
    pub IsOnlyTrdDelta: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaProductStatusField {
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProductID: TThostFtdcInstrumentIDType,
    pub ProductStatus: TThostFtdcProductStatusType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaInvstPosDtlField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub Direction: TThostFtdcDirectionType,
    pub OpenDate: TThostFtdcDateType,
    pub TradeID: TThostFtdcTradeIDType,
    pub Volume: TThostFtdcVolumeType,
    pub OpenPrice: TThostFtdcPriceType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub TradeType: TThostFtdcTradeTypeType,
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub CloseProfitByDate: TThostFtdcMoneyType,
    pub CloseProfitByTrade: TThostFtdcMoneyType,
    pub PositionProfitByDate: TThostFtdcMoneyType,
    pub PositionProfitByTrade: TThostFtdcMoneyType,
    pub Margin: TThostFtdcMoneyType,
    pub ExchMargin: TThostFtdcMoneyType,
    pub MarginRateByMoney: TThostFtdcRatioType,
    pub MarginRateByVolume: TThostFtdcRatioType,
    pub LastSettlementPrice: TThostFtdcPriceType,
    pub SettlementPrice: TThostFtdcPriceType,
    pub CloseVolume: TThostFtdcVolumeType,
    pub CloseAmount: TThostFtdcMoneyType,
    pub TimeFirstVolume: TThostFtdcVolumeType,
    pub SpecPosiType: TThostFtdcSpecPosiTypeType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaInvstPosCombDtlField {
    pub TradingDay: TThostFtdcDateType,
    pub OpenDate: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ComTradeID: TThostFtdcTradeIDType,
    pub TradeID: TThostFtdcTradeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub Direction: TThostFtdcDirectionType,
    pub TotalAmt: TThostFtdcVolumeType,
    pub Margin: TThostFtdcMoneyType,
    pub ExchMargin: TThostFtdcMoneyType,
    pub MarginRateByMoney: TThostFtdcRatioType,
    pub MarginRateByVolume: TThostFtdcRatioType,
    pub LegID: TThostFtdcLegIDType,
    pub LegMultiple: TThostFtdcLegMultipleType,
    pub TradeGroupID: TThostFtdcTradeGroupIDType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaTradingAccountField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub PreMortgage: TThostFtdcMoneyType,
    pub PreCredit: TThostFtdcMoneyType,
    pub PreDeposit: TThostFtdcMoneyType,
    pub PreBalance: TThostFtdcMoneyType,
    pub PreMargin: TThostFtdcMoneyType,
    pub InterestBase: TThostFtdcMoneyType,
    pub Interest: TThostFtdcMoneyType,
    pub Deposit: TThostFtdcMoneyType,
    pub Withdraw: TThostFtdcMoneyType,
    pub FrozenMargin: TThostFtdcMoneyType,
    pub FrozenCash: TThostFtdcMoneyType,
    pub FrozenCommission: TThostFtdcMoneyType,
    pub CurrMargin: TThostFtdcMoneyType,
    pub CashIn: TThostFtdcMoneyType,
    pub Commission: TThostFtdcMoneyType,
    pub CloseProfit: TThostFtdcMoneyType,
    pub PositionProfit: TThostFtdcMoneyType,
    pub Balance: TThostFtdcMoneyType,
    pub Available: TThostFtdcMoneyType,
    pub WithdrawQuota: TThostFtdcMoneyType,
    pub Reserve: TThostFtdcMoneyType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub Credit: TThostFtdcMoneyType,
    pub Mortgage: TThostFtdcMoneyType,
    pub ExchangeMargin: TThostFtdcMoneyType,
    pub DeliveryMargin: TThostFtdcMoneyType,
    pub ExchangeDeliveryMargin: TThostFtdcMoneyType,
    pub ReserveBalance: TThostFtdcMoneyType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub PreFundMortgageIn: TThostFtdcMoneyType,
    pub PreFundMortgageOut: TThostFtdcMoneyType,
    pub FundMortgageIn: TThostFtdcMoneyType,
    pub FundMortgageOut: TThostFtdcMoneyType,
    pub FundMortgageAvailable: TThostFtdcMoneyType,
    pub MortgageableFund: TThostFtdcMoneyType,
    pub SpecProductMargin: TThostFtdcMoneyType,
    pub SpecProductFrozenMargin: TThostFtdcMoneyType,
    pub SpecProductCommission: TThostFtdcMoneyType,
    pub SpecProductFrozenCommission: TThostFtdcMoneyType,
    pub SpecProductPositionProfit: TThostFtdcMoneyType,
    pub SpecProductCloseProfit: TThostFtdcMoneyType,
    pub SpecProductPositionProfitByAlg: TThostFtdcMoneyType,
    pub SpecProductExchangeMargin: TThostFtdcMoneyType,
    pub FrozenSwap: TThostFtdcMoneyType,
    pub RemainSwap: TThostFtdcMoneyType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaInitInvstMarginField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub LastRiskTotalInvstMargin: TThostFtdcMoneyType,
    pub LastRiskTotalExchMargin: TThostFtdcMoneyType,
    pub ThisSyncInvstMargin: TThostFtdcMoneyType,
    pub ThisSyncExchMargin: TThostFtdcMoneyType,
    pub RemainRiskInvstMargin: TThostFtdcMoneyType,
    pub RemainRiskExchMargin: TThostFtdcMoneyType,
    pub LastRiskSpecTotalInvstMargin: TThostFtdcMoneyType,
    pub LastRiskSpecTotalExchMargin: TThostFtdcMoneyType,
    pub ThisSyncSpecInvstMargin: TThostFtdcMoneyType,
    pub ThisSyncSpecExchMargin: TThostFtdcMoneyType,
    pub RemainRiskSpecInvstMargin: TThostFtdcMoneyType,
    pub RemainRiskSpecExchMargin: TThostFtdcMoneyType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaDceCombInstrumentField {
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub TradeGroupID: TThostFtdcTradeGroupIDType,
    pub CombHedgeFlag: TThostFtdcHedgeFlagType,
    pub CombinationType: TThostFtdcDceCombinationTypeType,
    pub Direction: TThostFtdcDirectionType,
    pub ProductID: TThostFtdcInstrumentIDType,
    pub Xparameter: TThostFtdcDiscountRatioType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaInvstMarginRateField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub IsRelative: TThostFtdcBoolType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaExchMarginRateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaOptExchMarginField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub SShortMarginRatioByMoney: TThostFtdcRatioType,
    pub SShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub HShortMarginRatioByMoney: TThostFtdcRatioType,
    pub HShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub AShortMarginRatioByMoney: TThostFtdcRatioType,
    pub AShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub MShortMarginRatioByMoney: TThostFtdcRatioType,
    pub MShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaOptInvstMarginField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub SShortMarginRatioByMoney: TThostFtdcRatioType,
    pub SShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub HShortMarginRatioByMoney: TThostFtdcRatioType,
    pub HShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub AShortMarginRatioByMoney: TThostFtdcRatioType,
    pub AShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub IsRelative: TThostFtdcBoolType,
    pub MShortMarginRatioByMoney: TThostFtdcRatioType,
    pub MShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaInvstMarginRateULField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaOptInvstCommRateField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OpenRatioByMoney: TThostFtdcRatioType,
    pub OpenRatioByVolume: TThostFtdcRatioType,
    pub CloseRatioByMoney: TThostFtdcRatioType,
    pub CloseRatioByVolume: TThostFtdcRatioType,
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    pub StrikeRatioByMoney: TThostFtdcRatioType,
    pub StrikeRatioByVolume: TThostFtdcRatioType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaInvstCommRateField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OpenRatioByMoney: TThostFtdcRatioType,
    pub OpenRatioByVolume: TThostFtdcRatioType,
    pub CloseRatioByMoney: TThostFtdcRatioType,
    pub CloseRatioByVolume: TThostFtdcRatioType,
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaProductExchRateField {
    pub ProductID: TThostFtdcInstrumentIDType,
    pub QuoteCurrencyID: TThostFtdcCurrencyIDType,
    pub ExchangeRate: TThostFtdcExchangeRateType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaDepthMarketDataField {
    pub TradingDay: TThostFtdcDateType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub LastPrice: TThostFtdcPriceType,
    pub PreSettlementPrice: TThostFtdcPriceType,
    pub PreClosePrice: TThostFtdcPriceType,
    pub PreOpenInterest: TThostFtdcLargeVolumeType,
    pub OpenPrice: TThostFtdcPriceType,
    pub HighestPrice: TThostFtdcPriceType,
    pub LowestPrice: TThostFtdcPriceType,
    pub Volume: TThostFtdcVolumeType,
    pub Turnover: TThostFtdcMoneyType,
    pub OpenInterest: TThostFtdcLargeVolumeType,
    pub ClosePrice: TThostFtdcPriceType,
    pub SettlementPrice: TThostFtdcPriceType,
    pub UpperLimitPrice: TThostFtdcPriceType,
    pub LowerLimitPrice: TThostFtdcPriceType,
    pub PreDelta: TThostFtdcRatioType,
    pub CurrDelta: TThostFtdcRatioType,
    pub UpdateTime: TThostFtdcTimeType,
    pub UpdateMillisec: TThostFtdcMillisecType,
    pub BidPrice1: TThostFtdcPriceType,
    pub BidVolume1: TThostFtdcVolumeType,
    pub AskPrice1: TThostFtdcPriceType,
    pub AskVolume1: TThostFtdcVolumeType,
    pub BidPrice2: TThostFtdcPriceType,
    pub BidVolume2: TThostFtdcVolumeType,
    pub AskPrice2: TThostFtdcPriceType,
    pub AskVolume2: TThostFtdcVolumeType,
    pub BidPrice3: TThostFtdcPriceType,
    pub BidVolume3: TThostFtdcVolumeType,
    pub AskPrice3: TThostFtdcPriceType,
    pub AskVolume3: TThostFtdcVolumeType,
    pub BidPrice4: TThostFtdcPriceType,
    pub BidVolume4: TThostFtdcVolumeType,
    pub AskPrice4: TThostFtdcPriceType,
    pub AskVolume4: TThostFtdcVolumeType,
    pub BidPrice5: TThostFtdcPriceType,
    pub BidVolume5: TThostFtdcVolumeType,
    pub AskPrice5: TThostFtdcPriceType,
    pub AskVolume5: TThostFtdcVolumeType,
    pub AveragePrice: TThostFtdcPriceType,
    pub ActionDay: TThostFtdcDateType,
    pub BandingUpperPrice: TThostFtdcPriceType,
    pub BandingLowerPrice: TThostFtdcPriceType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaIndexPriceField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ClosePrice: TThostFtdcPriceType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaEWarrantOffsetField {
    pub TradingDay: TThostFtdcTradeDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub Direction: TThostFtdcDirectionType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub Volume: TThostFtdcVolumeType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSPBMFutureParameterField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub Cvf: TThostFtdcVolumeMultipleType,
    pub TimeRange: TThostFtdcTimeRangeType,
    pub MarginRate: TThostFtdcRatioType,
    pub LockRateX: TThostFtdcRatioType,
    pub AddOnRate: TThostFtdcRatioType,
    pub PreSettlementPrice: TThostFtdcPriceType,
    pub AddOnLockRateX2: TThostFtdcRatioType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSPBMOptionParameterField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub Cvf: TThostFtdcVolumeMultipleType,
    pub DownPrice: TThostFtdcPriceType,
    pub Delta: TThostFtdcDeltaType,
    pub SlimiDelta: TThostFtdcDeltaType,
    pub PreSettlementPrice: TThostFtdcPriceType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSPBMIntraParameterField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub IntraRateY: TThostFtdcRatioType,
    pub AddOnIntraRateY2: TThostFtdcRatioType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSPBMInterParameterField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub SpreadId: TThostFtdcSpreadIdType,
    pub InterRateZ: TThostFtdcRatioType,
    pub Leg1ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub Leg2ProdFamilyCode: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncSPBMParameterEndField {
    pub TradingDay: TThostFtdcDateType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQrySPBMFutureParameterField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQrySPBMOptionParameterField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQrySPBMIntraParameterField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQrySPBMInterParameterField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub Leg1ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub Leg2ProdFamilyCode: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSPBMPortfDefinitionField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub PortfolioDefID: TThostFtdcPortfolioDefIDType,
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub IsSPBM: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSPBMInvestorPortfDefField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub PortfolioDefID: TThostFtdcPortfolioDefIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInvestorPortfMarginRatioField {
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub MarginRatio: TThostFtdcRatioType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQrySPBMPortfDefinitionField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub PortfolioDefID: TThostFtdcPortfolioDefIDType,
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQrySPBMInvestorPortfDefField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryInvestorPortfMarginRatioField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInvestorProdSPBMDetailField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub IntraInstrMargin: TThostFtdcMoneyType,
    pub BCollectingMargin: TThostFtdcMoneyType,
    pub SCollectingMargin: TThostFtdcMoneyType,
    pub IntraProdMargin: TThostFtdcMoneyType,
    pub NetMargin: TThostFtdcMoneyType,
    pub InterProdMargin: TThostFtdcMoneyType,
    pub SingleMargin: TThostFtdcMoneyType,
    pub AddOnMargin: TThostFtdcMoneyType,
    pub DeliveryMargin: TThostFtdcMoneyType,
    pub CallOptionMinRisk: TThostFtdcMoneyType,
    pub PutOptionMinRisk: TThostFtdcMoneyType,
    pub OptionMinRisk: TThostFtdcMoneyType,
    pub OptionValueOffset: TThostFtdcMoneyType,
    pub OptionRoyalty: TThostFtdcMoneyType,
    pub RealOptionValueOffset: TThostFtdcMoneyType,
    pub Margin: TThostFtdcMoneyType,
    pub ExchMargin: TThostFtdcMoneyType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryInvestorProdSPBMDetailField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcPortfTradeParamSettingField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub Portfolio: TThostFtdcPortfolioType,
    pub IsActionVerify: TThostFtdcBoolType,
    pub IsCloseVerify: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInvestorTradingRightField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InvstTradingRight: TThostFtdcInvstTradingRightType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcMortgageParamField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub MortgageBalance: TThostFtdcRatioType,
    pub CheckMortgageRatio: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcWithDrawParamField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub WithDrawParamID: TThostFtdcWithDrawParamIDType,
    pub WithDrawParamValue: TThostFtdcWithDrawParamValueType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcThostUserFunctionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub ThostFunctionCode: TThostFtdcThostFunctionCodeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryThostUserFunctionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSPBMAddOnInterParameterField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub SpreadId: TThostFtdcSpreadIdType,
    pub AddOnInterRateZ2: TThostFtdcRatioType,
    pub Leg1ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub Leg2ProdFamilyCode: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQrySPBMAddOnInterParameterField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub Leg1ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub Leg2ProdFamilyCode: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryInvestorCommoditySPMMMarginField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub CommodityID: TThostFtdcSPMMProductIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryInvestorCommodityGroupSPMMMarginField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub CommodityGroupID: TThostFtdcSPMMProductIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQrySPMMInstParamField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQrySPMMProductParamField {
    pub ProductID: TThostFtdcSPMMProductIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInvestorCommoditySPMMMarginField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub CommodityID: TThostFtdcSPMMProductIDType,
    pub MarginBeforeDiscount: TThostFtdcMoneyType,
    pub MarginNoDiscount: TThostFtdcMoneyType,
    pub LongPosRisk: TThostFtdcMoneyType,
    pub LongOpenFrozenRisk: TThostFtdcMoneyType,
    pub LongCloseFrozenRisk: TThostFtdcMoneyType,
    pub ShortPosRisk: TThostFtdcMoneyType,
    pub ShortOpenFrozenRisk: TThostFtdcMoneyType,
    pub ShortCloseFrozenRisk: TThostFtdcMoneyType,
    pub IntraCommodityRate: TThostFtdcSPMMDiscountRatioType,
    pub OptionDiscountRate: TThostFtdcSPMMDiscountRatioType,
    pub PosDiscount: TThostFtdcMoneyType,
    pub OpenFrozenDiscount: TThostFtdcMoneyType,
    pub NetRisk: TThostFtdcMoneyType,
    pub CloseFrozenMargin: TThostFtdcMoneyType,
    pub FrozenCommission: TThostFtdcMoneyType,
    pub Commission: TThostFtdcMoneyType,
    pub FrozenCash: TThostFtdcMoneyType,
    pub CashIn: TThostFtdcMoneyType,
    pub StrikeFrozenMargin: TThostFtdcMoneyType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInvestorCommodityGroupSPMMMarginField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub CommodityGroupID: TThostFtdcSPMMProductIDType,
    pub MarginBeforeDiscount: TThostFtdcMoneyType,
    pub MarginNoDiscount: TThostFtdcMoneyType,
    pub LongRisk: TThostFtdcMoneyType,
    pub ShortRisk: TThostFtdcMoneyType,
    pub CloseFrozenMargin: TThostFtdcMoneyType,
    pub InterCommodityRate: TThostFtdcSPMMDiscountRatioType,
    pub MiniMarginRatio: TThostFtdcSPMMDiscountRatioType,
    pub AdjustRatio: TThostFtdcRatioType,
    pub IntraCommodityDiscount: TThostFtdcMoneyType,
    pub InterCommodityDiscount: TThostFtdcMoneyType,
    pub ExchMargin: TThostFtdcMoneyType,
    pub InvestorMargin: TThostFtdcMoneyType,
    pub FrozenCommission: TThostFtdcMoneyType,
    pub Commission: TThostFtdcMoneyType,
    pub FrozenCash: TThostFtdcMoneyType,
    pub CashIn: TThostFtdcMoneyType,
    pub StrikeFrozenMargin: TThostFtdcMoneyType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSPMMInstParamField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InstMarginCalID: TThostFtdcInstMarginCalIDType,
    pub CommodityID: TThostFtdcSPMMProductIDType,
    pub CommodityGroupID: TThostFtdcSPMMProductIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSPMMProductParamField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProductID: TThostFtdcSPMMProductIDType,
    pub CommodityID: TThostFtdcSPMMProductIDType,
    pub CommodityGroupID: TThostFtdcSPMMProductIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryTraderAssignField {
    pub TraderID: TThostFtdcTraderIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTraderAssignField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInvestorInfoCntSettingField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ProductID: TThostFtdcProductIDType,
    pub IsCalInfoComm: TThostFtdcBoolType,
    pub IsLimitInfoMax: TThostFtdcBoolType,
    pub InfoMaxLimit: TThostFtdcVolumeType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRCAMSCombProductInfoField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProductID: TThostFtdcProductIDType,
    pub CombProductID: TThostFtdcProductIDType,
    pub ProductGroupID: TThostFtdcProductIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRCAMSInstrParameterField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProductID: TThostFtdcProductIDType,
    pub HedgeRate: TThostFtdcHedgeRateType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRCAMSIntraParameterField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub CombProductID: TThostFtdcProductIDType,
    pub HedgeRate: TThostFtdcHedgeRateType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRCAMSInterParameterField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProductGroupID: TThostFtdcProductIDType,
    pub Priority: TThostFtdcRCAMSPriorityType,
    pub CreditRate: TThostFtdcHedgeRateType,
    pub CombProduct1: TThostFtdcProductIDType,
    pub CombProduct2: TThostFtdcProductIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRCAMSShortOptAdjustParamField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub CombProductID: TThostFtdcProductIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub AdjustValue: TThostFtdcAdjustValueType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRCAMSInvestorCombPositionField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub PosiDirection: TThostFtdcPosiDirectionType,
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    pub LegID: TThostFtdcLegIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub TotalAmt: TThostFtdcVolumeType,
    pub ExchMargin: TThostFtdcMoneyType,
    pub Margin: TThostFtdcMoneyType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInvestorProdRCAMSMarginField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub CombProductID: TThostFtdcProductIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub ProductGroupID: TThostFtdcProductIDType,
    pub RiskBeforeDiscount: TThostFtdcMoneyType,
    pub IntraInstrRisk: TThostFtdcMoneyType,
    pub BPosRisk: TThostFtdcMoneyType,
    pub SPosRisk: TThostFtdcMoneyType,
    pub IntraProdRisk: TThostFtdcMoneyType,
    pub NetRisk: TThostFtdcMoneyType,
    pub InterProdRisk: TThostFtdcMoneyType,
    pub ShortOptRiskAdj: TThostFtdcMoneyType,
    pub OptionRoyalty: TThostFtdcMoneyType,
    pub MMSACloseFrozenMargin: TThostFtdcMoneyType,
    pub CloseCombFrozenMargin: TThostFtdcMoneyType,
    pub CloseFrozenMargin: TThostFtdcMoneyType,
    pub MMSAOpenFrozenMargin: TThostFtdcMoneyType,
    pub DeliveryOpenFrozenMargin: TThostFtdcMoneyType,
    pub OpenFrozenMargin: TThostFtdcMoneyType,
    pub UseFrozenMargin: TThostFtdcMoneyType,
    pub MMSAExchMargin: TThostFtdcMoneyType,
    pub DeliveryExchMargin: TThostFtdcMoneyType,
    pub CombExchMargin: TThostFtdcMoneyType,
    pub ExchMargin: TThostFtdcMoneyType,
    pub UseMargin: TThostFtdcMoneyType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryRCAMSCombProductInfoField {
    pub ProductID: TThostFtdcProductIDType,
    pub CombProductID: TThostFtdcProductIDType,
    pub ProductGroupID: TThostFtdcProductIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryRCAMSInstrParameterField {
    pub ProductID: TThostFtdcProductIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryRCAMSIntraParameterField {
    pub CombProductID: TThostFtdcProductIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryRCAMSInterParameterField {
    pub ProductGroupID: TThostFtdcProductIDType,
    pub CombProduct1: TThostFtdcProductIDType,
    pub CombProduct2: TThostFtdcProductIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryRCAMSShortOptAdjustParamField {
    pub CombProductID: TThostFtdcProductIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryRCAMSInvestorCombPositionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryInvestorProdRCAMSMarginField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub CombProductID: TThostFtdcProductIDType,
    pub ProductGroupID: TThostFtdcProductIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRULEInstrParameterField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InstrumentClass: TThostFtdcInstrumentClassType,
    pub StdInstrumentID: TThostFtdcInstrumentIDType,
    pub BSpecRatio: TThostFtdcRatioType,
    pub SSpecRatio: TThostFtdcRatioType,
    pub BHedgeRatio: TThostFtdcRatioType,
    pub SHedgeRatio: TThostFtdcRatioType,
    pub BAddOnMargin: TThostFtdcMoneyType,
    pub SAddOnMargin: TThostFtdcMoneyType,
    pub CommodityGroupID: TThostFtdcCommodityGroupIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRULEIntraParameterField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub StdInstrumentID: TThostFtdcInstrumentIDType,
    pub StdInstrMargin: TThostFtdcMoneyType,
    pub UsualIntraRate: TThostFtdcRatioType,
    pub DeliveryIntraRate: TThostFtdcRatioType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcRULEInterParameterField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub SpreadId: TThostFtdcSpreadIdType,
    pub InterRate: TThostFtdcRatioType,
    pub Leg1ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub Leg2ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub Leg1PropFactor: TThostFtdcCommonIntType,
    pub Leg2PropFactor: TThostFtdcCommonIntType,
    pub CommodityGroupID: TThostFtdcCommodityGroupIDType,
    pub CommodityGroupName: TThostFtdcInstrumentNameType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryRULEInstrParameterField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryRULEIntraParameterField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryRULEInterParameterField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub Leg1ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub Leg2ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub CommodityGroupID: TThostFtdcCommodityGroupIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcInvestorProdRULEMarginField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub InstrumentClass: TThostFtdcInstrumentClassType,
    pub CommodityGroupID: TThostFtdcCommodityGroupIDType,
    pub BStdPosition: TThostFtdcStdPositionType,
    pub SStdPosition: TThostFtdcStdPositionType,
    pub BStdOpenFrozen: TThostFtdcStdPositionType,
    pub SStdOpenFrozen: TThostFtdcStdPositionType,
    pub BStdCloseFrozen: TThostFtdcStdPositionType,
    pub SStdCloseFrozen: TThostFtdcStdPositionType,
    pub IntraProdStdPosition: TThostFtdcStdPositionType,
    pub NetStdPosition: TThostFtdcStdPositionType,
    pub InterProdStdPosition: TThostFtdcStdPositionType,
    pub SingleStdPosition: TThostFtdcStdPositionType,
    pub IntraProdMargin: TThostFtdcMoneyType,
    pub InterProdMargin: TThostFtdcMoneyType,
    pub SingleMargin: TThostFtdcMoneyType,
    pub NonCombMargin: TThostFtdcMoneyType,
    pub AddOnMargin: TThostFtdcMoneyType,
    pub ExchMargin: TThostFtdcMoneyType,
    pub AddOnFrozenMargin: TThostFtdcMoneyType,
    pub OpenFrozenMargin: TThostFtdcMoneyType,
    pub CloseFrozenMargin: TThostFtdcMoneyType,
    pub Margin: TThostFtdcMoneyType,
    pub FrozenMargin: TThostFtdcMoneyType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcQryInvestorProdRULEMarginField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub CommodityGroupID: TThostFtdcCommodityGroupIDType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaSPBMPortfDefinitionField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub PortfolioDefID: TThostFtdcPortfolioDefIDType,
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub IsSPBM: TThostFtdcBoolType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaSPBMInvstPortfDefField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub PortfolioDefID: TThostFtdcPortfolioDefIDType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaSPBMFutureParameterField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub Cvf: TThostFtdcVolumeMultipleType,
    pub TimeRange: TThostFtdcTimeRangeType,
    pub MarginRate: TThostFtdcRatioType,
    pub LockRateX: TThostFtdcRatioType,
    pub AddOnRate: TThostFtdcRatioType,
    pub PreSettlementPrice: TThostFtdcPriceType,
    pub AddOnLockRateX2: TThostFtdcRatioType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaSPBMOptionParameterField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub Cvf: TThostFtdcVolumeMultipleType,
    pub DownPrice: TThostFtdcPriceType,
    pub Delta: TThostFtdcDeltaType,
    pub SlimiDelta: TThostFtdcDeltaType,
    pub PreSettlementPrice: TThostFtdcPriceType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaSPBMIntraParameterField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub IntraRateY: TThostFtdcRatioType,
    pub AddOnIntraRateY2: TThostFtdcRatioType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaSPBMInterParameterField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub SpreadId: TThostFtdcSpreadIdType,
    pub InterRateZ: TThostFtdcRatioType,
    pub Leg1ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub Leg2ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaSPBMAddOnInterParamField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub SpreadId: TThostFtdcSpreadIdType,
    pub AddOnInterRateZ2: TThostFtdcRatioType,
    pub Leg1ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub Leg2ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaSPMMInstParamField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InstMarginCalID: TThostFtdcInstMarginCalIDType,
    pub CommodityID: TThostFtdcSPMMProductIDType,
    pub CommodityGroupID: TThostFtdcSPMMProductIDType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaSPMMProductParamField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProductID: TThostFtdcSPMMProductIDType,
    pub CommodityID: TThostFtdcSPMMProductIDType,
    pub CommodityGroupID: TThostFtdcSPMMProductIDType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaInvestorSPMMModelField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub SPMMModelID: TThostFtdcSPMMModelIDType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaSPMMModelParamField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub SPMMModelID: TThostFtdcSPMMModelIDType,
    pub CommodityGroupID: TThostFtdcSPMMProductIDType,
    pub IntraCommodityRate: TThostFtdcSPMMDiscountRatioType,
    pub InterCommodityRate: TThostFtdcSPMMDiscountRatioType,
    pub OptionDiscountRate: TThostFtdcSPMMDiscountRatioType,
    pub MiniMarginRatio: TThostFtdcSPMMDiscountRatioType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaRCAMSCombProdInfoField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProductID: TThostFtdcProductIDType,
    pub CombProductID: TThostFtdcProductIDType,
    pub ProductGroupID: TThostFtdcProductIDType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaRCAMSInstrParameterField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProductID: TThostFtdcProductIDType,
    pub HedgeRate: TThostFtdcHedgeRateType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaRCAMSIntraParameterField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub CombProductID: TThostFtdcProductIDType,
    pub HedgeRate: TThostFtdcHedgeRateType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaRCAMSInterParameterField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProductGroupID: TThostFtdcProductIDType,
    pub Priority: TThostFtdcRCAMSPriorityType,
    pub CreditRate: TThostFtdcHedgeRateType,
    pub CombProduct1: TThostFtdcProductIDType,
    pub CombProduct2: TThostFtdcProductIDType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaRCAMSSOptAdjParamField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub CombProductID: TThostFtdcProductIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub AdjustValue: TThostFtdcAdjustValueType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaRCAMSCombRuleDtlField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProdGroup: TThostFtdcProductIDType,
    pub RuleId: TThostFtdcRuleIdType,
    pub Priority: TThostFtdcRCAMSPriorityType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub CombMargin: TThostFtdcMoneyType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub LegID: TThostFtdcLegIDType,
    pub LegInstrumentID: TThostFtdcInstrumentIDType,
    pub Direction: TThostFtdcDirectionType,
    pub LegMultiple: TThostFtdcLegMultipleType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaRCAMSInvstCombPosField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub PosiDirection: TThostFtdcPosiDirectionType,
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    pub LegID: TThostFtdcLegIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub TotalAmt: TThostFtdcVolumeType,
    pub ExchMargin: TThostFtdcMoneyType,
    pub Margin: TThostFtdcMoneyType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaRULEInstrParameterField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InstrumentClass: TThostFtdcInstrumentClassType,
    pub StdInstrumentID: TThostFtdcInstrumentIDType,
    pub BSpecRatio: TThostFtdcRatioType,
    pub SSpecRatio: TThostFtdcRatioType,
    pub BHedgeRatio: TThostFtdcRatioType,
    pub SHedgeRatio: TThostFtdcRatioType,
    pub BAddOnMargin: TThostFtdcMoneyType,
    pub SAddOnMargin: TThostFtdcMoneyType,
    pub CommodityGroupID: TThostFtdcCommodityGroupIDType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaRULEIntraParameterField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub StdInstrumentID: TThostFtdcInstrumentIDType,
    pub StdInstrMargin: TThostFtdcMoneyType,
    pub UsualIntraRate: TThostFtdcRatioType,
    pub DeliveryIntraRate: TThostFtdcRatioType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcSyncDeltaRULEInterParameterField {
    pub TradingDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub SpreadId: TThostFtdcSpreadIdType,
    pub InterRate: TThostFtdcRatioType,
    pub Leg1ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub Leg2ProdFamilyCode: TThostFtdcInstrumentIDType,
    pub Leg1PropFactor: TThostFtdcCommonIntType,
    pub Leg2PropFactor: TThostFtdcCommonIntType,
    pub CommodityGroupID: TThostFtdcCommodityGroupIDType,
    pub CommodityGroupName: TThostFtdcInstrumentNameType,
    pub ActionDirection: TThostFtdcActionDirectionType,
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTraderSpi {
    pub _bindgen_opaque_blob: u64,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcTraderApi {
    pub _bindgen_opaque_blob: u64,
}
extern "C" {
    #[link_name = "\u{1}?CreateFtdcTraderApi@CThostFtdcTraderApi@@SAPEAV1@PEBD@Z"]
    pub fn CThostFtdcTraderApi_CreateFtdcTraderApi(
        pszFlowPath: *const ::std::os::raw::c_char,
    ) -> *mut CThostFtdcTraderApi;
}
extern "C" {
    #[link_name = "\u{1}?GetApiVersion@CThostFtdcTraderApi@@SAPEBDXZ"]
    pub fn CThostFtdcTraderApi_GetApiVersion() -> *const ::std::os::raw::c_char;
}
impl CThostFtdcTraderApi {
    #[inline]
    pub unsafe fn CreateFtdcTraderApi(
        pszFlowPath: *const ::std::os::raw::c_char,
    ) -> *mut CThostFtdcTraderApi {
        CThostFtdcTraderApi_CreateFtdcTraderApi(pszFlowPath)
    }
    #[inline]
    pub unsafe fn GetApiVersion() -> *const ::std::os::raw::c_char {
        CThostFtdcTraderApi_GetApiVersion()
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcMdSpi {
    pub _bindgen_opaque_blob: u64,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct CThostFtdcMdApi {
    pub _bindgen_opaque_blob: u64,
}
extern "C" {
    #[link_name = "\u{1}?CreateFtdcMdApi@CThostFtdcMdApi@@SAPEAV1@PEBD_N1@Z"]
    pub fn CThostFtdcMdApi_CreateFtdcMdApi(
        pszFlowPath: *const ::std::os::raw::c_char,
        bIsUsingUdp: bool,
        bIsMulticast: bool,
    ) -> *mut CThostFtdcMdApi;
}
extern "C" {
    #[link_name = "\u{1}?GetApiVersion@CThostFtdcMdApi@@SAPEBDXZ"]
    pub fn CThostFtdcMdApi_GetApiVersion() -> *const ::std::os::raw::c_char;
}
impl CThostFtdcMdApi {
    #[inline]
    pub unsafe fn CreateFtdcMdApi(
        pszFlowPath: *const ::std::os::raw::c_char,
        bIsUsingUdp: bool,
        bIsMulticast: bool,
    ) -> *mut CThostFtdcMdApi {
        CThostFtdcMdApi_CreateFtdcMdApi(pszFlowPath, bIsUsingUdp, bIsMulticast)
    }
    #[inline]
    pub unsafe fn GetApiVersion() -> *const ::std::os::raw::c_char {
        CThostFtdcMdApi_GetApiVersion()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct Rust_CThostFtdcMdApi {
    pub m_member: *mut CThostFtdcMdApi,
}
extern "C" {
    #[link_name = "\u{1}?Release@Rust_CThostFtdcMdApi@@QEAAXXZ"]
    pub fn Rust_CThostFtdcMdApi_Release(this: *mut Rust_CThostFtdcMdApi);
}
extern "C" {
    #[link_name = "\u{1}?Init@Rust_CThostFtdcMdApi@@QEAAXXZ"]
    pub fn Rust_CThostFtdcMdApi_Init(this: *mut Rust_CThostFtdcMdApi);
}
extern "C" {
    #[link_name = "\u{1}?Join@Rust_CThostFtdcMdApi@@QEAAHXZ"]
    pub fn Rust_CThostFtdcMdApi_Join(this: *mut Rust_CThostFtdcMdApi) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?GetTradingDay@Rust_CThostFtdcMdApi@@QEAAPEBDXZ"]
    pub fn Rust_CThostFtdcMdApi_GetTradingDay(
        this: *mut Rust_CThostFtdcMdApi,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?RegisterFront@Rust_CThostFtdcMdApi@@QEAAXPEAD@Z"]
    pub fn Rust_CThostFtdcMdApi_RegisterFront(
        this: *mut Rust_CThostFtdcMdApi,
        pszFrontAddress: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?RegisterNameServer@Rust_CThostFtdcMdApi@@QEAAXPEAD@Z"]
    pub fn Rust_CThostFtdcMdApi_RegisterNameServer(
        this: *mut Rust_CThostFtdcMdApi,
        pszNsAddress: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?RegisterFensUserInfo@Rust_CThostFtdcMdApi@@QEAAXPEAUCThostFtdcFensUserInfoField@@@Z"]
    pub fn Rust_CThostFtdcMdApi_RegisterFensUserInfo(
        this: *mut Rust_CThostFtdcMdApi,
        pFensUserInfo: *mut CThostFtdcFensUserInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?RegisterSpi@Rust_CThostFtdcMdApi@@QEAAXPEAVCThostFtdcMdSpi@@@Z"]
    pub fn Rust_CThostFtdcMdApi_RegisterSpi(
        this: *mut Rust_CThostFtdcMdApi,
        pSpi: *mut CThostFtdcMdSpi,
    );
}
extern "C" {
    #[link_name = "\u{1}?SubscribeMarketData@Rust_CThostFtdcMdApi@@QEAAHQEAPEADH@Z"]
    pub fn Rust_CThostFtdcMdApi_SubscribeMarketData(
        this: *mut Rust_CThostFtdcMdApi,
        ppInstrumentID: *mut *mut ::std::os::raw::c_char,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?UnSubscribeMarketData@Rust_CThostFtdcMdApi@@QEAAHQEAPEADH@Z"]
    pub fn Rust_CThostFtdcMdApi_UnSubscribeMarketData(
        this: *mut Rust_CThostFtdcMdApi,
        ppInstrumentID: *mut *mut ::std::os::raw::c_char,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?SubscribeForQuoteRsp@Rust_CThostFtdcMdApi@@QEAAHQEAPEADH@Z"]
    pub fn Rust_CThostFtdcMdApi_SubscribeForQuoteRsp(
        this: *mut Rust_CThostFtdcMdApi,
        ppInstrumentID: *mut *mut ::std::os::raw::c_char,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?UnSubscribeForQuoteRsp@Rust_CThostFtdcMdApi@@QEAAHQEAPEADH@Z"]
    pub fn Rust_CThostFtdcMdApi_UnSubscribeForQuoteRsp(
        this: *mut Rust_CThostFtdcMdApi,
        ppInstrumentID: *mut *mut ::std::os::raw::c_char,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqUserLogin@Rust_CThostFtdcMdApi@@QEAAHPEAUCThostFtdcReqUserLoginField@@H@Z"]
    pub fn Rust_CThostFtdcMdApi_ReqUserLogin(
        this: *mut Rust_CThostFtdcMdApi,
        pReqUserLoginField: *mut CThostFtdcReqUserLoginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqUserLogout@Rust_CThostFtdcMdApi@@QEAAHPEAUCThostFtdcUserLogoutField@@H@Z"]
    pub fn Rust_CThostFtdcMdApi_ReqUserLogout(
        this: *mut Rust_CThostFtdcMdApi,
        pUserLogout: *mut CThostFtdcUserLogoutField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryMulticastInstrument@Rust_CThostFtdcMdApi@@QEAAHPEAUCThostFtdcQryMulticastInstrumentField@@H@Z"]
    pub fn Rust_CThostFtdcMdApi_ReqQryMulticastInstrument(
        this: *mut Rust_CThostFtdcMdApi,
        pQryMulticastInstrument: *mut CThostFtdcQryMulticastInstrumentField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}??0Rust_CThostFtdcMdApi@@QEAA@PEAVCThostFtdcMdApi@@@Z"]
    pub fn Rust_CThostFtdcMdApi_Rust_CThostFtdcMdApi(
        this: *mut Rust_CThostFtdcMdApi,
        member: *mut CThostFtdcMdApi,
    );
}
extern "C" {
    #[link_name = "\u{1}??1Rust_CThostFtdcMdApi@@QEAA@XZ"]
    pub fn Rust_CThostFtdcMdApi_Rust_CThostFtdcMdApi_destructor(this: *mut Rust_CThostFtdcMdApi);
}
impl Rust_CThostFtdcMdApi {
    #[inline]
    pub unsafe fn Release(&mut self) {
        Rust_CThostFtdcMdApi_Release(self)
    }
    #[inline]
    pub unsafe fn Init(&mut self) {
        Rust_CThostFtdcMdApi_Init(self)
    }
    #[inline]
    pub unsafe fn Join(&mut self) -> ::std::os::raw::c_int {
        Rust_CThostFtdcMdApi_Join(self)
    }
    #[inline]
    pub unsafe fn GetTradingDay(&mut self) -> *const ::std::os::raw::c_char {
        Rust_CThostFtdcMdApi_GetTradingDay(self)
    }
    #[inline]
    pub unsafe fn RegisterFront(&mut self, pszFrontAddress: *mut ::std::os::raw::c_char) {
        Rust_CThostFtdcMdApi_RegisterFront(self, pszFrontAddress)
    }
    #[inline]
    pub unsafe fn RegisterNameServer(&mut self, pszNsAddress: *mut ::std::os::raw::c_char) {
        Rust_CThostFtdcMdApi_RegisterNameServer(self, pszNsAddress)
    }
    #[inline]
    pub unsafe fn RegisterFensUserInfo(&mut self, pFensUserInfo: *mut CThostFtdcFensUserInfoField) {
        Rust_CThostFtdcMdApi_RegisterFensUserInfo(self, pFensUserInfo)
    }
    #[inline]
    pub unsafe fn RegisterSpi(&mut self, pSpi: *mut CThostFtdcMdSpi) {
        Rust_CThostFtdcMdApi_RegisterSpi(self, pSpi)
    }
    #[inline]
    pub unsafe fn SubscribeMarketData(
        &mut self,
        ppInstrumentID: *mut *mut ::std::os::raw::c_char,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcMdApi_SubscribeMarketData(self, ppInstrumentID, nCount)
    }
    #[inline]
    pub unsafe fn UnSubscribeMarketData(
        &mut self,
        ppInstrumentID: *mut *mut ::std::os::raw::c_char,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcMdApi_UnSubscribeMarketData(self, ppInstrumentID, nCount)
    }
    #[inline]
    pub unsafe fn SubscribeForQuoteRsp(
        &mut self,
        ppInstrumentID: *mut *mut ::std::os::raw::c_char,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcMdApi_SubscribeForQuoteRsp(self, ppInstrumentID, nCount)
    }
    #[inline]
    pub unsafe fn UnSubscribeForQuoteRsp(
        &mut self,
        ppInstrumentID: *mut *mut ::std::os::raw::c_char,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcMdApi_UnSubscribeForQuoteRsp(self, ppInstrumentID, nCount)
    }
    #[inline]
    pub unsafe fn ReqUserLogin(
        &mut self,
        pReqUserLoginField: *mut CThostFtdcReqUserLoginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcMdApi_ReqUserLogin(self, pReqUserLoginField, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqUserLogout(
        &mut self,
        pUserLogout: *mut CThostFtdcUserLogoutField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcMdApi_ReqUserLogout(self, pUserLogout, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryMulticastInstrument(
        &mut self,
        pQryMulticastInstrument: *mut CThostFtdcQryMulticastInstrumentField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcMdApi_ReqQryMulticastInstrument(self, pQryMulticastInstrument, nRequestID)
    }
    #[inline]
    pub unsafe fn new(member: *mut CThostFtdcMdApi) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        Rust_CThostFtdcMdApi_Rust_CThostFtdcMdApi(__bindgen_tmp.as_mut_ptr(), member);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        Rust_CThostFtdcMdApi_Rust_CThostFtdcMdApi_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct Rust_CThostFtdcMdSpi {
    pub _base: CThostFtdcMdSpi,
    pub m_rust: *mut ::std::os::raw::c_void,
}
extern "C" {
    #[link_name = "\u{1}??0Rust_CThostFtdcMdSpi@@QEAA@PEAX@Z"]
    pub fn Rust_CThostFtdcMdSpi_Rust_CThostFtdcMdSpi(
        this: *mut Rust_CThostFtdcMdSpi,
        rust: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}??1Rust_CThostFtdcMdSpi@@QEAA@XZ"]
    pub fn Rust_CThostFtdcMdSpi_Rust_CThostFtdcMdSpi_destructor(this: *mut Rust_CThostFtdcMdSpi);
}
impl Rust_CThostFtdcMdSpi {
    #[inline]
    pub unsafe fn new(rust: *mut ::std::os::raw::c_void) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        Rust_CThostFtdcMdSpi_Rust_CThostFtdcMdSpi(__bindgen_tmp.as_mut_ptr(), rust);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        Rust_CThostFtdcMdSpi_Rust_CThostFtdcMdSpi_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}?OnFrontConnected@Rust_CThostFtdcMdSpi@@UEAAXXZ"]
    pub fn Rust_CThostFtdcMdSpi_OnFrontConnected(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}?OnFrontDisconnected@Rust_CThostFtdcMdSpi@@UEAAXH@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnFrontDisconnected(
        this: *mut ::std::os::raw::c_void,
        nReason: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnHeartBeatWarning@Rust_CThostFtdcMdSpi@@UEAAXH@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnHeartBeatWarning(
        this: *mut ::std::os::raw::c_void,
        nTimeLapse: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspUserLogin@Rust_CThostFtdcMdSpi@@UEAAXPEAUCThostFtdcRspUserLoginField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnRspUserLogin(
        this: *mut ::std::os::raw::c_void,
        pRspUserLogin: *mut CThostFtdcRspUserLoginField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspUserLogout@Rust_CThostFtdcMdSpi@@UEAAXPEAUCThostFtdcUserLogoutField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnRspUserLogout(
        this: *mut ::std::os::raw::c_void,
        pUserLogout: *mut CThostFtdcUserLogoutField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryMulticastInstrument@Rust_CThostFtdcMdSpi@@UEAAXPEAUCThostFtdcMulticastInstrumentField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnRspQryMulticastInstrument(
        this: *mut ::std::os::raw::c_void,
        pMulticastInstrument: *mut CThostFtdcMulticastInstrumentField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspError@Rust_CThostFtdcMdSpi@@UEAAXPEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnRspError(
        this: *mut ::std::os::raw::c_void,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspSubMarketData@Rust_CThostFtdcMdSpi@@UEAAXPEAUCThostFtdcSpecificInstrumentField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnRspSubMarketData(
        this: *mut ::std::os::raw::c_void,
        pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspUnSubMarketData@Rust_CThostFtdcMdSpi@@UEAAXPEAUCThostFtdcSpecificInstrumentField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnRspUnSubMarketData(
        this: *mut ::std::os::raw::c_void,
        pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspSubForQuoteRsp@Rust_CThostFtdcMdSpi@@UEAAXPEAUCThostFtdcSpecificInstrumentField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnRspSubForQuoteRsp(
        this: *mut ::std::os::raw::c_void,
        pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspUnSubForQuoteRsp@Rust_CThostFtdcMdSpi@@UEAAXPEAUCThostFtdcSpecificInstrumentField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnRspUnSubForQuoteRsp(
        this: *mut ::std::os::raw::c_void,
        pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnDepthMarketData@Rust_CThostFtdcMdSpi@@UEAAXPEAUCThostFtdcDepthMarketDataField@@@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnRtnDepthMarketData(
        this: *mut ::std::os::raw::c_void,
        pDepthMarketData: *mut CThostFtdcDepthMarketDataField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnForQuoteRsp@Rust_CThostFtdcMdSpi@@UEAAXPEAUCThostFtdcForQuoteRspField@@@Z"]
    pub fn Rust_CThostFtdcMdSpi_OnRtnForQuoteRsp(
        this: *mut ::std::os::raw::c_void,
        pForQuoteRsp: *mut CThostFtdcForQuoteRspField,
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct Rust_CThostFtdcTraderApi {
    pub m_member: *mut CThostFtdcTraderApi,
}
extern "C" {
    #[link_name = "\u{1}?Release@Rust_CThostFtdcTraderApi@@QEAAXXZ"]
    pub fn Rust_CThostFtdcTraderApi_Release(this: *mut Rust_CThostFtdcTraderApi);
}
extern "C" {
    #[link_name = "\u{1}?Init@Rust_CThostFtdcTraderApi@@QEAAXXZ"]
    pub fn Rust_CThostFtdcTraderApi_Init(this: *mut Rust_CThostFtdcTraderApi);
}
extern "C" {
    #[link_name = "\u{1}?Join@Rust_CThostFtdcTraderApi@@QEAAHXZ"]
    pub fn Rust_CThostFtdcTraderApi_Join(
        this: *mut Rust_CThostFtdcTraderApi,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?GetTradingDay@Rust_CThostFtdcTraderApi@@QEAAPEBDXZ"]
    pub fn Rust_CThostFtdcTraderApi_GetTradingDay(
        this: *mut Rust_CThostFtdcTraderApi,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?RegisterFront@Rust_CThostFtdcTraderApi@@QEAAXPEAD@Z"]
    pub fn Rust_CThostFtdcTraderApi_RegisterFront(
        this: *mut Rust_CThostFtdcTraderApi,
        pszFrontAddress: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?RegisterNameServer@Rust_CThostFtdcTraderApi@@QEAAXPEAD@Z"]
    pub fn Rust_CThostFtdcTraderApi_RegisterNameServer(
        this: *mut Rust_CThostFtdcTraderApi,
        pszNsAddress: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?RegisterFensUserInfo@Rust_CThostFtdcTraderApi@@QEAAXPEAUCThostFtdcFensUserInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderApi_RegisterFensUserInfo(
        this: *mut Rust_CThostFtdcTraderApi,
        pFensUserInfo: *mut CThostFtdcFensUserInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?RegisterSpi@Rust_CThostFtdcTraderApi@@QEAAXPEAVCThostFtdcTraderSpi@@@Z"]
    pub fn Rust_CThostFtdcTraderApi_RegisterSpi(
        this: *mut Rust_CThostFtdcTraderApi,
        pSpi: *mut CThostFtdcTraderSpi,
    );
}
extern "C" {
    #[link_name = "\u{1}?SubscribePrivateTopic@Rust_CThostFtdcTraderApi@@QEAAXW4THOST_TE_RESUME_TYPE@@@Z"]
    pub fn Rust_CThostFtdcTraderApi_SubscribePrivateTopic(
        this: *mut Rust_CThostFtdcTraderApi,
        nResumeType: THOST_TE_RESUME_TYPE,
    );
}
extern "C" {
    #[link_name = "\u{1}?SubscribePublicTopic@Rust_CThostFtdcTraderApi@@QEAAXW4THOST_TE_RESUME_TYPE@@@Z"]
    pub fn Rust_CThostFtdcTraderApi_SubscribePublicTopic(
        this: *mut Rust_CThostFtdcTraderApi,
        nResumeType: THOST_TE_RESUME_TYPE,
    );
}
extern "C" {
    #[link_name = "\u{1}?ReqAuthenticate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcReqAuthenticateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqAuthenticate(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqAuthenticateField: *mut CThostFtdcReqAuthenticateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?RegisterUserSystemInfo@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcUserSystemInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderApi_RegisterUserSystemInfo(
        this: *mut Rust_CThostFtdcTraderApi,
        pUserSystemInfo: *mut CThostFtdcUserSystemInfoField,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?SubmitUserSystemInfo@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcUserSystemInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderApi_SubmitUserSystemInfo(
        this: *mut Rust_CThostFtdcTraderApi,
        pUserSystemInfo: *mut CThostFtdcUserSystemInfoField,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqUserLogin@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcReqUserLoginField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqUserLogin(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqUserLoginField: *mut CThostFtdcReqUserLoginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqUserLogout@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcUserLogoutField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqUserLogout(
        this: *mut Rust_CThostFtdcTraderApi,
        pUserLogout: *mut CThostFtdcUserLogoutField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqUserPasswordUpdate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcUserPasswordUpdateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqUserPasswordUpdate(
        this: *mut Rust_CThostFtdcTraderApi,
        pUserPasswordUpdate: *mut CThostFtdcUserPasswordUpdateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqTradingAccountPasswordUpdate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcTradingAccountPasswordUpdateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqTradingAccountPasswordUpdate(
        this: *mut Rust_CThostFtdcTraderApi,
        pTradingAccountPasswordUpdate: *mut CThostFtdcTradingAccountPasswordUpdateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqUserAuthMethod@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcReqUserAuthMethodField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqUserAuthMethod(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqUserAuthMethod: *mut CThostFtdcReqUserAuthMethodField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqGenUserCaptcha@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcReqGenUserCaptchaField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqGenUserCaptcha(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqGenUserCaptcha: *mut CThostFtdcReqGenUserCaptchaField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqGenUserText@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcReqGenUserTextField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqGenUserText(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqGenUserText: *mut CThostFtdcReqGenUserTextField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqUserLoginWithCaptcha@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcReqUserLoginWithCaptchaField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqUserLoginWithCaptcha(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqUserLoginWithCaptcha: *mut CThostFtdcReqUserLoginWithCaptchaField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqUserLoginWithText@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcReqUserLoginWithTextField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqUserLoginWithText(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqUserLoginWithText: *mut CThostFtdcReqUserLoginWithTextField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqUserLoginWithOTP@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcReqUserLoginWithOTPField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqUserLoginWithOTP(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqUserLoginWithOTP: *mut CThostFtdcReqUserLoginWithOTPField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqOrderInsert@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcInputOrderField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqOrderInsert(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputOrder: *mut CThostFtdcInputOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqParkedOrderInsert@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcParkedOrderField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqParkedOrderInsert(
        this: *mut Rust_CThostFtdcTraderApi,
        pParkedOrder: *mut CThostFtdcParkedOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqParkedOrderAction@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcParkedOrderActionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqParkedOrderAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pParkedOrderAction: *mut CThostFtdcParkedOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqOrderAction@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcInputOrderActionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqOrderAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputOrderAction: *mut CThostFtdcInputOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryMaxOrderVolume@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryMaxOrderVolumeField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryMaxOrderVolume(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryMaxOrderVolume: *mut CThostFtdcQryMaxOrderVolumeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqSettlementInfoConfirm@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcSettlementInfoConfirmField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqSettlementInfoConfirm(
        this: *mut Rust_CThostFtdcTraderApi,
        pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqRemoveParkedOrder@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcRemoveParkedOrderField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqRemoveParkedOrder(
        this: *mut Rust_CThostFtdcTraderApi,
        pRemoveParkedOrder: *mut CThostFtdcRemoveParkedOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqRemoveParkedOrderAction@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcRemoveParkedOrderActionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqRemoveParkedOrderAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pRemoveParkedOrderAction: *mut CThostFtdcRemoveParkedOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqExecOrderInsert@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcInputExecOrderField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqExecOrderInsert(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputExecOrder: *mut CThostFtdcInputExecOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqExecOrderAction@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcInputExecOrderActionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqExecOrderAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputExecOrderAction: *mut CThostFtdcInputExecOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqForQuoteInsert@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcInputForQuoteField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqForQuoteInsert(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputForQuote: *mut CThostFtdcInputForQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQuoteInsert@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcInputQuoteField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQuoteInsert(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputQuote: *mut CThostFtdcInputQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQuoteAction@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcInputQuoteActionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQuoteAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputQuoteAction: *mut CThostFtdcInputQuoteActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqBatchOrderAction@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcInputBatchOrderActionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqBatchOrderAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputBatchOrderAction: *mut CThostFtdcInputBatchOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqOptionSelfCloseInsert@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcInputOptionSelfCloseField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqOptionSelfCloseInsert(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqOptionSelfCloseAction@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcInputOptionSelfCloseActionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqOptionSelfCloseAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputOptionSelfCloseAction: *mut CThostFtdcInputOptionSelfCloseActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqCombActionInsert@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcInputCombActionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqCombActionInsert(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputCombAction: *mut CThostFtdcInputCombActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryOrder@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryOrderField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryOrder(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryOrder: *mut CThostFtdcQryOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryTrade@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryTradeField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryTrade(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryTrade: *mut CThostFtdcQryTradeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInvestorPosition@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInvestorPositionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestorPosition(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestorPosition: *mut CThostFtdcQryInvestorPositionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryTradingAccount@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryTradingAccountField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryTradingAccount(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryTradingAccount: *mut CThostFtdcQryTradingAccountField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInvestor@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInvestorField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestor(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestor: *mut CThostFtdcQryInvestorField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryTradingCode@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryTradingCodeField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryTradingCode(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryTradingCode: *mut CThostFtdcQryTradingCodeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInstrumentMarginRate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInstrumentMarginRateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInstrumentMarginRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInstrumentMarginRate: *mut CThostFtdcQryInstrumentMarginRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInstrumentCommissionRate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInstrumentCommissionRateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInstrumentCommissionRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInstrumentCommissionRate: *mut CThostFtdcQryInstrumentCommissionRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryExchange@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryExchangeField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryExchange(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryExchange: *mut CThostFtdcQryExchangeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryProduct@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryProductField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryProduct(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryProduct: *mut CThostFtdcQryProductField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInstrument@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInstrumentField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInstrument(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInstrument: *mut CThostFtdcQryInstrumentField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryDepthMarketData@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryDepthMarketDataField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryDepthMarketData(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryDepthMarketData: *mut CThostFtdcQryDepthMarketDataField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryTraderOffer@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryTraderOfferField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryTraderOffer(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryTraderOffer: *mut CThostFtdcQryTraderOfferField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQrySettlementInfo@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQrySettlementInfoField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySettlementInfo(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySettlementInfo: *mut CThostFtdcQrySettlementInfoField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryTransferBank@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryTransferBankField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryTransferBank(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryTransferBank: *mut CThostFtdcQryTransferBankField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInvestorPositionDetail@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInvestorPositionDetailField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestorPositionDetail(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestorPositionDetail: *mut CThostFtdcQryInvestorPositionDetailField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryNotice@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryNoticeField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryNotice(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryNotice: *mut CThostFtdcQryNoticeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQrySettlementInfoConfirm@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQrySettlementInfoConfirmField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySettlementInfoConfirm(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySettlementInfoConfirm: *mut CThostFtdcQrySettlementInfoConfirmField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInvestorPositionCombineDetail@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInvestorPositionCombineDetailField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestorPositionCombineDetail(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestorPositionCombineDetail: *mut CThostFtdcQryInvestorPositionCombineDetailField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryCFMMCTradingAccountKey@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryCFMMCTradingAccountKeyField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryCFMMCTradingAccountKey(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryCFMMCTradingAccountKey: *mut CThostFtdcQryCFMMCTradingAccountKeyField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryEWarrantOffset@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryEWarrantOffsetField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryEWarrantOffset(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryEWarrantOffset: *mut CThostFtdcQryEWarrantOffsetField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInvestorProductGroupMargin@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInvestorProductGroupMarginField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestorProductGroupMargin(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestorProductGroupMargin: *mut CThostFtdcQryInvestorProductGroupMarginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryExchangeMarginRate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryExchangeMarginRateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryExchangeMarginRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryExchangeMarginRate: *mut CThostFtdcQryExchangeMarginRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryExchangeMarginRateAdjust@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryExchangeMarginRateAdjustField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryExchangeMarginRateAdjust(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryExchangeMarginRateAdjust: *mut CThostFtdcQryExchangeMarginRateAdjustField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryExchangeRate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryExchangeRateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryExchangeRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryExchangeRate: *mut CThostFtdcQryExchangeRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQrySecAgentACIDMap@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQrySecAgentACIDMapField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySecAgentACIDMap(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySecAgentACIDMap: *mut CThostFtdcQrySecAgentACIDMapField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryProductExchRate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryProductExchRateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryProductExchRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryProductExchRate: *mut CThostFtdcQryProductExchRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryProductGroup@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryProductGroupField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryProductGroup(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryProductGroup: *mut CThostFtdcQryProductGroupField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryMMInstrumentCommissionRate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryMMInstrumentCommissionRateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryMMInstrumentCommissionRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryMMInstrumentCommissionRate: *mut CThostFtdcQryMMInstrumentCommissionRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryMMOptionInstrCommRate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryMMOptionInstrCommRateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryMMOptionInstrCommRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryMMOptionInstrCommRate: *mut CThostFtdcQryMMOptionInstrCommRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInstrumentOrderCommRate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInstrumentOrderCommRateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInstrumentOrderCommRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInstrumentOrderCommRate: *mut CThostFtdcQryInstrumentOrderCommRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQrySecAgentTradingAccount@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryTradingAccountField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySecAgentTradingAccount(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryTradingAccount: *mut CThostFtdcQryTradingAccountField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQrySecAgentCheckMode@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQrySecAgentCheckModeField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySecAgentCheckMode(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySecAgentCheckMode: *mut CThostFtdcQrySecAgentCheckModeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQrySecAgentTradeInfo@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQrySecAgentTradeInfoField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySecAgentTradeInfo(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySecAgentTradeInfo: *mut CThostFtdcQrySecAgentTradeInfoField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryOptionInstrTradeCost@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryOptionInstrTradeCostField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryOptionInstrTradeCost(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryOptionInstrTradeCost: *mut CThostFtdcQryOptionInstrTradeCostField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryOptionInstrCommRate@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryOptionInstrCommRateField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryOptionInstrCommRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryOptionInstrCommRate: *mut CThostFtdcQryOptionInstrCommRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryExecOrder@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryExecOrderField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryExecOrder(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryExecOrder: *mut CThostFtdcQryExecOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryForQuote@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryForQuoteField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryForQuote(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryForQuote: *mut CThostFtdcQryForQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryQuote@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryQuoteField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryQuote(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryQuote: *mut CThostFtdcQryQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryOptionSelfClose@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryOptionSelfCloseField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryOptionSelfClose(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryOptionSelfClose: *mut CThostFtdcQryOptionSelfCloseField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInvestUnit@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInvestUnitField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestUnit(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestUnit: *mut CThostFtdcQryInvestUnitField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryCombInstrumentGuard@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryCombInstrumentGuardField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryCombInstrumentGuard(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryCombInstrumentGuard: *mut CThostFtdcQryCombInstrumentGuardField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryCombAction@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryCombActionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryCombAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryCombAction: *mut CThostFtdcQryCombActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryTransferSerial@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryTransferSerialField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryTransferSerial(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryTransferSerial: *mut CThostFtdcQryTransferSerialField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryAccountregister@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryAccountregisterField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryAccountregister(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryAccountregister: *mut CThostFtdcQryAccountregisterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryContractBank@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryContractBankField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryContractBank(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryContractBank: *mut CThostFtdcQryContractBankField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryParkedOrder@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryParkedOrderField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryParkedOrder(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryParkedOrder: *mut CThostFtdcQryParkedOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryParkedOrderAction@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryParkedOrderActionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryParkedOrderAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryParkedOrderAction: *mut CThostFtdcQryParkedOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryTradingNotice@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryTradingNoticeField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryTradingNotice(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryTradingNotice: *mut CThostFtdcQryTradingNoticeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryBrokerTradingParams@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryBrokerTradingParamsField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryBrokerTradingParams(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryBrokerTradingParams: *mut CThostFtdcQryBrokerTradingParamsField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryBrokerTradingAlgos@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryBrokerTradingAlgosField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryBrokerTradingAlgos(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryBrokerTradingAlgos: *mut CThostFtdcQryBrokerTradingAlgosField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQueryCFMMCTradingAccountToken@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQueryCFMMCTradingAccountTokenField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQueryCFMMCTradingAccountToken(
        this: *mut Rust_CThostFtdcTraderApi,
        pQueryCFMMCTradingAccountToken: *mut CThostFtdcQueryCFMMCTradingAccountTokenField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqFromBankToFutureByFuture@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcReqTransferField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqFromBankToFutureByFuture(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqFromFutureToBankByFuture@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcReqTransferField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqFromFutureToBankByFuture(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQueryBankAccountMoneyByFuture@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcReqQueryAccountField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQueryBankAccountMoneyByFuture(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqQueryAccount: *mut CThostFtdcReqQueryAccountField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryClassifiedInstrument@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryClassifiedInstrumentField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryClassifiedInstrument(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryClassifiedInstrument: *mut CThostFtdcQryClassifiedInstrumentField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryCombPromotionParam@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryCombPromotionParamField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryCombPromotionParam(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryCombPromotionParam: *mut CThostFtdcQryCombPromotionParamField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryRiskSettleInvstPosition@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryRiskSettleInvstPositionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryRiskSettleInvstPosition(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryRiskSettleInvstPosition: *mut CThostFtdcQryRiskSettleInvstPositionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryRiskSettleProductStatus@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryRiskSettleProductStatusField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryRiskSettleProductStatus(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryRiskSettleProductStatus: *mut CThostFtdcQryRiskSettleProductStatusField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQrySPBMFutureParameter@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQrySPBMFutureParameterField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySPBMFutureParameter(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySPBMFutureParameter: *mut CThostFtdcQrySPBMFutureParameterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQrySPBMOptionParameter@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQrySPBMOptionParameterField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySPBMOptionParameter(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySPBMOptionParameter: *mut CThostFtdcQrySPBMOptionParameterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQrySPBMIntraParameter@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQrySPBMIntraParameterField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySPBMIntraParameter(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySPBMIntraParameter: *mut CThostFtdcQrySPBMIntraParameterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQrySPBMInterParameter@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQrySPBMInterParameterField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySPBMInterParameter(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySPBMInterParameter: *mut CThostFtdcQrySPBMInterParameterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQrySPBMPortfDefinition@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQrySPBMPortfDefinitionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySPBMPortfDefinition(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySPBMPortfDefinition: *mut CThostFtdcQrySPBMPortfDefinitionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQrySPBMInvestorPortfDef@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQrySPBMInvestorPortfDefField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySPBMInvestorPortfDef(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySPBMInvestorPortfDef: *mut CThostFtdcQrySPBMInvestorPortfDefField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInvestorPortfMarginRatio@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInvestorPortfMarginRatioField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestorPortfMarginRatio(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestorPortfMarginRatio: *mut CThostFtdcQryInvestorPortfMarginRatioField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInvestorProdSPBMDetail@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInvestorProdSPBMDetailField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestorProdSPBMDetail(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestorProdSPBMDetail: *mut CThostFtdcQryInvestorProdSPBMDetailField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInvestorCommoditySPMMMargin@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInvestorCommoditySPMMMarginField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestorCommoditySPMMMargin(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestorCommoditySPMMMargin: *mut CThostFtdcQryInvestorCommoditySPMMMarginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInvestorCommodityGroupSPMMMargin@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInvestorCommodityGroupSPMMMarginField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestorCommodityGroupSPMMMargin(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestorCommodityGroupSPMMMargin : * mut CThostFtdcQryInvestorCommodityGroupSPMMMarginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQrySPMMInstParam@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQrySPMMInstParamField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySPMMInstParam(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySPMMInstParam: *mut CThostFtdcQrySPMMInstParamField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQrySPMMProductParam@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQrySPMMProductParamField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySPMMProductParam(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySPMMProductParam: *mut CThostFtdcQrySPMMProductParamField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQrySPBMAddOnInterParameter@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQrySPBMAddOnInterParameterField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySPBMAddOnInterParameter(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySPBMAddOnInterParameter: *mut CThostFtdcQrySPBMAddOnInterParameterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryRCAMSCombProductInfo@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryRCAMSCombProductInfoField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryRCAMSCombProductInfo(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryRCAMSCombProductInfo: *mut CThostFtdcQryRCAMSCombProductInfoField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryRCAMSInstrParameter@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryRCAMSInstrParameterField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryRCAMSInstrParameter(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryRCAMSInstrParameter: *mut CThostFtdcQryRCAMSInstrParameterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryRCAMSIntraParameter@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryRCAMSIntraParameterField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryRCAMSIntraParameter(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryRCAMSIntraParameter: *mut CThostFtdcQryRCAMSIntraParameterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryRCAMSInterParameter@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryRCAMSInterParameterField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryRCAMSInterParameter(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryRCAMSInterParameter: *mut CThostFtdcQryRCAMSInterParameterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryRCAMSShortOptAdjustParam@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryRCAMSShortOptAdjustParamField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryRCAMSShortOptAdjustParam(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryRCAMSShortOptAdjustParam: *mut CThostFtdcQryRCAMSShortOptAdjustParamField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryRCAMSInvestorCombPosition@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryRCAMSInvestorCombPositionField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryRCAMSInvestorCombPosition(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryRCAMSInvestorCombPosition: *mut CThostFtdcQryRCAMSInvestorCombPositionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInvestorProdRCAMSMargin@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInvestorProdRCAMSMarginField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestorProdRCAMSMargin(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestorProdRCAMSMargin: *mut CThostFtdcQryInvestorProdRCAMSMarginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryRULEInstrParameter@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryRULEInstrParameterField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryRULEInstrParameter(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryRULEInstrParameter: *mut CThostFtdcQryRULEInstrParameterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryRULEIntraParameter@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryRULEIntraParameterField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryRULEIntraParameter(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryRULEIntraParameter: *mut CThostFtdcQryRULEIntraParameterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryRULEInterParameter@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryRULEInterParameterField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryRULEInterParameter(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryRULEInterParameter: *mut CThostFtdcQryRULEInterParameterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?ReqQryInvestorProdRULEMargin@Rust_CThostFtdcTraderApi@@QEAAHPEAUCThostFtdcQryInvestorProdRULEMarginField@@H@Z"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestorProdRULEMargin(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestorProdRULEMargin: *mut CThostFtdcQryInvestorProdRULEMarginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}??0Rust_CThostFtdcTraderApi@@QEAA@PEAVCThostFtdcTraderApi@@@Z"]
    pub fn Rust_CThostFtdcTraderApi_Rust_CThostFtdcTraderApi(
        this: *mut Rust_CThostFtdcTraderApi,
        member: *mut CThostFtdcTraderApi,
    );
}
extern "C" {
    #[link_name = "\u{1}??1Rust_CThostFtdcTraderApi@@QEAA@XZ"]
    pub fn Rust_CThostFtdcTraderApi_Rust_CThostFtdcTraderApi_destructor(
        this: *mut Rust_CThostFtdcTraderApi,
    );
}
impl Rust_CThostFtdcTraderApi {
    #[inline]
    pub unsafe fn Release(&mut self) {
        Rust_CThostFtdcTraderApi_Release(self)
    }
    #[inline]
    pub unsafe fn Init(&mut self) {
        Rust_CThostFtdcTraderApi_Init(self)
    }
    #[inline]
    pub unsafe fn Join(&mut self) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_Join(self)
    }
    #[inline]
    pub unsafe fn GetTradingDay(&mut self) -> *const ::std::os::raw::c_char {
        Rust_CThostFtdcTraderApi_GetTradingDay(self)
    }
    #[inline]
    pub unsafe fn RegisterFront(&mut self, pszFrontAddress: *mut ::std::os::raw::c_char) {
        Rust_CThostFtdcTraderApi_RegisterFront(self, pszFrontAddress)
    }
    #[inline]
    pub unsafe fn RegisterNameServer(&mut self, pszNsAddress: *mut ::std::os::raw::c_char) {
        Rust_CThostFtdcTraderApi_RegisterNameServer(self, pszNsAddress)
    }
    #[inline]
    pub unsafe fn RegisterFensUserInfo(&mut self, pFensUserInfo: *mut CThostFtdcFensUserInfoField) {
        Rust_CThostFtdcTraderApi_RegisterFensUserInfo(self, pFensUserInfo)
    }
    #[inline]
    pub unsafe fn RegisterSpi(&mut self, pSpi: *mut CThostFtdcTraderSpi) {
        Rust_CThostFtdcTraderApi_RegisterSpi(self, pSpi)
    }
    #[inline]
    pub unsafe fn SubscribePrivateTopic(&mut self, nResumeType: THOST_TE_RESUME_TYPE) {
        Rust_CThostFtdcTraderApi_SubscribePrivateTopic(self, nResumeType)
    }
    #[inline]
    pub unsafe fn SubscribePublicTopic(&mut self, nResumeType: THOST_TE_RESUME_TYPE) {
        Rust_CThostFtdcTraderApi_SubscribePublicTopic(self, nResumeType)
    }
    #[inline]
    pub unsafe fn ReqAuthenticate(
        &mut self,
        pReqAuthenticateField: *mut CThostFtdcReqAuthenticateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqAuthenticate(self, pReqAuthenticateField, nRequestID)
    }
    #[inline]
    pub unsafe fn RegisterUserSystemInfo(
        &mut self,
        pUserSystemInfo: *mut CThostFtdcUserSystemInfoField,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_RegisterUserSystemInfo(self, pUserSystemInfo)
    }
    #[inline]
    pub unsafe fn SubmitUserSystemInfo(
        &mut self,
        pUserSystemInfo: *mut CThostFtdcUserSystemInfoField,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_SubmitUserSystemInfo(self, pUserSystemInfo)
    }
    #[inline]
    pub unsafe fn ReqUserLogin(
        &mut self,
        pReqUserLoginField: *mut CThostFtdcReqUserLoginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqUserLogin(self, pReqUserLoginField, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqUserLogout(
        &mut self,
        pUserLogout: *mut CThostFtdcUserLogoutField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqUserLogout(self, pUserLogout, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqUserPasswordUpdate(
        &mut self,
        pUserPasswordUpdate: *mut CThostFtdcUserPasswordUpdateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqUserPasswordUpdate(self, pUserPasswordUpdate, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqTradingAccountPasswordUpdate(
        &mut self,
        pTradingAccountPasswordUpdate: *mut CThostFtdcTradingAccountPasswordUpdateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqTradingAccountPasswordUpdate(
            self,
            pTradingAccountPasswordUpdate,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqUserAuthMethod(
        &mut self,
        pReqUserAuthMethod: *mut CThostFtdcReqUserAuthMethodField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqUserAuthMethod(self, pReqUserAuthMethod, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqGenUserCaptcha(
        &mut self,
        pReqGenUserCaptcha: *mut CThostFtdcReqGenUserCaptchaField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqGenUserCaptcha(self, pReqGenUserCaptcha, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqGenUserText(
        &mut self,
        pReqGenUserText: *mut CThostFtdcReqGenUserTextField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqGenUserText(self, pReqGenUserText, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqUserLoginWithCaptcha(
        &mut self,
        pReqUserLoginWithCaptcha: *mut CThostFtdcReqUserLoginWithCaptchaField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqUserLoginWithCaptcha(self, pReqUserLoginWithCaptcha, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqUserLoginWithText(
        &mut self,
        pReqUserLoginWithText: *mut CThostFtdcReqUserLoginWithTextField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqUserLoginWithText(self, pReqUserLoginWithText, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqUserLoginWithOTP(
        &mut self,
        pReqUserLoginWithOTP: *mut CThostFtdcReqUserLoginWithOTPField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqUserLoginWithOTP(self, pReqUserLoginWithOTP, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqOrderInsert(
        &mut self,
        pInputOrder: *mut CThostFtdcInputOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqOrderInsert(self, pInputOrder, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqParkedOrderInsert(
        &mut self,
        pParkedOrder: *mut CThostFtdcParkedOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqParkedOrderInsert(self, pParkedOrder, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqParkedOrderAction(
        &mut self,
        pParkedOrderAction: *mut CThostFtdcParkedOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqParkedOrderAction(self, pParkedOrderAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqOrderAction(
        &mut self,
        pInputOrderAction: *mut CThostFtdcInputOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqOrderAction(self, pInputOrderAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryMaxOrderVolume(
        &mut self,
        pQryMaxOrderVolume: *mut CThostFtdcQryMaxOrderVolumeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryMaxOrderVolume(self, pQryMaxOrderVolume, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqSettlementInfoConfirm(
        &mut self,
        pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqSettlementInfoConfirm(self, pSettlementInfoConfirm, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqRemoveParkedOrder(
        &mut self,
        pRemoveParkedOrder: *mut CThostFtdcRemoveParkedOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqRemoveParkedOrder(self, pRemoveParkedOrder, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqRemoveParkedOrderAction(
        &mut self,
        pRemoveParkedOrderAction: *mut CThostFtdcRemoveParkedOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqRemoveParkedOrderAction(
            self,
            pRemoveParkedOrderAction,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqExecOrderInsert(
        &mut self,
        pInputExecOrder: *mut CThostFtdcInputExecOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqExecOrderInsert(self, pInputExecOrder, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqExecOrderAction(
        &mut self,
        pInputExecOrderAction: *mut CThostFtdcInputExecOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqExecOrderAction(self, pInputExecOrderAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqForQuoteInsert(
        &mut self,
        pInputForQuote: *mut CThostFtdcInputForQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqForQuoteInsert(self, pInputForQuote, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQuoteInsert(
        &mut self,
        pInputQuote: *mut CThostFtdcInputQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQuoteInsert(self, pInputQuote, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQuoteAction(
        &mut self,
        pInputQuoteAction: *mut CThostFtdcInputQuoteActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQuoteAction(self, pInputQuoteAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqBatchOrderAction(
        &mut self,
        pInputBatchOrderAction: *mut CThostFtdcInputBatchOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqBatchOrderAction(self, pInputBatchOrderAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqOptionSelfCloseInsert(
        &mut self,
        pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqOptionSelfCloseInsert(self, pInputOptionSelfClose, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqOptionSelfCloseAction(
        &mut self,
        pInputOptionSelfCloseAction: *mut CThostFtdcInputOptionSelfCloseActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqOptionSelfCloseAction(
            self,
            pInputOptionSelfCloseAction,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqCombActionInsert(
        &mut self,
        pInputCombAction: *mut CThostFtdcInputCombActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqCombActionInsert(self, pInputCombAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryOrder(
        &mut self,
        pQryOrder: *mut CThostFtdcQryOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryOrder(self, pQryOrder, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryTrade(
        &mut self,
        pQryTrade: *mut CThostFtdcQryTradeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryTrade(self, pQryTrade, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryInvestorPosition(
        &mut self,
        pQryInvestorPosition: *mut CThostFtdcQryInvestorPositionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestorPosition(self, pQryInvestorPosition, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryTradingAccount(
        &mut self,
        pQryTradingAccount: *mut CThostFtdcQryTradingAccountField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryTradingAccount(self, pQryTradingAccount, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryInvestor(
        &mut self,
        pQryInvestor: *mut CThostFtdcQryInvestorField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestor(self, pQryInvestor, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryTradingCode(
        &mut self,
        pQryTradingCode: *mut CThostFtdcQryTradingCodeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryTradingCode(self, pQryTradingCode, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryInstrumentMarginRate(
        &mut self,
        pQryInstrumentMarginRate: *mut CThostFtdcQryInstrumentMarginRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInstrumentMarginRate(
            self,
            pQryInstrumentMarginRate,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryInstrumentCommissionRate(
        &mut self,
        pQryInstrumentCommissionRate: *mut CThostFtdcQryInstrumentCommissionRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInstrumentCommissionRate(
            self,
            pQryInstrumentCommissionRate,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryExchange(
        &mut self,
        pQryExchange: *mut CThostFtdcQryExchangeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryExchange(self, pQryExchange, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryProduct(
        &mut self,
        pQryProduct: *mut CThostFtdcQryProductField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryProduct(self, pQryProduct, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryInstrument(
        &mut self,
        pQryInstrument: *mut CThostFtdcQryInstrumentField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInstrument(self, pQryInstrument, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryDepthMarketData(
        &mut self,
        pQryDepthMarketData: *mut CThostFtdcQryDepthMarketDataField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryDepthMarketData(self, pQryDepthMarketData, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryTraderOffer(
        &mut self,
        pQryTraderOffer: *mut CThostFtdcQryTraderOfferField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryTraderOffer(self, pQryTraderOffer, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQrySettlementInfo(
        &mut self,
        pQrySettlementInfo: *mut CThostFtdcQrySettlementInfoField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySettlementInfo(self, pQrySettlementInfo, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryTransferBank(
        &mut self,
        pQryTransferBank: *mut CThostFtdcQryTransferBankField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryTransferBank(self, pQryTransferBank, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryInvestorPositionDetail(
        &mut self,
        pQryInvestorPositionDetail: *mut CThostFtdcQryInvestorPositionDetailField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestorPositionDetail(
            self,
            pQryInvestorPositionDetail,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryNotice(
        &mut self,
        pQryNotice: *mut CThostFtdcQryNoticeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryNotice(self, pQryNotice, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQrySettlementInfoConfirm(
        &mut self,
        pQrySettlementInfoConfirm: *mut CThostFtdcQrySettlementInfoConfirmField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySettlementInfoConfirm(
            self,
            pQrySettlementInfoConfirm,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryInvestorPositionCombineDetail(
        &mut self,
        pQryInvestorPositionCombineDetail: *mut CThostFtdcQryInvestorPositionCombineDetailField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestorPositionCombineDetail(
            self,
            pQryInvestorPositionCombineDetail,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryCFMMCTradingAccountKey(
        &mut self,
        pQryCFMMCTradingAccountKey: *mut CThostFtdcQryCFMMCTradingAccountKeyField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryCFMMCTradingAccountKey(
            self,
            pQryCFMMCTradingAccountKey,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryEWarrantOffset(
        &mut self,
        pQryEWarrantOffset: *mut CThostFtdcQryEWarrantOffsetField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryEWarrantOffset(self, pQryEWarrantOffset, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryInvestorProductGroupMargin(
        &mut self,
        pQryInvestorProductGroupMargin: *mut CThostFtdcQryInvestorProductGroupMarginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestorProductGroupMargin(
            self,
            pQryInvestorProductGroupMargin,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryExchangeMarginRate(
        &mut self,
        pQryExchangeMarginRate: *mut CThostFtdcQryExchangeMarginRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryExchangeMarginRate(self, pQryExchangeMarginRate, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryExchangeMarginRateAdjust(
        &mut self,
        pQryExchangeMarginRateAdjust: *mut CThostFtdcQryExchangeMarginRateAdjustField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryExchangeMarginRateAdjust(
            self,
            pQryExchangeMarginRateAdjust,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryExchangeRate(
        &mut self,
        pQryExchangeRate: *mut CThostFtdcQryExchangeRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryExchangeRate(self, pQryExchangeRate, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQrySecAgentACIDMap(
        &mut self,
        pQrySecAgentACIDMap: *mut CThostFtdcQrySecAgentACIDMapField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySecAgentACIDMap(self, pQrySecAgentACIDMap, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryProductExchRate(
        &mut self,
        pQryProductExchRate: *mut CThostFtdcQryProductExchRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryProductExchRate(self, pQryProductExchRate, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryProductGroup(
        &mut self,
        pQryProductGroup: *mut CThostFtdcQryProductGroupField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryProductGroup(self, pQryProductGroup, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryMMInstrumentCommissionRate(
        &mut self,
        pQryMMInstrumentCommissionRate: *mut CThostFtdcQryMMInstrumentCommissionRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryMMInstrumentCommissionRate(
            self,
            pQryMMInstrumentCommissionRate,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryMMOptionInstrCommRate(
        &mut self,
        pQryMMOptionInstrCommRate: *mut CThostFtdcQryMMOptionInstrCommRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryMMOptionInstrCommRate(
            self,
            pQryMMOptionInstrCommRate,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryInstrumentOrderCommRate(
        &mut self,
        pQryInstrumentOrderCommRate: *mut CThostFtdcQryInstrumentOrderCommRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInstrumentOrderCommRate(
            self,
            pQryInstrumentOrderCommRate,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQrySecAgentTradingAccount(
        &mut self,
        pQryTradingAccount: *mut CThostFtdcQryTradingAccountField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySecAgentTradingAccount(self, pQryTradingAccount, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQrySecAgentCheckMode(
        &mut self,
        pQrySecAgentCheckMode: *mut CThostFtdcQrySecAgentCheckModeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySecAgentCheckMode(self, pQrySecAgentCheckMode, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQrySecAgentTradeInfo(
        &mut self,
        pQrySecAgentTradeInfo: *mut CThostFtdcQrySecAgentTradeInfoField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySecAgentTradeInfo(self, pQrySecAgentTradeInfo, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryOptionInstrTradeCost(
        &mut self,
        pQryOptionInstrTradeCost: *mut CThostFtdcQryOptionInstrTradeCostField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryOptionInstrTradeCost(
            self,
            pQryOptionInstrTradeCost,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryOptionInstrCommRate(
        &mut self,
        pQryOptionInstrCommRate: *mut CThostFtdcQryOptionInstrCommRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryOptionInstrCommRate(
            self,
            pQryOptionInstrCommRate,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryExecOrder(
        &mut self,
        pQryExecOrder: *mut CThostFtdcQryExecOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryExecOrder(self, pQryExecOrder, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryForQuote(
        &mut self,
        pQryForQuote: *mut CThostFtdcQryForQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryForQuote(self, pQryForQuote, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryQuote(
        &mut self,
        pQryQuote: *mut CThostFtdcQryQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryQuote(self, pQryQuote, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryOptionSelfClose(
        &mut self,
        pQryOptionSelfClose: *mut CThostFtdcQryOptionSelfCloseField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryOptionSelfClose(self, pQryOptionSelfClose, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryInvestUnit(
        &mut self,
        pQryInvestUnit: *mut CThostFtdcQryInvestUnitField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestUnit(self, pQryInvestUnit, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryCombInstrumentGuard(
        &mut self,
        pQryCombInstrumentGuard: *mut CThostFtdcQryCombInstrumentGuardField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryCombInstrumentGuard(
            self,
            pQryCombInstrumentGuard,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryCombAction(
        &mut self,
        pQryCombAction: *mut CThostFtdcQryCombActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryCombAction(self, pQryCombAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryTransferSerial(
        &mut self,
        pQryTransferSerial: *mut CThostFtdcQryTransferSerialField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryTransferSerial(self, pQryTransferSerial, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryAccountregister(
        &mut self,
        pQryAccountregister: *mut CThostFtdcQryAccountregisterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryAccountregister(self, pQryAccountregister, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryContractBank(
        &mut self,
        pQryContractBank: *mut CThostFtdcQryContractBankField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryContractBank(self, pQryContractBank, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryParkedOrder(
        &mut self,
        pQryParkedOrder: *mut CThostFtdcQryParkedOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryParkedOrder(self, pQryParkedOrder, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryParkedOrderAction(
        &mut self,
        pQryParkedOrderAction: *mut CThostFtdcQryParkedOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryParkedOrderAction(self, pQryParkedOrderAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryTradingNotice(
        &mut self,
        pQryTradingNotice: *mut CThostFtdcQryTradingNoticeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryTradingNotice(self, pQryTradingNotice, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryBrokerTradingParams(
        &mut self,
        pQryBrokerTradingParams: *mut CThostFtdcQryBrokerTradingParamsField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryBrokerTradingParams(
            self,
            pQryBrokerTradingParams,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryBrokerTradingAlgos(
        &mut self,
        pQryBrokerTradingAlgos: *mut CThostFtdcQryBrokerTradingAlgosField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryBrokerTradingAlgos(self, pQryBrokerTradingAlgos, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQueryCFMMCTradingAccountToken(
        &mut self,
        pQueryCFMMCTradingAccountToken: *mut CThostFtdcQueryCFMMCTradingAccountTokenField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQueryCFMMCTradingAccountToken(
            self,
            pQueryCFMMCTradingAccountToken,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqFromBankToFutureByFuture(
        &mut self,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqFromBankToFutureByFuture(self, pReqTransfer, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqFromFutureToBankByFuture(
        &mut self,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqFromFutureToBankByFuture(self, pReqTransfer, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQueryBankAccountMoneyByFuture(
        &mut self,
        pReqQueryAccount: *mut CThostFtdcReqQueryAccountField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQueryBankAccountMoneyByFuture(
            self,
            pReqQueryAccount,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryClassifiedInstrument(
        &mut self,
        pQryClassifiedInstrument: *mut CThostFtdcQryClassifiedInstrumentField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryClassifiedInstrument(
            self,
            pQryClassifiedInstrument,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryCombPromotionParam(
        &mut self,
        pQryCombPromotionParam: *mut CThostFtdcQryCombPromotionParamField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryCombPromotionParam(self, pQryCombPromotionParam, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryRiskSettleInvstPosition(
        &mut self,
        pQryRiskSettleInvstPosition: *mut CThostFtdcQryRiskSettleInvstPositionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryRiskSettleInvstPosition(
            self,
            pQryRiskSettleInvstPosition,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryRiskSettleProductStatus(
        &mut self,
        pQryRiskSettleProductStatus: *mut CThostFtdcQryRiskSettleProductStatusField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryRiskSettleProductStatus(
            self,
            pQryRiskSettleProductStatus,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQrySPBMFutureParameter(
        &mut self,
        pQrySPBMFutureParameter: *mut CThostFtdcQrySPBMFutureParameterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySPBMFutureParameter(
            self,
            pQrySPBMFutureParameter,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQrySPBMOptionParameter(
        &mut self,
        pQrySPBMOptionParameter: *mut CThostFtdcQrySPBMOptionParameterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySPBMOptionParameter(
            self,
            pQrySPBMOptionParameter,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQrySPBMIntraParameter(
        &mut self,
        pQrySPBMIntraParameter: *mut CThostFtdcQrySPBMIntraParameterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySPBMIntraParameter(self, pQrySPBMIntraParameter, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQrySPBMInterParameter(
        &mut self,
        pQrySPBMInterParameter: *mut CThostFtdcQrySPBMInterParameterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySPBMInterParameter(self, pQrySPBMInterParameter, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQrySPBMPortfDefinition(
        &mut self,
        pQrySPBMPortfDefinition: *mut CThostFtdcQrySPBMPortfDefinitionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySPBMPortfDefinition(
            self,
            pQrySPBMPortfDefinition,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQrySPBMInvestorPortfDef(
        &mut self,
        pQrySPBMInvestorPortfDef: *mut CThostFtdcQrySPBMInvestorPortfDefField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySPBMInvestorPortfDef(
            self,
            pQrySPBMInvestorPortfDef,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryInvestorPortfMarginRatio(
        &mut self,
        pQryInvestorPortfMarginRatio: *mut CThostFtdcQryInvestorPortfMarginRatioField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestorPortfMarginRatio(
            self,
            pQryInvestorPortfMarginRatio,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryInvestorProdSPBMDetail(
        &mut self,
        pQryInvestorProdSPBMDetail: *mut CThostFtdcQryInvestorProdSPBMDetailField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestorProdSPBMDetail(
            self,
            pQryInvestorProdSPBMDetail,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryInvestorCommoditySPMMMargin(
        &mut self,
        pQryInvestorCommoditySPMMMargin: *mut CThostFtdcQryInvestorCommoditySPMMMarginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestorCommoditySPMMMargin(
            self,
            pQryInvestorCommoditySPMMMargin,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryInvestorCommodityGroupSPMMMargin(
        &mut self,
        pQryInvestorCommodityGroupSPMMMargin : * mut CThostFtdcQryInvestorCommodityGroupSPMMMarginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestorCommodityGroupSPMMMargin(
            self,
            pQryInvestorCommodityGroupSPMMMargin,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQrySPMMInstParam(
        &mut self,
        pQrySPMMInstParam: *mut CThostFtdcQrySPMMInstParamField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySPMMInstParam(self, pQrySPMMInstParam, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQrySPMMProductParam(
        &mut self,
        pQrySPMMProductParam: *mut CThostFtdcQrySPMMProductParamField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySPMMProductParam(self, pQrySPMMProductParam, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQrySPBMAddOnInterParameter(
        &mut self,
        pQrySPBMAddOnInterParameter: *mut CThostFtdcQrySPBMAddOnInterParameterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySPBMAddOnInterParameter(
            self,
            pQrySPBMAddOnInterParameter,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryRCAMSCombProductInfo(
        &mut self,
        pQryRCAMSCombProductInfo: *mut CThostFtdcQryRCAMSCombProductInfoField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryRCAMSCombProductInfo(
            self,
            pQryRCAMSCombProductInfo,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryRCAMSInstrParameter(
        &mut self,
        pQryRCAMSInstrParameter: *mut CThostFtdcQryRCAMSInstrParameterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryRCAMSInstrParameter(
            self,
            pQryRCAMSInstrParameter,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryRCAMSIntraParameter(
        &mut self,
        pQryRCAMSIntraParameter: *mut CThostFtdcQryRCAMSIntraParameterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryRCAMSIntraParameter(
            self,
            pQryRCAMSIntraParameter,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryRCAMSInterParameter(
        &mut self,
        pQryRCAMSInterParameter: *mut CThostFtdcQryRCAMSInterParameterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryRCAMSInterParameter(
            self,
            pQryRCAMSInterParameter,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryRCAMSShortOptAdjustParam(
        &mut self,
        pQryRCAMSShortOptAdjustParam: *mut CThostFtdcQryRCAMSShortOptAdjustParamField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryRCAMSShortOptAdjustParam(
            self,
            pQryRCAMSShortOptAdjustParam,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryRCAMSInvestorCombPosition(
        &mut self,
        pQryRCAMSInvestorCombPosition: *mut CThostFtdcQryRCAMSInvestorCombPositionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryRCAMSInvestorCombPosition(
            self,
            pQryRCAMSInvestorCombPosition,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryInvestorProdRCAMSMargin(
        &mut self,
        pQryInvestorProdRCAMSMargin: *mut CThostFtdcQryInvestorProdRCAMSMarginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestorProdRCAMSMargin(
            self,
            pQryInvestorProdRCAMSMargin,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryRULEInstrParameter(
        &mut self,
        pQryRULEInstrParameter: *mut CThostFtdcQryRULEInstrParameterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryRULEInstrParameter(self, pQryRULEInstrParameter, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryRULEIntraParameter(
        &mut self,
        pQryRULEIntraParameter: *mut CThostFtdcQryRULEIntraParameterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryRULEIntraParameter(self, pQryRULEIntraParameter, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryRULEInterParameter(
        &mut self,
        pQryRULEInterParameter: *mut CThostFtdcQryRULEInterParameterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryRULEInterParameter(self, pQryRULEInterParameter, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryInvestorProdRULEMargin(
        &mut self,
        pQryInvestorProdRULEMargin: *mut CThostFtdcQryInvestorProdRULEMarginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestorProdRULEMargin(
            self,
            pQryInvestorProdRULEMargin,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn new(member: *mut CThostFtdcTraderApi) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        Rust_CThostFtdcTraderApi_Rust_CThostFtdcTraderApi(__bindgen_tmp.as_mut_ptr(), member);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        Rust_CThostFtdcTraderApi_Rust_CThostFtdcTraderApi_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct Rust_CThostFtdcTraderSpi {
    pub _base: CThostFtdcTraderSpi,
    pub m_rust: *mut ::std::os::raw::c_void,
}
extern "C" {
    #[link_name = "\u{1}??0Rust_CThostFtdcTraderSpi@@QEAA@PEAX@Z"]
    pub fn Rust_CThostFtdcTraderSpi_Rust_CThostFtdcTraderSpi(
        this: *mut Rust_CThostFtdcTraderSpi,
        rust: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}??1Rust_CThostFtdcTraderSpi@@QEAA@XZ"]
    pub fn Rust_CThostFtdcTraderSpi_Rust_CThostFtdcTraderSpi_destructor(
        this: *mut Rust_CThostFtdcTraderSpi,
    );
}
impl Rust_CThostFtdcTraderSpi {
    #[inline]
    pub unsafe fn new(rust: *mut ::std::os::raw::c_void) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        Rust_CThostFtdcTraderSpi_Rust_CThostFtdcTraderSpi(__bindgen_tmp.as_mut_ptr(), rust);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        Rust_CThostFtdcTraderSpi_Rust_CThostFtdcTraderSpi_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}?OnFrontConnected@Rust_CThostFtdcTraderSpi@@UEAAXXZ"]
    pub fn Rust_CThostFtdcTraderSpi_OnFrontConnected(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}?OnFrontDisconnected@Rust_CThostFtdcTraderSpi@@UEAAXH@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnFrontDisconnected(
        this: *mut ::std::os::raw::c_void,
        nReason: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnHeartBeatWarning@Rust_CThostFtdcTraderSpi@@UEAAXH@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnHeartBeatWarning(
        this: *mut ::std::os::raw::c_void,
        nTimeLapse: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspAuthenticate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspAuthenticateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspAuthenticate(
        this: *mut ::std::os::raw::c_void,
        pRspAuthenticateField: *mut CThostFtdcRspAuthenticateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspUserLogin@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspUserLoginField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspUserLogin(
        this: *mut ::std::os::raw::c_void,
        pRspUserLogin: *mut CThostFtdcRspUserLoginField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspUserLogout@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcUserLogoutField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspUserLogout(
        this: *mut ::std::os::raw::c_void,
        pUserLogout: *mut CThostFtdcUserLogoutField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspUserPasswordUpdate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcUserPasswordUpdateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspUserPasswordUpdate(
        this: *mut ::std::os::raw::c_void,
        pUserPasswordUpdate: *mut CThostFtdcUserPasswordUpdateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspTradingAccountPasswordUpdate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcTradingAccountPasswordUpdateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspTradingAccountPasswordUpdate(
        this: *mut ::std::os::raw::c_void,
        pTradingAccountPasswordUpdate: *mut CThostFtdcTradingAccountPasswordUpdateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspUserAuthMethod@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspUserAuthMethodField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspUserAuthMethod(
        this: *mut ::std::os::raw::c_void,
        pRspUserAuthMethod: *mut CThostFtdcRspUserAuthMethodField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspGenUserCaptcha@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspGenUserCaptchaField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspGenUserCaptcha(
        this: *mut ::std::os::raw::c_void,
        pRspGenUserCaptcha: *mut CThostFtdcRspGenUserCaptchaField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspGenUserText@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspGenUserTextField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspGenUserText(
        this: *mut ::std::os::raw::c_void,
        pRspGenUserText: *mut CThostFtdcRspGenUserTextField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspOrderInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputOrderField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspOrderInsert(
        this: *mut ::std::os::raw::c_void,
        pInputOrder: *mut CThostFtdcInputOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspParkedOrderInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcParkedOrderField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspParkedOrderInsert(
        this: *mut ::std::os::raw::c_void,
        pParkedOrder: *mut CThostFtdcParkedOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspParkedOrderAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcParkedOrderActionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspParkedOrderAction(
        this: *mut ::std::os::raw::c_void,
        pParkedOrderAction: *mut CThostFtdcParkedOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspOrderAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputOrderActionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspOrderAction(
        this: *mut ::std::os::raw::c_void,
        pInputOrderAction: *mut CThostFtdcInputOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryMaxOrderVolume@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcQryMaxOrderVolumeField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryMaxOrderVolume(
        this: *mut ::std::os::raw::c_void,
        pQryMaxOrderVolume: *mut CThostFtdcQryMaxOrderVolumeField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspSettlementInfoConfirm@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcSettlementInfoConfirmField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspSettlementInfoConfirm(
        this: *mut ::std::os::raw::c_void,
        pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspRemoveParkedOrder@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRemoveParkedOrderField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspRemoveParkedOrder(
        this: *mut ::std::os::raw::c_void,
        pRemoveParkedOrder: *mut CThostFtdcRemoveParkedOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspRemoveParkedOrderAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRemoveParkedOrderActionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspRemoveParkedOrderAction(
        this: *mut ::std::os::raw::c_void,
        pRemoveParkedOrderAction: *mut CThostFtdcRemoveParkedOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspExecOrderInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputExecOrderField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspExecOrderInsert(
        this: *mut ::std::os::raw::c_void,
        pInputExecOrder: *mut CThostFtdcInputExecOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspExecOrderAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputExecOrderActionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspExecOrderAction(
        this: *mut ::std::os::raw::c_void,
        pInputExecOrderAction: *mut CThostFtdcInputExecOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspForQuoteInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputForQuoteField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspForQuoteInsert(
        this: *mut ::std::os::raw::c_void,
        pInputForQuote: *mut CThostFtdcInputForQuoteField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQuoteInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputQuoteField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQuoteInsert(
        this: *mut ::std::os::raw::c_void,
        pInputQuote: *mut CThostFtdcInputQuoteField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQuoteAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputQuoteActionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQuoteAction(
        this: *mut ::std::os::raw::c_void,
        pInputQuoteAction: *mut CThostFtdcInputQuoteActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspBatchOrderAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputBatchOrderActionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspBatchOrderAction(
        this: *mut ::std::os::raw::c_void,
        pInputBatchOrderAction: *mut CThostFtdcInputBatchOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspOptionSelfCloseInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputOptionSelfCloseField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspOptionSelfCloseInsert(
        this: *mut ::std::os::raw::c_void,
        pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspOptionSelfCloseAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputOptionSelfCloseActionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspOptionSelfCloseAction(
        this: *mut ::std::os::raw::c_void,
        pInputOptionSelfCloseAction: *mut CThostFtdcInputOptionSelfCloseActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspCombActionInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputCombActionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspCombActionInsert(
        this: *mut ::std::os::raw::c_void,
        pInputCombAction: *mut CThostFtdcInputCombActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryOrder@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcOrderField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryOrder(
        this: *mut ::std::os::raw::c_void,
        pOrder: *mut CThostFtdcOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryTrade@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcTradeField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryTrade(
        this: *mut ::std::os::raw::c_void,
        pTrade: *mut CThostFtdcTradeField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInvestorPosition@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInvestorPositionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestorPosition(
        this: *mut ::std::os::raw::c_void,
        pInvestorPosition: *mut CThostFtdcInvestorPositionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryTradingAccount@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcTradingAccountField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryTradingAccount(
        this: *mut ::std::os::raw::c_void,
        pTradingAccount: *mut CThostFtdcTradingAccountField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInvestor@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInvestorField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestor(
        this: *mut ::std::os::raw::c_void,
        pInvestor: *mut CThostFtdcInvestorField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryTradingCode@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcTradingCodeField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryTradingCode(
        this: *mut ::std::os::raw::c_void,
        pTradingCode: *mut CThostFtdcTradingCodeField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInstrumentMarginRate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInstrumentMarginRateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInstrumentMarginRate(
        this: *mut ::std::os::raw::c_void,
        pInstrumentMarginRate: *mut CThostFtdcInstrumentMarginRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInstrumentCommissionRate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInstrumentCommissionRateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInstrumentCommissionRate(
        this: *mut ::std::os::raw::c_void,
        pInstrumentCommissionRate: *mut CThostFtdcInstrumentCommissionRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryExchange@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcExchangeField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryExchange(
        this: *mut ::std::os::raw::c_void,
        pExchange: *mut CThostFtdcExchangeField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryProduct@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcProductField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryProduct(
        this: *mut ::std::os::raw::c_void,
        pProduct: *mut CThostFtdcProductField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInstrument@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInstrumentField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInstrument(
        this: *mut ::std::os::raw::c_void,
        pInstrument: *mut CThostFtdcInstrumentField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryDepthMarketData@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcDepthMarketDataField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryDepthMarketData(
        this: *mut ::std::os::raw::c_void,
        pDepthMarketData: *mut CThostFtdcDepthMarketDataField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryTraderOffer@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcTraderOfferField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryTraderOffer(
        this: *mut ::std::os::raw::c_void,
        pTraderOffer: *mut CThostFtdcTraderOfferField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQrySettlementInfo@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcSettlementInfoField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySettlementInfo(
        this: *mut ::std::os::raw::c_void,
        pSettlementInfo: *mut CThostFtdcSettlementInfoField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryTransferBank@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcTransferBankField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryTransferBank(
        this: *mut ::std::os::raw::c_void,
        pTransferBank: *mut CThostFtdcTransferBankField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInvestorPositionDetail@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInvestorPositionDetailField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestorPositionDetail(
        this: *mut ::std::os::raw::c_void,
        pInvestorPositionDetail: *mut CThostFtdcInvestorPositionDetailField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryNotice@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcNoticeField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryNotice(
        this: *mut ::std::os::raw::c_void,
        pNotice: *mut CThostFtdcNoticeField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQrySettlementInfoConfirm@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcSettlementInfoConfirmField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySettlementInfoConfirm(
        this: *mut ::std::os::raw::c_void,
        pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInvestorPositionCombineDetail@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInvestorPositionCombineDetailField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestorPositionCombineDetail(
        this: *mut ::std::os::raw::c_void,
        pInvestorPositionCombineDetail: *mut CThostFtdcInvestorPositionCombineDetailField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryCFMMCTradingAccountKey@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcCFMMCTradingAccountKeyField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryCFMMCTradingAccountKey(
        this: *mut ::std::os::raw::c_void,
        pCFMMCTradingAccountKey: *mut CThostFtdcCFMMCTradingAccountKeyField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryEWarrantOffset@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcEWarrantOffsetField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryEWarrantOffset(
        this: *mut ::std::os::raw::c_void,
        pEWarrantOffset: *mut CThostFtdcEWarrantOffsetField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInvestorProductGroupMargin@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInvestorProductGroupMarginField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestorProductGroupMargin(
        this: *mut ::std::os::raw::c_void,
        pInvestorProductGroupMargin: *mut CThostFtdcInvestorProductGroupMarginField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryExchangeMarginRate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcExchangeMarginRateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryExchangeMarginRate(
        this: *mut ::std::os::raw::c_void,
        pExchangeMarginRate: *mut CThostFtdcExchangeMarginRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryExchangeMarginRateAdjust@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcExchangeMarginRateAdjustField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryExchangeMarginRateAdjust(
        this: *mut ::std::os::raw::c_void,
        pExchangeMarginRateAdjust: *mut CThostFtdcExchangeMarginRateAdjustField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryExchangeRate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcExchangeRateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryExchangeRate(
        this: *mut ::std::os::raw::c_void,
        pExchangeRate: *mut CThostFtdcExchangeRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQrySecAgentACIDMap@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcSecAgentACIDMapField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySecAgentACIDMap(
        this: *mut ::std::os::raw::c_void,
        pSecAgentACIDMap: *mut CThostFtdcSecAgentACIDMapField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryProductExchRate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcProductExchRateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryProductExchRate(
        this: *mut ::std::os::raw::c_void,
        pProductExchRate: *mut CThostFtdcProductExchRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryProductGroup@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcProductGroupField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryProductGroup(
        this: *mut ::std::os::raw::c_void,
        pProductGroup: *mut CThostFtdcProductGroupField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryMMInstrumentCommissionRate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcMMInstrumentCommissionRateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryMMInstrumentCommissionRate(
        this: *mut ::std::os::raw::c_void,
        pMMInstrumentCommissionRate: *mut CThostFtdcMMInstrumentCommissionRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryMMOptionInstrCommRate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcMMOptionInstrCommRateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryMMOptionInstrCommRate(
        this: *mut ::std::os::raw::c_void,
        pMMOptionInstrCommRate: *mut CThostFtdcMMOptionInstrCommRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInstrumentOrderCommRate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInstrumentOrderCommRateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInstrumentOrderCommRate(
        this: *mut ::std::os::raw::c_void,
        pInstrumentOrderCommRate: *mut CThostFtdcInstrumentOrderCommRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQrySecAgentTradingAccount@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcTradingAccountField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySecAgentTradingAccount(
        this: *mut ::std::os::raw::c_void,
        pTradingAccount: *mut CThostFtdcTradingAccountField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQrySecAgentCheckMode@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcSecAgentCheckModeField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySecAgentCheckMode(
        this: *mut ::std::os::raw::c_void,
        pSecAgentCheckMode: *mut CThostFtdcSecAgentCheckModeField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQrySecAgentTradeInfo@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcSecAgentTradeInfoField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySecAgentTradeInfo(
        this: *mut ::std::os::raw::c_void,
        pSecAgentTradeInfo: *mut CThostFtdcSecAgentTradeInfoField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryOptionInstrTradeCost@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcOptionInstrTradeCostField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryOptionInstrTradeCost(
        this: *mut ::std::os::raw::c_void,
        pOptionInstrTradeCost: *mut CThostFtdcOptionInstrTradeCostField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryOptionInstrCommRate@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcOptionInstrCommRateField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryOptionInstrCommRate(
        this: *mut ::std::os::raw::c_void,
        pOptionInstrCommRate: *mut CThostFtdcOptionInstrCommRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryExecOrder@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcExecOrderField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryExecOrder(
        this: *mut ::std::os::raw::c_void,
        pExecOrder: *mut CThostFtdcExecOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryForQuote@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcForQuoteField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryForQuote(
        this: *mut ::std::os::raw::c_void,
        pForQuote: *mut CThostFtdcForQuoteField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryQuote@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcQuoteField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryQuote(
        this: *mut ::std::os::raw::c_void,
        pQuote: *mut CThostFtdcQuoteField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryOptionSelfClose@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcOptionSelfCloseField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryOptionSelfClose(
        this: *mut ::std::os::raw::c_void,
        pOptionSelfClose: *mut CThostFtdcOptionSelfCloseField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInvestUnit@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInvestUnitField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestUnit(
        this: *mut ::std::os::raw::c_void,
        pInvestUnit: *mut CThostFtdcInvestUnitField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryCombInstrumentGuard@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcCombInstrumentGuardField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryCombInstrumentGuard(
        this: *mut ::std::os::raw::c_void,
        pCombInstrumentGuard: *mut CThostFtdcCombInstrumentGuardField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryCombAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcCombActionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryCombAction(
        this: *mut ::std::os::raw::c_void,
        pCombAction: *mut CThostFtdcCombActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryTransferSerial@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcTransferSerialField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryTransferSerial(
        this: *mut ::std::os::raw::c_void,
        pTransferSerial: *mut CThostFtdcTransferSerialField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryAccountregister@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcAccountregisterField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryAccountregister(
        this: *mut ::std::os::raw::c_void,
        pAccountregister: *mut CThostFtdcAccountregisterField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspError@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspError(
        this: *mut ::std::os::raw::c_void,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnOrder@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcOrderField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnOrder(
        this: *mut ::std::os::raw::c_void,
        pOrder: *mut CThostFtdcOrderField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnTrade@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcTradeField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnTrade(
        this: *mut ::std::os::raw::c_void,
        pTrade: *mut CThostFtdcTradeField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnOrderInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputOrderField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnOrderInsert(
        this: *mut ::std::os::raw::c_void,
        pInputOrder: *mut CThostFtdcInputOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnOrderAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcOrderActionField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnOrderAction(
        this: *mut ::std::os::raw::c_void,
        pOrderAction: *mut CThostFtdcOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnInstrumentStatus@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInstrumentStatusField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnInstrumentStatus(
        this: *mut ::std::os::raw::c_void,
        pInstrumentStatus: *mut CThostFtdcInstrumentStatusField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnBulletin@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcBulletinField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnBulletin(
        this: *mut ::std::os::raw::c_void,
        pBulletin: *mut CThostFtdcBulletinField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnTradingNotice@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcTradingNoticeInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnTradingNotice(
        this: *mut ::std::os::raw::c_void,
        pTradingNoticeInfo: *mut CThostFtdcTradingNoticeInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnErrorConditionalOrder@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcErrorConditionalOrderField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnErrorConditionalOrder(
        this: *mut ::std::os::raw::c_void,
        pErrorConditionalOrder: *mut CThostFtdcErrorConditionalOrderField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnExecOrder@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcExecOrderField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnExecOrder(
        this: *mut ::std::os::raw::c_void,
        pExecOrder: *mut CThostFtdcExecOrderField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnExecOrderInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputExecOrderField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnExecOrderInsert(
        this: *mut ::std::os::raw::c_void,
        pInputExecOrder: *mut CThostFtdcInputExecOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnExecOrderAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcExecOrderActionField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnExecOrderAction(
        this: *mut ::std::os::raw::c_void,
        pExecOrderAction: *mut CThostFtdcExecOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnForQuoteInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputForQuoteField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnForQuoteInsert(
        this: *mut ::std::os::raw::c_void,
        pInputForQuote: *mut CThostFtdcInputForQuoteField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnQuote@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcQuoteField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnQuote(
        this: *mut ::std::os::raw::c_void,
        pQuote: *mut CThostFtdcQuoteField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnQuoteInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputQuoteField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnQuoteInsert(
        this: *mut ::std::os::raw::c_void,
        pInputQuote: *mut CThostFtdcInputQuoteField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnQuoteAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcQuoteActionField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnQuoteAction(
        this: *mut ::std::os::raw::c_void,
        pQuoteAction: *mut CThostFtdcQuoteActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnForQuoteRsp@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcForQuoteRspField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnForQuoteRsp(
        this: *mut ::std::os::raw::c_void,
        pForQuoteRsp: *mut CThostFtdcForQuoteRspField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnCFMMCTradingAccountToken@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcCFMMCTradingAccountTokenField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnCFMMCTradingAccountToken(
        this: *mut ::std::os::raw::c_void,
        pCFMMCTradingAccountToken: *mut CThostFtdcCFMMCTradingAccountTokenField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnBatchOrderAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcBatchOrderActionField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnBatchOrderAction(
        this: *mut ::std::os::raw::c_void,
        pBatchOrderAction: *mut CThostFtdcBatchOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnOptionSelfClose@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcOptionSelfCloseField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnOptionSelfClose(
        this: *mut ::std::os::raw::c_void,
        pOptionSelfClose: *mut CThostFtdcOptionSelfCloseField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnOptionSelfCloseInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputOptionSelfCloseField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnOptionSelfCloseInsert(
        this: *mut ::std::os::raw::c_void,
        pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnOptionSelfCloseAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcOptionSelfCloseActionField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnOptionSelfCloseAction(
        this: *mut ::std::os::raw::c_void,
        pOptionSelfCloseAction: *mut CThostFtdcOptionSelfCloseActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnCombAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcCombActionField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnCombAction(
        this: *mut ::std::os::raw::c_void,
        pCombAction: *mut CThostFtdcCombActionField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnCombActionInsert@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInputCombActionField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnCombActionInsert(
        this: *mut ::std::os::raw::c_void,
        pInputCombAction: *mut CThostFtdcInputCombActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryContractBank@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcContractBankField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryContractBank(
        this: *mut ::std::os::raw::c_void,
        pContractBank: *mut CThostFtdcContractBankField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryParkedOrder@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcParkedOrderField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryParkedOrder(
        this: *mut ::std::os::raw::c_void,
        pParkedOrder: *mut CThostFtdcParkedOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryParkedOrderAction@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcParkedOrderActionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryParkedOrderAction(
        this: *mut ::std::os::raw::c_void,
        pParkedOrderAction: *mut CThostFtdcParkedOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryTradingNotice@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcTradingNoticeField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryTradingNotice(
        this: *mut ::std::os::raw::c_void,
        pTradingNotice: *mut CThostFtdcTradingNoticeField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryBrokerTradingParams@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcBrokerTradingParamsField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryBrokerTradingParams(
        this: *mut ::std::os::raw::c_void,
        pBrokerTradingParams: *mut CThostFtdcBrokerTradingParamsField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryBrokerTradingAlgos@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcBrokerTradingAlgosField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryBrokerTradingAlgos(
        this: *mut ::std::os::raw::c_void,
        pBrokerTradingAlgos: *mut CThostFtdcBrokerTradingAlgosField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQueryCFMMCTradingAccountToken@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcQueryCFMMCTradingAccountTokenField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQueryCFMMCTradingAccountToken(
        this: *mut ::std::os::raw::c_void,
        pQueryCFMMCTradingAccountToken: *mut CThostFtdcQueryCFMMCTradingAccountTokenField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnFromBankToFutureByBank@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspTransferField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnFromBankToFutureByBank(
        this: *mut ::std::os::raw::c_void,
        pRspTransfer: *mut CThostFtdcRspTransferField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnFromFutureToBankByBank@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspTransferField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnFromFutureToBankByBank(
        this: *mut ::std::os::raw::c_void,
        pRspTransfer: *mut CThostFtdcRspTransferField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnRepealFromBankToFutureByBank@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspRepealField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnRepealFromBankToFutureByBank(
        this: *mut ::std::os::raw::c_void,
        pRspRepeal: *mut CThostFtdcRspRepealField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnRepealFromFutureToBankByBank@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspRepealField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnRepealFromFutureToBankByBank(
        this: *mut ::std::os::raw::c_void,
        pRspRepeal: *mut CThostFtdcRspRepealField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnFromBankToFutureByFuture@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspTransferField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnFromBankToFutureByFuture(
        this: *mut ::std::os::raw::c_void,
        pRspTransfer: *mut CThostFtdcRspTransferField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnFromFutureToBankByFuture@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspTransferField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnFromFutureToBankByFuture(
        this: *mut ::std::os::raw::c_void,
        pRspTransfer: *mut CThostFtdcRspTransferField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnRepealFromBankToFutureByFutureManual@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspRepealField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnRepealFromBankToFutureByFutureManual(
        this: *mut ::std::os::raw::c_void,
        pRspRepeal: *mut CThostFtdcRspRepealField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnRepealFromFutureToBankByFutureManual@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspRepealField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnRepealFromFutureToBankByFutureManual(
        this: *mut ::std::os::raw::c_void,
        pRspRepeal: *mut CThostFtdcRspRepealField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnQueryBankBalanceByFuture@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcNotifyQueryAccountField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnQueryBankBalanceByFuture(
        this: *mut ::std::os::raw::c_void,
        pNotifyQueryAccount: *mut CThostFtdcNotifyQueryAccountField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnBankToFutureByFuture@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcReqTransferField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnBankToFutureByFuture(
        this: *mut ::std::os::raw::c_void,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnFutureToBankByFuture@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcReqTransferField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnFutureToBankByFuture(
        this: *mut ::std::os::raw::c_void,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnRepealBankToFutureByFutureManual@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcReqRepealField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnRepealBankToFutureByFutureManual(
        this: *mut ::std::os::raw::c_void,
        pReqRepeal: *mut CThostFtdcReqRepealField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnRepealFutureToBankByFutureManual@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcReqRepealField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnRepealFutureToBankByFutureManual(
        this: *mut ::std::os::raw::c_void,
        pReqRepeal: *mut CThostFtdcReqRepealField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnErrRtnQueryBankBalanceByFuture@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcReqQueryAccountField@@PEAUCThostFtdcRspInfoField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnQueryBankBalanceByFuture(
        this: *mut ::std::os::raw::c_void,
        pReqQueryAccount: *mut CThostFtdcReqQueryAccountField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnRepealFromBankToFutureByFuture@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspRepealField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnRepealFromBankToFutureByFuture(
        this: *mut ::std::os::raw::c_void,
        pRspRepeal: *mut CThostFtdcRspRepealField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnRepealFromFutureToBankByFuture@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRspRepealField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnRepealFromFutureToBankByFuture(
        this: *mut ::std::os::raw::c_void,
        pRspRepeal: *mut CThostFtdcRspRepealField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspFromBankToFutureByFuture@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcReqTransferField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspFromBankToFutureByFuture(
        this: *mut ::std::os::raw::c_void,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspFromFutureToBankByFuture@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcReqTransferField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspFromFutureToBankByFuture(
        this: *mut ::std::os::raw::c_void,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQueryBankAccountMoneyByFuture@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcReqQueryAccountField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQueryBankAccountMoneyByFuture(
        this: *mut ::std::os::raw::c_void,
        pReqQueryAccount: *mut CThostFtdcReqQueryAccountField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnOpenAccountByBank@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcOpenAccountField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnOpenAccountByBank(
        this: *mut ::std::os::raw::c_void,
        pOpenAccount: *mut CThostFtdcOpenAccountField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnCancelAccountByBank@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcCancelAccountField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnCancelAccountByBank(
        this: *mut ::std::os::raw::c_void,
        pCancelAccount: *mut CThostFtdcCancelAccountField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRtnChangeAccountByBank@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcChangeAccountField@@@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnChangeAccountByBank(
        this: *mut ::std::os::raw::c_void,
        pChangeAccount: *mut CThostFtdcChangeAccountField,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryClassifiedInstrument@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInstrumentField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryClassifiedInstrument(
        this: *mut ::std::os::raw::c_void,
        pInstrument: *mut CThostFtdcInstrumentField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryCombPromotionParam@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcCombPromotionParamField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryCombPromotionParam(
        this: *mut ::std::os::raw::c_void,
        pCombPromotionParam: *mut CThostFtdcCombPromotionParamField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryRiskSettleInvstPosition@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRiskSettleInvstPositionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryRiskSettleInvstPosition(
        this: *mut ::std::os::raw::c_void,
        pRiskSettleInvstPosition: *mut CThostFtdcRiskSettleInvstPositionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryRiskSettleProductStatus@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRiskSettleProductStatusField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryRiskSettleProductStatus(
        this: *mut ::std::os::raw::c_void,
        pRiskSettleProductStatus: *mut CThostFtdcRiskSettleProductStatusField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQrySPBMFutureParameter@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcSPBMFutureParameterField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySPBMFutureParameter(
        this: *mut ::std::os::raw::c_void,
        pSPBMFutureParameter: *mut CThostFtdcSPBMFutureParameterField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQrySPBMOptionParameter@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcSPBMOptionParameterField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySPBMOptionParameter(
        this: *mut ::std::os::raw::c_void,
        pSPBMOptionParameter: *mut CThostFtdcSPBMOptionParameterField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQrySPBMIntraParameter@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcSPBMIntraParameterField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySPBMIntraParameter(
        this: *mut ::std::os::raw::c_void,
        pSPBMIntraParameter: *mut CThostFtdcSPBMIntraParameterField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQrySPBMInterParameter@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcSPBMInterParameterField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySPBMInterParameter(
        this: *mut ::std::os::raw::c_void,
        pSPBMInterParameter: *mut CThostFtdcSPBMInterParameterField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQrySPBMPortfDefinition@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcSPBMPortfDefinitionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySPBMPortfDefinition(
        this: *mut ::std::os::raw::c_void,
        pSPBMPortfDefinition: *mut CThostFtdcSPBMPortfDefinitionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQrySPBMInvestorPortfDef@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcSPBMInvestorPortfDefField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySPBMInvestorPortfDef(
        this: *mut ::std::os::raw::c_void,
        pSPBMInvestorPortfDef: *mut CThostFtdcSPBMInvestorPortfDefField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInvestorPortfMarginRatio@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInvestorPortfMarginRatioField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestorPortfMarginRatio(
        this: *mut ::std::os::raw::c_void,
        pInvestorPortfMarginRatio: *mut CThostFtdcInvestorPortfMarginRatioField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInvestorProdSPBMDetail@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInvestorProdSPBMDetailField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestorProdSPBMDetail(
        this: *mut ::std::os::raw::c_void,
        pInvestorProdSPBMDetail: *mut CThostFtdcInvestorProdSPBMDetailField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInvestorCommoditySPMMMargin@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInvestorCommoditySPMMMarginField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestorCommoditySPMMMargin(
        this: *mut ::std::os::raw::c_void,
        pInvestorCommoditySPMMMargin: *mut CThostFtdcInvestorCommoditySPMMMarginField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInvestorCommodityGroupSPMMMargin@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInvestorCommodityGroupSPMMMarginField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestorCommodityGroupSPMMMargin(
        this: *mut ::std::os::raw::c_void,
        pInvestorCommodityGroupSPMMMargin: *mut CThostFtdcInvestorCommodityGroupSPMMMarginField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQrySPMMInstParam@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcSPMMInstParamField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySPMMInstParam(
        this: *mut ::std::os::raw::c_void,
        pSPMMInstParam: *mut CThostFtdcSPMMInstParamField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQrySPMMProductParam@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcSPMMProductParamField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySPMMProductParam(
        this: *mut ::std::os::raw::c_void,
        pSPMMProductParam: *mut CThostFtdcSPMMProductParamField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQrySPBMAddOnInterParameter@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcSPBMAddOnInterParameterField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySPBMAddOnInterParameter(
        this: *mut ::std::os::raw::c_void,
        pSPBMAddOnInterParameter: *mut CThostFtdcSPBMAddOnInterParameterField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryRCAMSCombProductInfo@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRCAMSCombProductInfoField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryRCAMSCombProductInfo(
        this: *mut ::std::os::raw::c_void,
        pRCAMSCombProductInfo: *mut CThostFtdcRCAMSCombProductInfoField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryRCAMSInstrParameter@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRCAMSInstrParameterField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryRCAMSInstrParameter(
        this: *mut ::std::os::raw::c_void,
        pRCAMSInstrParameter: *mut CThostFtdcRCAMSInstrParameterField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryRCAMSIntraParameter@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRCAMSIntraParameterField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryRCAMSIntraParameter(
        this: *mut ::std::os::raw::c_void,
        pRCAMSIntraParameter: *mut CThostFtdcRCAMSIntraParameterField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryRCAMSInterParameter@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRCAMSInterParameterField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryRCAMSInterParameter(
        this: *mut ::std::os::raw::c_void,
        pRCAMSInterParameter: *mut CThostFtdcRCAMSInterParameterField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryRCAMSShortOptAdjustParam@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRCAMSShortOptAdjustParamField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryRCAMSShortOptAdjustParam(
        this: *mut ::std::os::raw::c_void,
        pRCAMSShortOptAdjustParam: *mut CThostFtdcRCAMSShortOptAdjustParamField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryRCAMSInvestorCombPosition@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRCAMSInvestorCombPositionField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryRCAMSInvestorCombPosition(
        this: *mut ::std::os::raw::c_void,
        pRCAMSInvestorCombPosition: *mut CThostFtdcRCAMSInvestorCombPositionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInvestorProdRCAMSMargin@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInvestorProdRCAMSMarginField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestorProdRCAMSMargin(
        this: *mut ::std::os::raw::c_void,
        pInvestorProdRCAMSMargin: *mut CThostFtdcInvestorProdRCAMSMarginField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryRULEInstrParameter@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRULEInstrParameterField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryRULEInstrParameter(
        this: *mut ::std::os::raw::c_void,
        pRULEInstrParameter: *mut CThostFtdcRULEInstrParameterField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryRULEIntraParameter@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRULEIntraParameterField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryRULEIntraParameter(
        this: *mut ::std::os::raw::c_void,
        pRULEIntraParameter: *mut CThostFtdcRULEIntraParameterField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryRULEInterParameter@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcRULEInterParameterField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryRULEInterParameter(
        this: *mut ::std::os::raw::c_void,
        pRULEInterParameter: *mut CThostFtdcRULEInterParameterField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?OnRspQryInvestorProdRULEMargin@Rust_CThostFtdcTraderSpi@@UEAAXPEAUCThostFtdcInvestorProdRULEMarginField@@PEAUCThostFtdcRspInfoField@@H_N@Z"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestorProdRULEMargin(
        this: *mut ::std::os::raw::c_void,
        pInvestorProdRULEMargin: *mut CThostFtdcInvestorProdRULEMarginField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
#[allow(unused)]
pub trait Rust_CThostFtdcMdSpi_Trait {
    fn on_front_connected(&mut self) {  }
    fn on_front_disconnected(&mut self, nReason: ::std::os::raw::c_int) {  }
    fn on_heart_beat_warning(&mut self, nTimeLapse: ::std::os::raw::c_int) {  }
    fn on_rsp_user_login(&mut self, pRspUserLogin: *mut CThostFtdcRspUserLoginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_user_logout(&mut self, pUserLogout: *mut CThostFtdcUserLogoutField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_multicast_instrument(&mut self, pMulticastInstrument: *mut CThostFtdcMulticastInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_error(&mut self, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_sub_market_data(&mut self, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_un_sub_market_data(&mut self, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_sub_for_quote_rsp(&mut self, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_un_sub_for_quote_rsp(&mut self, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rtn_depth_market_data(&mut self, pDepthMarketData: *mut CThostFtdcDepthMarketDataField) {  }
    fn on_rtn_for_quote_rsp(&mut self, pForQuoteRsp: *mut CThostFtdcForQuoteRspField) {  }
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnFrontConnected(trait_obj: *mut ::std::os::raw::c_void) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_front_connected()
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnFrontDisconnected(trait_obj: *mut ::std::os::raw::c_void, nReason: ::std::os::raw::c_int) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_front_disconnected(nReason)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnHeartBeatWarning(trait_obj: *mut ::std::os::raw::c_void, nTimeLapse: ::std::os::raw::c_int) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_heart_beat_warning(nTimeLapse)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRspUserLogin(trait_obj: *mut ::std::os::raw::c_void, pRspUserLogin: *mut CThostFtdcRspUserLoginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_user_login(pRspUserLogin, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRspUserLogout(trait_obj: *mut ::std::os::raw::c_void, pUserLogout: *mut CThostFtdcUserLogoutField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_user_logout(pUserLogout, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRspQryMulticastInstrument(trait_obj: *mut ::std::os::raw::c_void, pMulticastInstrument: *mut CThostFtdcMulticastInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_multicast_instrument(pMulticastInstrument, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRspError(trait_obj: *mut ::std::os::raw::c_void, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_error(pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRspSubMarketData(trait_obj: *mut ::std::os::raw::c_void, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_sub_market_data(pSpecificInstrument, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRspUnSubMarketData(trait_obj: *mut ::std::os::raw::c_void, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_un_sub_market_data(pSpecificInstrument, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRspSubForQuoteRsp(trait_obj: *mut ::std::os::raw::c_void, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_sub_for_quote_rsp(pSpecificInstrument, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRspUnSubForQuoteRsp(trait_obj: *mut ::std::os::raw::c_void, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_un_sub_for_quote_rsp(pSpecificInstrument, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRtnDepthMarketData(trait_obj: *mut ::std::os::raw::c_void, pDepthMarketData: *mut CThostFtdcDepthMarketDataField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_depth_market_data(pDepthMarketData)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRtnForQuoteRsp(trait_obj: *mut ::std::os::raw::c_void, pForQuoteRsp: *mut CThostFtdcForQuoteRspField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_for_quote_rsp(pForQuoteRsp)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_Drop(trait_obj: *mut ::std::os::raw::c_void) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let _r: Box<Box<dyn Rust_CThostFtdcMdSpi_Trait>> = unsafe { Box::from_raw(trait_obj) };
}

#[allow(unused)]
pub trait Rust_CThostFtdcTraderSpi_Trait {
    fn on_front_connected(&mut self) {  }
    fn on_front_disconnected(&mut self, nReason: ::std::os::raw::c_int) {  }
    fn on_heart_beat_warning(&mut self, nTimeLapse: ::std::os::raw::c_int) {  }
    fn on_rsp_authenticate(&mut self, pRspAuthenticateField: *mut CThostFtdcRspAuthenticateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_user_login(&mut self, pRspUserLogin: *mut CThostFtdcRspUserLoginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_user_logout(&mut self, pUserLogout: *mut CThostFtdcUserLogoutField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_user_password_update(&mut self, pUserPasswordUpdate: *mut CThostFtdcUserPasswordUpdateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_trading_account_password_update(&mut self, pTradingAccountPasswordUpdate: *mut CThostFtdcTradingAccountPasswordUpdateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_user_auth_method(&mut self, pRspUserAuthMethod: *mut CThostFtdcRspUserAuthMethodField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_gen_user_captcha(&mut self, pRspGenUserCaptcha: *mut CThostFtdcRspGenUserCaptchaField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_gen_user_text(&mut self, pRspGenUserText: *mut CThostFtdcRspGenUserTextField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_order_insert(&mut self, pInputOrder: *mut CThostFtdcInputOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_parked_order_insert(&mut self, pParkedOrder: *mut CThostFtdcParkedOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_parked_order_action(&mut self, pParkedOrderAction: *mut CThostFtdcParkedOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_order_action(&mut self, pInputOrderAction: *mut CThostFtdcInputOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_max_order_volume(&mut self, pQryMaxOrderVolume: *mut CThostFtdcQryMaxOrderVolumeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_settlement_info_confirm(&mut self, pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_remove_parked_order(&mut self, pRemoveParkedOrder: *mut CThostFtdcRemoveParkedOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_remove_parked_order_action(&mut self, pRemoveParkedOrderAction: *mut CThostFtdcRemoveParkedOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_exec_order_insert(&mut self, pInputExecOrder: *mut CThostFtdcInputExecOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_exec_order_action(&mut self, pInputExecOrderAction: *mut CThostFtdcInputExecOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_for_quote_insert(&mut self, pInputForQuote: *mut CThostFtdcInputForQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_quote_insert(&mut self, pInputQuote: *mut CThostFtdcInputQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_quote_action(&mut self, pInputQuoteAction: *mut CThostFtdcInputQuoteActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_batch_order_action(&mut self, pInputBatchOrderAction: *mut CThostFtdcInputBatchOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_option_self_close_insert(&mut self, pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_option_self_close_action(&mut self, pInputOptionSelfCloseAction: *mut CThostFtdcInputOptionSelfCloseActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_comb_action_insert(&mut self, pInputCombAction: *mut CThostFtdcInputCombActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_order(&mut self, pOrder: *mut CThostFtdcOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_trade(&mut self, pTrade: *mut CThostFtdcTradeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_investor_position(&mut self, pInvestorPosition: *mut CThostFtdcInvestorPositionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_trading_account(&mut self, pTradingAccount: *mut CThostFtdcTradingAccountField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_investor(&mut self, pInvestor: *mut CThostFtdcInvestorField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_trading_code(&mut self, pTradingCode: *mut CThostFtdcTradingCodeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_instrument_margin_rate(&mut self, pInstrumentMarginRate: *mut CThostFtdcInstrumentMarginRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_instrument_commission_rate(&mut self, pInstrumentCommissionRate: *mut CThostFtdcInstrumentCommissionRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_exchange(&mut self, pExchange: *mut CThostFtdcExchangeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_product(&mut self, pProduct: *mut CThostFtdcProductField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_instrument(&mut self, pInstrument: *mut CThostFtdcInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_depth_market_data(&mut self, pDepthMarketData: *mut CThostFtdcDepthMarketDataField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_trader_offer(&mut self, pTraderOffer: *mut CThostFtdcTraderOfferField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_settlement_info(&mut self, pSettlementInfo: *mut CThostFtdcSettlementInfoField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_transfer_bank(&mut self, pTransferBank: *mut CThostFtdcTransferBankField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_investor_position_detail(&mut self, pInvestorPositionDetail: *mut CThostFtdcInvestorPositionDetailField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_notice(&mut self, pNotice: *mut CThostFtdcNoticeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_settlement_info_confirm(&mut self, pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_investor_position_combine_detail(&mut self, pInvestorPositionCombineDetail: *mut CThostFtdcInvestorPositionCombineDetailField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_cfmmc_trading_account_key(&mut self, pCFMMCTradingAccountKey: *mut CThostFtdcCFMMCTradingAccountKeyField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_e_warrant_offset(&mut self, pEWarrantOffset: *mut CThostFtdcEWarrantOffsetField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_investor_product_group_margin(&mut self, pInvestorProductGroupMargin: *mut CThostFtdcInvestorProductGroupMarginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_exchange_margin_rate(&mut self, pExchangeMarginRate: *mut CThostFtdcExchangeMarginRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_exchange_margin_rate_adjust(&mut self, pExchangeMarginRateAdjust: *mut CThostFtdcExchangeMarginRateAdjustField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_exchange_rate(&mut self, pExchangeRate: *mut CThostFtdcExchangeRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_sec_agent_acid_map(&mut self, pSecAgentACIDMap: *mut CThostFtdcSecAgentACIDMapField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_product_exch_rate(&mut self, pProductExchRate: *mut CThostFtdcProductExchRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_product_group(&mut self, pProductGroup: *mut CThostFtdcProductGroupField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_mm_instrument_commission_rate(&mut self, pMMInstrumentCommissionRate: *mut CThostFtdcMMInstrumentCommissionRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_mm_option_instr_comm_rate(&mut self, pMMOptionInstrCommRate: *mut CThostFtdcMMOptionInstrCommRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_instrument_order_comm_rate(&mut self, pInstrumentOrderCommRate: *mut CThostFtdcInstrumentOrderCommRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_sec_agent_trading_account(&mut self, pTradingAccount: *mut CThostFtdcTradingAccountField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_sec_agent_check_mode(&mut self, pSecAgentCheckMode: *mut CThostFtdcSecAgentCheckModeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_sec_agent_trade_info(&mut self, pSecAgentTradeInfo: *mut CThostFtdcSecAgentTradeInfoField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_option_instr_trade_cost(&mut self, pOptionInstrTradeCost: *mut CThostFtdcOptionInstrTradeCostField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_option_instr_comm_rate(&mut self, pOptionInstrCommRate: *mut CThostFtdcOptionInstrCommRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_exec_order(&mut self, pExecOrder: *mut CThostFtdcExecOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_for_quote(&mut self, pForQuote: *mut CThostFtdcForQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_quote(&mut self, pQuote: *mut CThostFtdcQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_option_self_close(&mut self, pOptionSelfClose: *mut CThostFtdcOptionSelfCloseField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_invest_unit(&mut self, pInvestUnit: *mut CThostFtdcInvestUnitField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_comb_instrument_guard(&mut self, pCombInstrumentGuard: *mut CThostFtdcCombInstrumentGuardField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_comb_action(&mut self, pCombAction: *mut CThostFtdcCombActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_transfer_serial(&mut self, pTransferSerial: *mut CThostFtdcTransferSerialField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_accountregister(&mut self, pAccountregister: *mut CThostFtdcAccountregisterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_error(&mut self, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rtn_order(&mut self, pOrder: *mut CThostFtdcOrderField) {  }
    fn on_rtn_trade(&mut self, pTrade: *mut CThostFtdcTradeField) {  }
    fn on_err_rtn_order_insert(&mut self, pInputOrder: *mut CThostFtdcInputOrderField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_order_action(&mut self, pOrderAction: *mut CThostFtdcOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_rtn_instrument_status(&mut self, pInstrumentStatus: *mut CThostFtdcInstrumentStatusField) {  }
    fn on_rtn_bulletin(&mut self, pBulletin: *mut CThostFtdcBulletinField) {  }
    fn on_rtn_trading_notice(&mut self, pTradingNoticeInfo: *mut CThostFtdcTradingNoticeInfoField) {  }
    fn on_rtn_error_conditional_order(&mut self, pErrorConditionalOrder: *mut CThostFtdcErrorConditionalOrderField) {  }
    fn on_rtn_exec_order(&mut self, pExecOrder: *mut CThostFtdcExecOrderField) {  }
    fn on_err_rtn_exec_order_insert(&mut self, pInputExecOrder: *mut CThostFtdcInputExecOrderField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_exec_order_action(&mut self, pExecOrderAction: *mut CThostFtdcExecOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_for_quote_insert(&mut self, pInputForQuote: *mut CThostFtdcInputForQuoteField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_rtn_quote(&mut self, pQuote: *mut CThostFtdcQuoteField) {  }
    fn on_err_rtn_quote_insert(&mut self, pInputQuote: *mut CThostFtdcInputQuoteField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_quote_action(&mut self, pQuoteAction: *mut CThostFtdcQuoteActionField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_rtn_for_quote_rsp(&mut self, pForQuoteRsp: *mut CThostFtdcForQuoteRspField) {  }
    fn on_rtn_cfmmc_trading_account_token(&mut self, pCFMMCTradingAccountToken: *mut CThostFtdcCFMMCTradingAccountTokenField) {  }
    fn on_err_rtn_batch_order_action(&mut self, pBatchOrderAction: *mut CThostFtdcBatchOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_rtn_option_self_close(&mut self, pOptionSelfClose: *mut CThostFtdcOptionSelfCloseField) {  }
    fn on_err_rtn_option_self_close_insert(&mut self, pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_option_self_close_action(&mut self, pOptionSelfCloseAction: *mut CThostFtdcOptionSelfCloseActionField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_rtn_comb_action(&mut self, pCombAction: *mut CThostFtdcCombActionField) {  }
    fn on_err_rtn_comb_action_insert(&mut self, pInputCombAction: *mut CThostFtdcInputCombActionField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_rsp_qry_contract_bank(&mut self, pContractBank: *mut CThostFtdcContractBankField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_parked_order(&mut self, pParkedOrder: *mut CThostFtdcParkedOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_parked_order_action(&mut self, pParkedOrderAction: *mut CThostFtdcParkedOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_trading_notice(&mut self, pTradingNotice: *mut CThostFtdcTradingNoticeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_broker_trading_params(&mut self, pBrokerTradingParams: *mut CThostFtdcBrokerTradingParamsField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_broker_trading_algos(&mut self, pBrokerTradingAlgos: *mut CThostFtdcBrokerTradingAlgosField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_query_cfmmc_trading_account_token(&mut self, pQueryCFMMCTradingAccountToken: *mut CThostFtdcQueryCFMMCTradingAccountTokenField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rtn_from_bank_to_future_by_bank(&mut self, pRspTransfer: *mut CThostFtdcRspTransferField) {  }
    fn on_rtn_from_future_to_bank_by_bank(&mut self, pRspTransfer: *mut CThostFtdcRspTransferField) {  }
    fn on_rtn_repeal_from_bank_to_future_by_bank(&mut self, pRspRepeal: *mut CThostFtdcRspRepealField) {  }
    fn on_rtn_repeal_from_future_to_bank_by_bank(&mut self, pRspRepeal: *mut CThostFtdcRspRepealField) {  }
    fn on_rtn_from_bank_to_future_by_future(&mut self, pRspTransfer: *mut CThostFtdcRspTransferField) {  }
    fn on_rtn_from_future_to_bank_by_future(&mut self, pRspTransfer: *mut CThostFtdcRspTransferField) {  }
    fn on_rtn_repeal_from_bank_to_future_by_future_manual(&mut self, pRspRepeal: *mut CThostFtdcRspRepealField) {  }
    fn on_rtn_repeal_from_future_to_bank_by_future_manual(&mut self, pRspRepeal: *mut CThostFtdcRspRepealField) {  }
    fn on_rtn_query_bank_balance_by_future(&mut self, pNotifyQueryAccount: *mut CThostFtdcNotifyQueryAccountField) {  }
    fn on_err_rtn_bank_to_future_by_future(&mut self, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_future_to_bank_by_future(&mut self, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_repeal_bank_to_future_by_future_manual(&mut self, pReqRepeal: *mut CThostFtdcReqRepealField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_repeal_future_to_bank_by_future_manual(&mut self, pReqRepeal: *mut CThostFtdcReqRepealField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_query_bank_balance_by_future(&mut self, pReqQueryAccount: *mut CThostFtdcReqQueryAccountField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_rtn_repeal_from_bank_to_future_by_future(&mut self, pRspRepeal: *mut CThostFtdcRspRepealField) {  }
    fn on_rtn_repeal_from_future_to_bank_by_future(&mut self, pRspRepeal: *mut CThostFtdcRspRepealField) {  }
    fn on_rsp_from_bank_to_future_by_future(&mut self, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_from_future_to_bank_by_future(&mut self, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_query_bank_account_money_by_future(&mut self, pReqQueryAccount: *mut CThostFtdcReqQueryAccountField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rtn_open_account_by_bank(&mut self, pOpenAccount: *mut CThostFtdcOpenAccountField) {  }
    fn on_rtn_cancel_account_by_bank(&mut self, pCancelAccount: *mut CThostFtdcCancelAccountField) {  }
    fn on_rtn_change_account_by_bank(&mut self, pChangeAccount: *mut CThostFtdcChangeAccountField) {  }
    fn on_rsp_qry_classified_instrument(&mut self, pInstrument: *mut CThostFtdcInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_comb_promotion_param(&mut self, pCombPromotionParam: *mut CThostFtdcCombPromotionParamField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_risk_settle_invst_position(&mut self, pRiskSettleInvstPosition: *mut CThostFtdcRiskSettleInvstPositionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_risk_settle_product_status(&mut self, pRiskSettleProductStatus: *mut CThostFtdcRiskSettleProductStatusField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_spbm_future_parameter(&mut self, pSPBMFutureParameter: *mut CThostFtdcSPBMFutureParameterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_spbm_option_parameter(&mut self, pSPBMOptionParameter: *mut CThostFtdcSPBMOptionParameterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_spbm_intra_parameter(&mut self, pSPBMIntraParameter: *mut CThostFtdcSPBMIntraParameterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_spbm_inter_parameter(&mut self, pSPBMInterParameter: *mut CThostFtdcSPBMInterParameterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_spbm_portf_definition(&mut self, pSPBMPortfDefinition: *mut CThostFtdcSPBMPortfDefinitionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_spbm_investor_portf_def(&mut self, pSPBMInvestorPortfDef: *mut CThostFtdcSPBMInvestorPortfDefField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_investor_portf_margin_ratio(&mut self, pInvestorPortfMarginRatio: *mut CThostFtdcInvestorPortfMarginRatioField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_investor_prod_spbm_detail(&mut self, pInvestorProdSPBMDetail: *mut CThostFtdcInvestorProdSPBMDetailField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_investor_commodity_spmm_margin(&mut self, pInvestorCommoditySPMMMargin: *mut CThostFtdcInvestorCommoditySPMMMarginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_investor_commodity_group_spmm_margin(&mut self, pInvestorCommodityGroupSPMMMargin: *mut CThostFtdcInvestorCommodityGroupSPMMMarginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_spmm_inst_param(&mut self, pSPMMInstParam: *mut CThostFtdcSPMMInstParamField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_spmm_product_param(&mut self, pSPMMProductParam: *mut CThostFtdcSPMMProductParamField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_spbm_add_on_inter_parameter(&mut self, pSPBMAddOnInterParameter: *mut CThostFtdcSPBMAddOnInterParameterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_rcams_comb_product_info(&mut self, pRCAMSCombProductInfo: *mut CThostFtdcRCAMSCombProductInfoField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_rcams_instr_parameter(&mut self, pRCAMSInstrParameter: *mut CThostFtdcRCAMSInstrParameterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_rcams_intra_parameter(&mut self, pRCAMSIntraParameter: *mut CThostFtdcRCAMSIntraParameterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_rcams_inter_parameter(&mut self, pRCAMSInterParameter: *mut CThostFtdcRCAMSInterParameterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_rcams_short_opt_adjust_param(&mut self, pRCAMSShortOptAdjustParam: *mut CThostFtdcRCAMSShortOptAdjustParamField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_rcams_investor_comb_position(&mut self, pRCAMSInvestorCombPosition: *mut CThostFtdcRCAMSInvestorCombPositionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_investor_prod_rcams_margin(&mut self, pInvestorProdRCAMSMargin: *mut CThostFtdcInvestorProdRCAMSMarginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_rule_instr_parameter(&mut self, pRULEInstrParameter: *mut CThostFtdcRULEInstrParameterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_rule_intra_parameter(&mut self, pRULEIntraParameter: *mut CThostFtdcRULEIntraParameterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_rule_inter_parameter(&mut self, pRULEInterParameter: *mut CThostFtdcRULEInterParameterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_investor_prod_rule_margin(&mut self, pInvestorProdRULEMargin: *mut CThostFtdcInvestorProdRULEMarginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnFrontConnected(trait_obj: *mut ::std::os::raw::c_void) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_front_connected()
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnFrontDisconnected(trait_obj: *mut ::std::os::raw::c_void, nReason: ::std::os::raw::c_int) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_front_disconnected(nReason)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnHeartBeatWarning(trait_obj: *mut ::std::os::raw::c_void, nTimeLapse: ::std::os::raw::c_int) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_heart_beat_warning(nTimeLapse)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspAuthenticate(trait_obj: *mut ::std::os::raw::c_void, pRspAuthenticateField: *mut CThostFtdcRspAuthenticateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_authenticate(pRspAuthenticateField, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspUserLogin(trait_obj: *mut ::std::os::raw::c_void, pRspUserLogin: *mut CThostFtdcRspUserLoginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_user_login(pRspUserLogin, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspUserLogout(trait_obj: *mut ::std::os::raw::c_void, pUserLogout: *mut CThostFtdcUserLogoutField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_user_logout(pUserLogout, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspUserPasswordUpdate(trait_obj: *mut ::std::os::raw::c_void, pUserPasswordUpdate: *mut CThostFtdcUserPasswordUpdateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_user_password_update(pUserPasswordUpdate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspTradingAccountPasswordUpdate(trait_obj: *mut ::std::os::raw::c_void, pTradingAccountPasswordUpdate: *mut CThostFtdcTradingAccountPasswordUpdateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_trading_account_password_update(pTradingAccountPasswordUpdate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspUserAuthMethod(trait_obj: *mut ::std::os::raw::c_void, pRspUserAuthMethod: *mut CThostFtdcRspUserAuthMethodField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_user_auth_method(pRspUserAuthMethod, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspGenUserCaptcha(trait_obj: *mut ::std::os::raw::c_void, pRspGenUserCaptcha: *mut CThostFtdcRspGenUserCaptchaField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_gen_user_captcha(pRspGenUserCaptcha, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspGenUserText(trait_obj: *mut ::std::os::raw::c_void, pRspGenUserText: *mut CThostFtdcRspGenUserTextField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_gen_user_text(pRspGenUserText, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspOrderInsert(trait_obj: *mut ::std::os::raw::c_void, pInputOrder: *mut CThostFtdcInputOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_order_insert(pInputOrder, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspParkedOrderInsert(trait_obj: *mut ::std::os::raw::c_void, pParkedOrder: *mut CThostFtdcParkedOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_parked_order_insert(pParkedOrder, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspParkedOrderAction(trait_obj: *mut ::std::os::raw::c_void, pParkedOrderAction: *mut CThostFtdcParkedOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_parked_order_action(pParkedOrderAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspOrderAction(trait_obj: *mut ::std::os::raw::c_void, pInputOrderAction: *mut CThostFtdcInputOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_order_action(pInputOrderAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryMaxOrderVolume(trait_obj: *mut ::std::os::raw::c_void, pQryMaxOrderVolume: *mut CThostFtdcQryMaxOrderVolumeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_max_order_volume(pQryMaxOrderVolume, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspSettlementInfoConfirm(trait_obj: *mut ::std::os::raw::c_void, pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_settlement_info_confirm(pSettlementInfoConfirm, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspRemoveParkedOrder(trait_obj: *mut ::std::os::raw::c_void, pRemoveParkedOrder: *mut CThostFtdcRemoveParkedOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_remove_parked_order(pRemoveParkedOrder, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspRemoveParkedOrderAction(trait_obj: *mut ::std::os::raw::c_void, pRemoveParkedOrderAction: *mut CThostFtdcRemoveParkedOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_remove_parked_order_action(pRemoveParkedOrderAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspExecOrderInsert(trait_obj: *mut ::std::os::raw::c_void, pInputExecOrder: *mut CThostFtdcInputExecOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_exec_order_insert(pInputExecOrder, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspExecOrderAction(trait_obj: *mut ::std::os::raw::c_void, pInputExecOrderAction: *mut CThostFtdcInputExecOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_exec_order_action(pInputExecOrderAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspForQuoteInsert(trait_obj: *mut ::std::os::raw::c_void, pInputForQuote: *mut CThostFtdcInputForQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_for_quote_insert(pInputForQuote, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQuoteInsert(trait_obj: *mut ::std::os::raw::c_void, pInputQuote: *mut CThostFtdcInputQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_quote_insert(pInputQuote, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQuoteAction(trait_obj: *mut ::std::os::raw::c_void, pInputQuoteAction: *mut CThostFtdcInputQuoteActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_quote_action(pInputQuoteAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspBatchOrderAction(trait_obj: *mut ::std::os::raw::c_void, pInputBatchOrderAction: *mut CThostFtdcInputBatchOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_batch_order_action(pInputBatchOrderAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspOptionSelfCloseInsert(trait_obj: *mut ::std::os::raw::c_void, pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_option_self_close_insert(pInputOptionSelfClose, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspOptionSelfCloseAction(trait_obj: *mut ::std::os::raw::c_void, pInputOptionSelfCloseAction: *mut CThostFtdcInputOptionSelfCloseActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_option_self_close_action(pInputOptionSelfCloseAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspCombActionInsert(trait_obj: *mut ::std::os::raw::c_void, pInputCombAction: *mut CThostFtdcInputCombActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_comb_action_insert(pInputCombAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryOrder(trait_obj: *mut ::std::os::raw::c_void, pOrder: *mut CThostFtdcOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_order(pOrder, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryTrade(trait_obj: *mut ::std::os::raw::c_void, pTrade: *mut CThostFtdcTradeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_trade(pTrade, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestorPosition(trait_obj: *mut ::std::os::raw::c_void, pInvestorPosition: *mut CThostFtdcInvestorPositionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_investor_position(pInvestorPosition, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryTradingAccount(trait_obj: *mut ::std::os::raw::c_void, pTradingAccount: *mut CThostFtdcTradingAccountField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_trading_account(pTradingAccount, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestor(trait_obj: *mut ::std::os::raw::c_void, pInvestor: *mut CThostFtdcInvestorField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_investor(pInvestor, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryTradingCode(trait_obj: *mut ::std::os::raw::c_void, pTradingCode: *mut CThostFtdcTradingCodeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_trading_code(pTradingCode, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInstrumentMarginRate(trait_obj: *mut ::std::os::raw::c_void, pInstrumentMarginRate: *mut CThostFtdcInstrumentMarginRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_instrument_margin_rate(pInstrumentMarginRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInstrumentCommissionRate(trait_obj: *mut ::std::os::raw::c_void, pInstrumentCommissionRate: *mut CThostFtdcInstrumentCommissionRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_instrument_commission_rate(pInstrumentCommissionRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryExchange(trait_obj: *mut ::std::os::raw::c_void, pExchange: *mut CThostFtdcExchangeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_exchange(pExchange, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryProduct(trait_obj: *mut ::std::os::raw::c_void, pProduct: *mut CThostFtdcProductField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_product(pProduct, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInstrument(trait_obj: *mut ::std::os::raw::c_void, pInstrument: *mut CThostFtdcInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_instrument(pInstrument, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryDepthMarketData(trait_obj: *mut ::std::os::raw::c_void, pDepthMarketData: *mut CThostFtdcDepthMarketDataField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_depth_market_data(pDepthMarketData, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryTraderOffer(trait_obj: *mut ::std::os::raw::c_void, pTraderOffer: *mut CThostFtdcTraderOfferField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_trader_offer(pTraderOffer, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySettlementInfo(trait_obj: *mut ::std::os::raw::c_void, pSettlementInfo: *mut CThostFtdcSettlementInfoField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_settlement_info(pSettlementInfo, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryTransferBank(trait_obj: *mut ::std::os::raw::c_void, pTransferBank: *mut CThostFtdcTransferBankField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_transfer_bank(pTransferBank, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestorPositionDetail(trait_obj: *mut ::std::os::raw::c_void, pInvestorPositionDetail: *mut CThostFtdcInvestorPositionDetailField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_investor_position_detail(pInvestorPositionDetail, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryNotice(trait_obj: *mut ::std::os::raw::c_void, pNotice: *mut CThostFtdcNoticeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_notice(pNotice, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySettlementInfoConfirm(trait_obj: *mut ::std::os::raw::c_void, pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_settlement_info_confirm(pSettlementInfoConfirm, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestorPositionCombineDetail(trait_obj: *mut ::std::os::raw::c_void, pInvestorPositionCombineDetail: *mut CThostFtdcInvestorPositionCombineDetailField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_investor_position_combine_detail(pInvestorPositionCombineDetail, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryCFMMCTradingAccountKey(trait_obj: *mut ::std::os::raw::c_void, pCFMMCTradingAccountKey: *mut CThostFtdcCFMMCTradingAccountKeyField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_cfmmc_trading_account_key(pCFMMCTradingAccountKey, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryEWarrantOffset(trait_obj: *mut ::std::os::raw::c_void, pEWarrantOffset: *mut CThostFtdcEWarrantOffsetField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_e_warrant_offset(pEWarrantOffset, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestorProductGroupMargin(trait_obj: *mut ::std::os::raw::c_void, pInvestorProductGroupMargin: *mut CThostFtdcInvestorProductGroupMarginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_investor_product_group_margin(pInvestorProductGroupMargin, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryExchangeMarginRate(trait_obj: *mut ::std::os::raw::c_void, pExchangeMarginRate: *mut CThostFtdcExchangeMarginRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_exchange_margin_rate(pExchangeMarginRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryExchangeMarginRateAdjust(trait_obj: *mut ::std::os::raw::c_void, pExchangeMarginRateAdjust: *mut CThostFtdcExchangeMarginRateAdjustField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_exchange_margin_rate_adjust(pExchangeMarginRateAdjust, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryExchangeRate(trait_obj: *mut ::std::os::raw::c_void, pExchangeRate: *mut CThostFtdcExchangeRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_exchange_rate(pExchangeRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySecAgentACIDMap(trait_obj: *mut ::std::os::raw::c_void, pSecAgentACIDMap: *mut CThostFtdcSecAgentACIDMapField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_sec_agent_acid_map(pSecAgentACIDMap, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryProductExchRate(trait_obj: *mut ::std::os::raw::c_void, pProductExchRate: *mut CThostFtdcProductExchRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_product_exch_rate(pProductExchRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryProductGroup(trait_obj: *mut ::std::os::raw::c_void, pProductGroup: *mut CThostFtdcProductGroupField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_product_group(pProductGroup, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryMMInstrumentCommissionRate(trait_obj: *mut ::std::os::raw::c_void, pMMInstrumentCommissionRate: *mut CThostFtdcMMInstrumentCommissionRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_mm_instrument_commission_rate(pMMInstrumentCommissionRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryMMOptionInstrCommRate(trait_obj: *mut ::std::os::raw::c_void, pMMOptionInstrCommRate: *mut CThostFtdcMMOptionInstrCommRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_mm_option_instr_comm_rate(pMMOptionInstrCommRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInstrumentOrderCommRate(trait_obj: *mut ::std::os::raw::c_void, pInstrumentOrderCommRate: *mut CThostFtdcInstrumentOrderCommRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_instrument_order_comm_rate(pInstrumentOrderCommRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySecAgentTradingAccount(trait_obj: *mut ::std::os::raw::c_void, pTradingAccount: *mut CThostFtdcTradingAccountField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_sec_agent_trading_account(pTradingAccount, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySecAgentCheckMode(trait_obj: *mut ::std::os::raw::c_void, pSecAgentCheckMode: *mut CThostFtdcSecAgentCheckModeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_sec_agent_check_mode(pSecAgentCheckMode, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySecAgentTradeInfo(trait_obj: *mut ::std::os::raw::c_void, pSecAgentTradeInfo: *mut CThostFtdcSecAgentTradeInfoField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_sec_agent_trade_info(pSecAgentTradeInfo, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryOptionInstrTradeCost(trait_obj: *mut ::std::os::raw::c_void, pOptionInstrTradeCost: *mut CThostFtdcOptionInstrTradeCostField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_option_instr_trade_cost(pOptionInstrTradeCost, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryOptionInstrCommRate(trait_obj: *mut ::std::os::raw::c_void, pOptionInstrCommRate: *mut CThostFtdcOptionInstrCommRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_option_instr_comm_rate(pOptionInstrCommRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryExecOrder(trait_obj: *mut ::std::os::raw::c_void, pExecOrder: *mut CThostFtdcExecOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_exec_order(pExecOrder, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryForQuote(trait_obj: *mut ::std::os::raw::c_void, pForQuote: *mut CThostFtdcForQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_for_quote(pForQuote, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryQuote(trait_obj: *mut ::std::os::raw::c_void, pQuote: *mut CThostFtdcQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_quote(pQuote, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryOptionSelfClose(trait_obj: *mut ::std::os::raw::c_void, pOptionSelfClose: *mut CThostFtdcOptionSelfCloseField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_option_self_close(pOptionSelfClose, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestUnit(trait_obj: *mut ::std::os::raw::c_void, pInvestUnit: *mut CThostFtdcInvestUnitField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_invest_unit(pInvestUnit, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryCombInstrumentGuard(trait_obj: *mut ::std::os::raw::c_void, pCombInstrumentGuard: *mut CThostFtdcCombInstrumentGuardField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_comb_instrument_guard(pCombInstrumentGuard, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryCombAction(trait_obj: *mut ::std::os::raw::c_void, pCombAction: *mut CThostFtdcCombActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_comb_action(pCombAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryTransferSerial(trait_obj: *mut ::std::os::raw::c_void, pTransferSerial: *mut CThostFtdcTransferSerialField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_transfer_serial(pTransferSerial, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryAccountregister(trait_obj: *mut ::std::os::raw::c_void, pAccountregister: *mut CThostFtdcAccountregisterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_accountregister(pAccountregister, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspError(trait_obj: *mut ::std::os::raw::c_void, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_error(pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnOrder(trait_obj: *mut ::std::os::raw::c_void, pOrder: *mut CThostFtdcOrderField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_order(pOrder)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnTrade(trait_obj: *mut ::std::os::raw::c_void, pTrade: *mut CThostFtdcTradeField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_trade(pTrade)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnOrderInsert(trait_obj: *mut ::std::os::raw::c_void, pInputOrder: *mut CThostFtdcInputOrderField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_order_insert(pInputOrder, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnOrderAction(trait_obj: *mut ::std::os::raw::c_void, pOrderAction: *mut CThostFtdcOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_order_action(pOrderAction, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnInstrumentStatus(trait_obj: *mut ::std::os::raw::c_void, pInstrumentStatus: *mut CThostFtdcInstrumentStatusField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_instrument_status(pInstrumentStatus)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnBulletin(trait_obj: *mut ::std::os::raw::c_void, pBulletin: *mut CThostFtdcBulletinField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_bulletin(pBulletin)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnTradingNotice(trait_obj: *mut ::std::os::raw::c_void, pTradingNoticeInfo: *mut CThostFtdcTradingNoticeInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_trading_notice(pTradingNoticeInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnErrorConditionalOrder(trait_obj: *mut ::std::os::raw::c_void, pErrorConditionalOrder: *mut CThostFtdcErrorConditionalOrderField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_error_conditional_order(pErrorConditionalOrder)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnExecOrder(trait_obj: *mut ::std::os::raw::c_void, pExecOrder: *mut CThostFtdcExecOrderField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_exec_order(pExecOrder)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnExecOrderInsert(trait_obj: *mut ::std::os::raw::c_void, pInputExecOrder: *mut CThostFtdcInputExecOrderField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_exec_order_insert(pInputExecOrder, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnExecOrderAction(trait_obj: *mut ::std::os::raw::c_void, pExecOrderAction: *mut CThostFtdcExecOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_exec_order_action(pExecOrderAction, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnForQuoteInsert(trait_obj: *mut ::std::os::raw::c_void, pInputForQuote: *mut CThostFtdcInputForQuoteField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_for_quote_insert(pInputForQuote, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnQuote(trait_obj: *mut ::std::os::raw::c_void, pQuote: *mut CThostFtdcQuoteField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_quote(pQuote)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnQuoteInsert(trait_obj: *mut ::std::os::raw::c_void, pInputQuote: *mut CThostFtdcInputQuoteField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_quote_insert(pInputQuote, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnQuoteAction(trait_obj: *mut ::std::os::raw::c_void, pQuoteAction: *mut CThostFtdcQuoteActionField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_quote_action(pQuoteAction, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnForQuoteRsp(trait_obj: *mut ::std::os::raw::c_void, pForQuoteRsp: *mut CThostFtdcForQuoteRspField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_for_quote_rsp(pForQuoteRsp)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnCFMMCTradingAccountToken(trait_obj: *mut ::std::os::raw::c_void, pCFMMCTradingAccountToken: *mut CThostFtdcCFMMCTradingAccountTokenField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_cfmmc_trading_account_token(pCFMMCTradingAccountToken)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnBatchOrderAction(trait_obj: *mut ::std::os::raw::c_void, pBatchOrderAction: *mut CThostFtdcBatchOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_batch_order_action(pBatchOrderAction, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnOptionSelfClose(trait_obj: *mut ::std::os::raw::c_void, pOptionSelfClose: *mut CThostFtdcOptionSelfCloseField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_option_self_close(pOptionSelfClose)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnOptionSelfCloseInsert(trait_obj: *mut ::std::os::raw::c_void, pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_option_self_close_insert(pInputOptionSelfClose, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnOptionSelfCloseAction(trait_obj: *mut ::std::os::raw::c_void, pOptionSelfCloseAction: *mut CThostFtdcOptionSelfCloseActionField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_option_self_close_action(pOptionSelfCloseAction, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnCombAction(trait_obj: *mut ::std::os::raw::c_void, pCombAction: *mut CThostFtdcCombActionField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_comb_action(pCombAction)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnCombActionInsert(trait_obj: *mut ::std::os::raw::c_void, pInputCombAction: *mut CThostFtdcInputCombActionField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_comb_action_insert(pInputCombAction, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryContractBank(trait_obj: *mut ::std::os::raw::c_void, pContractBank: *mut CThostFtdcContractBankField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_contract_bank(pContractBank, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryParkedOrder(trait_obj: *mut ::std::os::raw::c_void, pParkedOrder: *mut CThostFtdcParkedOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_parked_order(pParkedOrder, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryParkedOrderAction(trait_obj: *mut ::std::os::raw::c_void, pParkedOrderAction: *mut CThostFtdcParkedOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_parked_order_action(pParkedOrderAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryTradingNotice(trait_obj: *mut ::std::os::raw::c_void, pTradingNotice: *mut CThostFtdcTradingNoticeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_trading_notice(pTradingNotice, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryBrokerTradingParams(trait_obj: *mut ::std::os::raw::c_void, pBrokerTradingParams: *mut CThostFtdcBrokerTradingParamsField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_broker_trading_params(pBrokerTradingParams, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryBrokerTradingAlgos(trait_obj: *mut ::std::os::raw::c_void, pBrokerTradingAlgos: *mut CThostFtdcBrokerTradingAlgosField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_broker_trading_algos(pBrokerTradingAlgos, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQueryCFMMCTradingAccountToken(trait_obj: *mut ::std::os::raw::c_void, pQueryCFMMCTradingAccountToken: *mut CThostFtdcQueryCFMMCTradingAccountTokenField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_query_cfmmc_trading_account_token(pQueryCFMMCTradingAccountToken, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnFromBankToFutureByBank(trait_obj: *mut ::std::os::raw::c_void, pRspTransfer: *mut CThostFtdcRspTransferField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_from_bank_to_future_by_bank(pRspTransfer)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnFromFutureToBankByBank(trait_obj: *mut ::std::os::raw::c_void, pRspTransfer: *mut CThostFtdcRspTransferField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_from_future_to_bank_by_bank(pRspTransfer)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnRepealFromBankToFutureByBank(trait_obj: *mut ::std::os::raw::c_void, pRspRepeal: *mut CThostFtdcRspRepealField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_repeal_from_bank_to_future_by_bank(pRspRepeal)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnRepealFromFutureToBankByBank(trait_obj: *mut ::std::os::raw::c_void, pRspRepeal: *mut CThostFtdcRspRepealField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_repeal_from_future_to_bank_by_bank(pRspRepeal)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnFromBankToFutureByFuture(trait_obj: *mut ::std::os::raw::c_void, pRspTransfer: *mut CThostFtdcRspTransferField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_from_bank_to_future_by_future(pRspTransfer)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnFromFutureToBankByFuture(trait_obj: *mut ::std::os::raw::c_void, pRspTransfer: *mut CThostFtdcRspTransferField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_from_future_to_bank_by_future(pRspTransfer)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnRepealFromBankToFutureByFutureManual(trait_obj: *mut ::std::os::raw::c_void, pRspRepeal: *mut CThostFtdcRspRepealField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_repeal_from_bank_to_future_by_future_manual(pRspRepeal)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnRepealFromFutureToBankByFutureManual(trait_obj: *mut ::std::os::raw::c_void, pRspRepeal: *mut CThostFtdcRspRepealField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_repeal_from_future_to_bank_by_future_manual(pRspRepeal)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnQueryBankBalanceByFuture(trait_obj: *mut ::std::os::raw::c_void, pNotifyQueryAccount: *mut CThostFtdcNotifyQueryAccountField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_query_bank_balance_by_future(pNotifyQueryAccount)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnBankToFutureByFuture(trait_obj: *mut ::std::os::raw::c_void, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_bank_to_future_by_future(pReqTransfer, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnFutureToBankByFuture(trait_obj: *mut ::std::os::raw::c_void, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_future_to_bank_by_future(pReqTransfer, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnRepealBankToFutureByFutureManual(trait_obj: *mut ::std::os::raw::c_void, pReqRepeal: *mut CThostFtdcReqRepealField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_repeal_bank_to_future_by_future_manual(pReqRepeal, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnRepealFutureToBankByFutureManual(trait_obj: *mut ::std::os::raw::c_void, pReqRepeal: *mut CThostFtdcReqRepealField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_repeal_future_to_bank_by_future_manual(pReqRepeal, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnQueryBankBalanceByFuture(trait_obj: *mut ::std::os::raw::c_void, pReqQueryAccount: *mut CThostFtdcReqQueryAccountField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_query_bank_balance_by_future(pReqQueryAccount, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnRepealFromBankToFutureByFuture(trait_obj: *mut ::std::os::raw::c_void, pRspRepeal: *mut CThostFtdcRspRepealField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_repeal_from_bank_to_future_by_future(pRspRepeal)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnRepealFromFutureToBankByFuture(trait_obj: *mut ::std::os::raw::c_void, pRspRepeal: *mut CThostFtdcRspRepealField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_repeal_from_future_to_bank_by_future(pRspRepeal)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspFromBankToFutureByFuture(trait_obj: *mut ::std::os::raw::c_void, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_from_bank_to_future_by_future(pReqTransfer, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspFromFutureToBankByFuture(trait_obj: *mut ::std::os::raw::c_void, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_from_future_to_bank_by_future(pReqTransfer, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQueryBankAccountMoneyByFuture(trait_obj: *mut ::std::os::raw::c_void, pReqQueryAccount: *mut CThostFtdcReqQueryAccountField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_query_bank_account_money_by_future(pReqQueryAccount, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnOpenAccountByBank(trait_obj: *mut ::std::os::raw::c_void, pOpenAccount: *mut CThostFtdcOpenAccountField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_open_account_by_bank(pOpenAccount)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnCancelAccountByBank(trait_obj: *mut ::std::os::raw::c_void, pCancelAccount: *mut CThostFtdcCancelAccountField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_cancel_account_by_bank(pCancelAccount)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnChangeAccountByBank(trait_obj: *mut ::std::os::raw::c_void, pChangeAccount: *mut CThostFtdcChangeAccountField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_change_account_by_bank(pChangeAccount)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryClassifiedInstrument(trait_obj: *mut ::std::os::raw::c_void, pInstrument: *mut CThostFtdcInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_classified_instrument(pInstrument, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryCombPromotionParam(trait_obj: *mut ::std::os::raw::c_void, pCombPromotionParam: *mut CThostFtdcCombPromotionParamField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_comb_promotion_param(pCombPromotionParam, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryRiskSettleInvstPosition(trait_obj: *mut ::std::os::raw::c_void, pRiskSettleInvstPosition: *mut CThostFtdcRiskSettleInvstPositionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_risk_settle_invst_position(pRiskSettleInvstPosition, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryRiskSettleProductStatus(trait_obj: *mut ::std::os::raw::c_void, pRiskSettleProductStatus: *mut CThostFtdcRiskSettleProductStatusField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_risk_settle_product_status(pRiskSettleProductStatus, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySPBMFutureParameter(trait_obj: *mut ::std::os::raw::c_void, pSPBMFutureParameter: *mut CThostFtdcSPBMFutureParameterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_spbm_future_parameter(pSPBMFutureParameter, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySPBMOptionParameter(trait_obj: *mut ::std::os::raw::c_void, pSPBMOptionParameter: *mut CThostFtdcSPBMOptionParameterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_spbm_option_parameter(pSPBMOptionParameter, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySPBMIntraParameter(trait_obj: *mut ::std::os::raw::c_void, pSPBMIntraParameter: *mut CThostFtdcSPBMIntraParameterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_spbm_intra_parameter(pSPBMIntraParameter, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySPBMInterParameter(trait_obj: *mut ::std::os::raw::c_void, pSPBMInterParameter: *mut CThostFtdcSPBMInterParameterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_spbm_inter_parameter(pSPBMInterParameter, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySPBMPortfDefinition(trait_obj: *mut ::std::os::raw::c_void, pSPBMPortfDefinition: *mut CThostFtdcSPBMPortfDefinitionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_spbm_portf_definition(pSPBMPortfDefinition, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySPBMInvestorPortfDef(trait_obj: *mut ::std::os::raw::c_void, pSPBMInvestorPortfDef: *mut CThostFtdcSPBMInvestorPortfDefField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_spbm_investor_portf_def(pSPBMInvestorPortfDef, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestorPortfMarginRatio(trait_obj: *mut ::std::os::raw::c_void, pInvestorPortfMarginRatio: *mut CThostFtdcInvestorPortfMarginRatioField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_investor_portf_margin_ratio(pInvestorPortfMarginRatio, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestorProdSPBMDetail(trait_obj: *mut ::std::os::raw::c_void, pInvestorProdSPBMDetail: *mut CThostFtdcInvestorProdSPBMDetailField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_investor_prod_spbm_detail(pInvestorProdSPBMDetail, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestorCommoditySPMMMargin(trait_obj: *mut ::std::os::raw::c_void, pInvestorCommoditySPMMMargin: *mut CThostFtdcInvestorCommoditySPMMMarginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_investor_commodity_spmm_margin(pInvestorCommoditySPMMMargin, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestorCommodityGroupSPMMMargin(trait_obj: *mut ::std::os::raw::c_void, pInvestorCommodityGroupSPMMMargin: *mut CThostFtdcInvestorCommodityGroupSPMMMarginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_investor_commodity_group_spmm_margin(pInvestorCommodityGroupSPMMMargin, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySPMMInstParam(trait_obj: *mut ::std::os::raw::c_void, pSPMMInstParam: *mut CThostFtdcSPMMInstParamField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_spmm_inst_param(pSPMMInstParam, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySPMMProductParam(trait_obj: *mut ::std::os::raw::c_void, pSPMMProductParam: *mut CThostFtdcSPMMProductParamField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_spmm_product_param(pSPMMProductParam, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySPBMAddOnInterParameter(trait_obj: *mut ::std::os::raw::c_void, pSPBMAddOnInterParameter: *mut CThostFtdcSPBMAddOnInterParameterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_spbm_add_on_inter_parameter(pSPBMAddOnInterParameter, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryRCAMSCombProductInfo(trait_obj: *mut ::std::os::raw::c_void, pRCAMSCombProductInfo: *mut CThostFtdcRCAMSCombProductInfoField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_rcams_comb_product_info(pRCAMSCombProductInfo, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryRCAMSInstrParameter(trait_obj: *mut ::std::os::raw::c_void, pRCAMSInstrParameter: *mut CThostFtdcRCAMSInstrParameterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_rcams_instr_parameter(pRCAMSInstrParameter, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryRCAMSIntraParameter(trait_obj: *mut ::std::os::raw::c_void, pRCAMSIntraParameter: *mut CThostFtdcRCAMSIntraParameterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_rcams_intra_parameter(pRCAMSIntraParameter, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryRCAMSInterParameter(trait_obj: *mut ::std::os::raw::c_void, pRCAMSInterParameter: *mut CThostFtdcRCAMSInterParameterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_rcams_inter_parameter(pRCAMSInterParameter, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryRCAMSShortOptAdjustParam(trait_obj: *mut ::std::os::raw::c_void, pRCAMSShortOptAdjustParam: *mut CThostFtdcRCAMSShortOptAdjustParamField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_rcams_short_opt_adjust_param(pRCAMSShortOptAdjustParam, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryRCAMSInvestorCombPosition(trait_obj: *mut ::std::os::raw::c_void, pRCAMSInvestorCombPosition: *mut CThostFtdcRCAMSInvestorCombPositionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_rcams_investor_comb_position(pRCAMSInvestorCombPosition, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestorProdRCAMSMargin(trait_obj: *mut ::std::os::raw::c_void, pInvestorProdRCAMSMargin: *mut CThostFtdcInvestorProdRCAMSMarginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_investor_prod_rcams_margin(pInvestorProdRCAMSMargin, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryRULEInstrParameter(trait_obj: *mut ::std::os::raw::c_void, pRULEInstrParameter: *mut CThostFtdcRULEInstrParameterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_rule_instr_parameter(pRULEInstrParameter, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryRULEIntraParameter(trait_obj: *mut ::std::os::raw::c_void, pRULEIntraParameter: *mut CThostFtdcRULEIntraParameterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_rule_intra_parameter(pRULEIntraParameter, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryRULEInterParameter(trait_obj: *mut ::std::os::raw::c_void, pRULEInterParameter: *mut CThostFtdcRULEInterParameterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_rule_inter_parameter(pRULEInterParameter, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestorProdRULEMargin(trait_obj: *mut ::std::os::raw::c_void, pInvestorProdRULEMargin: *mut CThostFtdcInvestorProdRULEMarginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_investor_prod_rule_margin(pInvestorProdRULEMargin, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_Drop(trait_obj: *mut ::std::os::raw::c_void) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let _r: Box<Box<dyn Rust_CThostFtdcTraderSpi_Trait>> = unsafe { Box::from_raw(trait_obj) };
}
